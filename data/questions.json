[
    {
        "problem": "0-1 Sequences",
        "body": {
            "question": "You are given a sequence, in the form of a string with\n    characters ‘0’, ‘1’, and ‘?’ only.\n    Suppose there are $k$\n    ‘?’s. Then there are $2^ k$ ways to replace each\n    ‘?’ by a ‘0’ or a ‘1’, giving\n    $2^ k$ different 0-1\n    sequences (0-1 sequences are sequences with only zeroes and\n    ones).For each 0-1 sequence, define its number of inversions as\n    the minimum number of adjacent swaps required to sort the\n    sequence in non-decreasing order. In this problem, the sequence\n    is sorted in non-decreasing order precisely when all the zeroes\n    occur before all the ones. For example, the sequence 11010 has $5$ inversions. We can sort it by the\n    following moves: 11010 $\\rightarrow $ 11001 $\\rightarrow $ 10101 $\\rightarrow $ 01101 $\\rightarrow $ 01011 $\\rightarrow $ 00111.Find the sum of the number of inversions of the $2^ k$ sequences, modulo $1\\, 000\\, 000\\, 007$ ($10^9 + 7$).",
            "input": "The first and only line of input contains the input string,\n    consisting of characters ‘0’,\n    ‘1’, and ‘?’ only, and the input string has between\n    $1$ to $500\\, 000$ characters, inclusive.",
            "output": "Output an integer indicating the aforementioned number of\n    inversions modulo $1\\, 000\\,\n    000\\, 007$."
        },
        "table": {
            "input": [
                "?0?\n"
            ],
            "output": [
                "3\n"
            ]
        },
        "sidebar": {
            "problemID": "sequences",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.6"
        },
        "content": {
            "author": "Tung Kam Chuen",
            "source": "Hong Kong Regional Online Preliminary 2016",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "?0?\n"
            ],
            "output": [
                "3\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "10 Kinds of People",
        "body": {
            "question": "The world is made up of $10$ kinds of people, those who\n    understand binary and those who do not. These different kinds\n    of people do not always get along so well. Bob might ask for a\n    $10000$ ounce coffee\n    (meaning binary) and Alice might make misinterpret his request\n    as being in decimal and give him a $10011100010000$ ounce coffee\n    (binary). After Sue explains that this much coffee costs\n    $100$ dollars (decimal),\n    Bob might assume he only has to pay $4$ dollars (interpreting the price as\n    being in binary). In response to these differences that are\n    difficult to resolve, these two groups have divided the world\n    into two regions, the binary-friendly zones and the\n    decimal-friendly zones. They have even published a map like the\n    following to help people keep up with where the areas are (they\n    have used ones and zeros so nobody would have trouble reading\n    it).1111100000\n      1111000000\n      1110000011\n      0111100111\n      0011111111\n    Users of binary have to stay in the zones marked with a\n    zero. Users of decimal have to stay in the zones marked with a\n    one. You have to figure out if it is possible for either type\n    of person to get between various locations of interest. People\n    can move north, south, east or west, but cannot move\n    diagonally.",
            "input": "Input starts with a line containing two positive integers,\n    $1 \\le r \\le 1\\, 000$ and\n    $1 \\le c \\le 1\\, 000$. The\n    next $r$ input lines give\n    the contents of the map, each line containing exactly\n    $c$ characters (which are\n    all chosen from $0$ or\n    $1$).The next line has an integer $0 \\le n \\le 1\\, 000$. The following\n    $n$ lines each contain one\n    query, given as four integers: $r_1,c_1$ and $r_2,c_2$. These two pairs indicate\n    two locations on the map, and their limits are $1 \\le r_1, r_2 \\le r$ and\n    $1 \\le c_1, c_2 \\le\n    c$.",
            "output": "For each query, output binary if a\n    binary user can start from location $r_1, c_1$ and move to location\n    $r_2, c_2$. Output\n    decimal if a decimal user can move\n    between the two locations. Otherwise, output neither."
        },
        "table": {
            "input": [
                "1 4\n1100\n2\n1 1 1 4\n1 1 1 1\n",
                "10 20\n11111111111111111111\n11000000000000000101\n11111111111111110000\n11111111111111110000\n11000000000000000111\n00011111111111111111\n00111111111111111111\n10000000000000001111\n11111111111111111111\n11111111111111111111\n3\n2 3 8 16\n8 1 7 3\n1 1 10 20\n"
            ],
            "output": [
                "neither\ndecimal\n",
                "binary\ndecimal\nneither\n"
            ]
        },
        "sidebar": {
            "problemID": "10kindsofpeople",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.0"
        },
        "content": {
            "author": "David Sturgill",
            "source": "Baylor Competitive Learning course",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1 4\n1100\n2\n1 1 1 4\n1 1 1 1\n",
                "10 20\n11111111111111111111\n11000000000000000101\n11111111111111110000\n11111111111111110000\n11000000000000000111\n00011111111111111111\n00111111111111111111\n10000000000000001111\n11111111111111111111\n11111111111111111111\n3\n2 3 8 16\n8 1 7 3\n1 1 10 20\n"
            ],
            "output": [
                "neither\ndecimal\n",
                "binary\ndecimal\nneither\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "2048",
        "body": {
            "question": "2048 is a single-player puzzle game\n    created by Gabriele Cirulli1. It is played\n    on a $4 \\times 4$ grid\n    that contains integers $\\geq\n    2$ that are powers of 2. The player can use a keyboard\n    arrow key (left/up/right/down) to move all the tiles\n    simultaneously. Tiles slide as far as possible in the chosen\n    direction until they are stopped by either another tile or the\n    edge of the grid. If two tiles of the same number collide while\n    moving, they will merge into a tile with the total value of the\n    two tiles that collided. The resulting tile cannot merge with\n    another tile again in the same move. Please observe this\n    merging behavior carefully in all Sample Inputs and\n    Outputs.",
            "input": "The input is always a valid game state of a 2048 puzzle. The\n    first four lines of input, that each contains four integers,\n    describe the 16 integers in the $4 \\times 4$ grid of 2048 puzzle. The\n    $j$-th integer in the\n    $i$-th line denotes the\n    content of the cell located at the $i$-th row and the $j$-th cell. For this problem, all\n    integers in the input will be either {0, 2, 4, 8, 16, 32, 64,\n    128, 256, 512, 1024}. Integer 0 means an empty cell.The fifth line of input contains an integer 0, 1, 2, or 3\n    that denotes a left, up, right, or down move executed by the\n    player, respectively.",
            "output": "Output four lines with four integers each. Two integers in a\n    line must be separated by a single space. This describes the\n    new state of the $4 \\times\n    4$ grid of 2048 puzzle. Again, integer 0 means an empty\n    cell. Note that in this problem, you can ignore the part from\n    the 2048 puzzle where it introduces a new random tile with a\n    value of either 2 or 4 in an empty spot of the board at the\n    start of a new turn."
        },
        "table": {
            "input": [
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\n",
                "2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n",
                "2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\n"
            ],
            "output": [
                "4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n",
                "2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n",
                "0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n",
                "2 0 0 0\n4 16 8 0\n2 64 32 4\n1024 1024 64 4\n",
                "4 4 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n",
                "0 4 4 8\n0 0 4 8\n0 0 32 32\n0 32 32 32\n"
            ]
        },
        "sidebar": {
            "problemID": "2048",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.5"
        },
        "content": {
            "author": "Steven Halim",
            "source": "ICPC SG Preliminary Contest 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "6",
            "input": [
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n",
                "2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\n",
                "2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n",
                "2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\n"
            ],
            "output": [
                "4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n",
                "2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n",
                "0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n",
                "2 0 0 0\n4 16 8 0\n2 64 32 4\n1024 1024 64 4\n",
                "4 4 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n",
                "0 4 4 8\n0 0 4 8\n0 0 32 32\n0 32 32 32\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "3D Printed Statues",
        "body": {
            "question": "You have a single 3D printer, and would like to use it to\n    produce $n$ statues.\n    However, printing the statues one by one on the 3D printer\n    takes a long time, so it may be more time-efficient to first\n    use the 3D printer to print a new printer. That new printer may\n    then in turn be used to print statues or even more printers.\n    Print jobs take a full day, and every day you can choose for\n    each printer in your possession to have it print a statue, or\n    to have it 3D print a new printer (which becomes available for\n    use the next day).What is the minimum possible number of days needed to print\n    at least $n$ statues?",
            "input": "The input contains a single integer $n$ ($1\n    \\le n \\le 10\\, 000$), the number of statues you need to\n    print.",
            "output": "Output a single integer, the minimum number of days needed\n    to print at least $n$\n    statues."
        },
        "table": {
            "input": [
                "1\n",
                "5\n"
            ],
            "output": [
                "1\n",
                "4\n"
            ]
        },
        "sidebar": {
            "problemID": "3dprinter",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.9"
        },
        "content": {
            "author": "Unnar Freyr Erlendsson",
            "source": "KTH Challenge 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1\n",
                "5\n"
            ],
            "output": [
                "1\n",
                "4\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "3D Printer",
        "body": {
            "question": "3D printing is a technique for manufacturing items from a\n    digital template. The printer lays down layers of a polymer\n    material, building an entire 3D object as a series of flat\n    plates of varying shapes, stacked upon one another. The polymer\n    is initially sticky enough so that the plates printed on top of\n    one another will adhere. After the object dries or cures, the\n    resulting objects can be quite durable.Consider a 3D printer in which objects to be printed are\n    described as a template, consisting of a combination of several\n    convex polyhedra (i.e., flat-surfaced objects such that a line\n    from one interior point to another interior point never passes\n    outside the volume of the object). Write a program to determine\n    the total volume of polymer required to sculpt an object from a\n    given template.",
            "input": "There will be a single test case in the input. This test\n    case will begin with a line with a single integer $n$ ($1\n    \\le n \\le 100$) representing the number of polyhedra in\n    that template.The subsequent lines describe the n polyhedra. Each\n    polyhedron begins with a line containing an integer\n    $f$ ($3 < f < 30$), which is the\n    number of faces on the polyhedron. Following that line is a\n    series of lines describing polygons that comprise the faces.\n    Each such line begins with an integer $v$ ($3\n    \\le v \\le 24$), which is the number of vertices.\n    Following $v$ on the same\n    line will be $3 \\cdot v$\n    real numbers, representing the $v$ vertices as $(x,y,z)$ coordinates. For example, if\n    $v=3$, then the line would\n    be    v x1 y1 z1 x2\n    y2 z2 x3 y3 z3All coordinates will be in the range $[-100 \\ldots 100]$. Vertices are\n    presented in sequential order; there will be an edge of the\n    polygon from $(x_1,y_1,z_1)$ to $(x_2,y_2,z_2)$, from $(x_2,y_2,z_2)$ to $(x_3,y_3,z_3)$, and so on. The\n    polygons are closed, so there is an implied edge from the last\n    vertex in a polygon back to the first. All of the vertices of a\n    face will be coplanar. Edges will not cross, and each vertex\n    will lie on exactly two edges. No three (or more) vertices in a\n    polygon will be collinear. None of the polyhedra will\n    overlap.",
            "output": "Print a real number on its own line, indicating the volume\n    of polymer required in cubic centimeters. The volume should be\n    printed with a precision of two decimal places, rounded."
        },
        "table": {
            "input": [
                "2\n6\n4 10 10 0 10 15 0 15 15 0 15 10 0\n4 10 10 0 10 15 0 10 15 20 10 10 20\n4 10 15 0 15 15 0 15 15 20 10 15 20\n4 15 15 0 15 10 0 15 10 20 15 15 20\n4 10 10 0 15 10 0 15 10 20 10 10 20\n4 10 10 20 10 15 20 15 15 20 15 10 20\n6\n4 0 0 0 0 25 0 25 25 0 25 0 0\n4 0 0 0 0 25 0 0 25 0.5 0 0 0.5\n4 0 25 0 25 25 0 25 25 0.5 0 25 0.5\n4 25 25 0 25 0 0 25 0 0.5 25 25 0.5\n4 25 0 0 0 0 0 0 0 0.5 25 0 0.5\n4 0 0 0.5 0 25 0.5 25 25 0.5 25 0 0.5\n"
            ],
            "output": [
                "812.50\n"
            ]
        },
        "sidebar": {
            "problemID": "threedprinter",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "8.3"
        },
        "content": {
            "author": "2013 University of Chicago Invitational Programming Contest",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n6\n4 10 10 0 10 15 0 15 15 0 15 10 0\n4 10 10 0 10 15 0 10 15 20 10 10 20\n4 10 15 0 15 15 0 15 15 20 10 15 20\n4 15 15 0 15 10 0 15 10 20 15 15 20\n4 10 10 0 15 10 0 15 10 20 10 10 20\n4 10 10 20 10 15 20 15 15 20 15 10 20\n6\n4 0 0 0 0 25 0 25 25 0 25 0 0\n4 0 0 0 0 25 0 0 25 0.5 0 0 0.5\n4 0 25 0 25 25 0 25 25 0.5 0 25 0.5\n4 25 25 0 25 0 0 25 0 0.5 25 25 0.5\n4 25 0 0 0 0 0 0 0 0.5 25 0 0.5\n4 0 0 0.5 0 25 0.5 25 25 0.5 25 0 0.5\n"
            ],
            "output": [
                "812.50\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "3-Sided Dice",
        "body": {
            "question": "Just like every fall, the organizers of the Southwestern\n    Europe Dice Simulation Contest are busy again this year. In\n    this edition you have to simulate a $3$-sided die that outputs each of\n    three possible outcomes (which will be denoted by $1$, $2$ and $3$) with a given probability, using\n    three dice in a given set. The simulation is performed this\n    way: you choose one of the given dice at random, roll it, and\n    report its outcome. You are free to choose the probabilities of\n    rolling each of the given dice, as long as each probability\n    is strictly greater than zero. Before distributing the\n    materials to the contestants, the organizers have to verify\n    that it is actually possible to solve this task.For example, in the first test case of the sample input you\n    have to simulate a die that yields outcome $1$, $2$ and $3$ with probabilities $3/10$, $4/10$ and $3/10$. We give you three dice, and in\n    this case the $i$-th of\n    them always yields outcome $i$, for each $i = 1, 2, 3$. Then it is possible to\n    simulate the given die in the following fashion: roll the first\n    die with probability $3/10$ , the second one with\n    probability $4/10$ and the\n    last one with probability $3/10$.",
            "input": "The input consists of at most $50$ test cases, separated by single\n    blank lines. Each test case consists of four lines: the first\n    three of them describe the three dice you are given and the\n    last one describes the die you have to simulate. Each of the\n    four lines contains 3 space-separated integers between\n    $0$ and $10\\, 000$ inclusive. These numbers\n    will add up to $10\\, 000$,\n    and represent $10\\, 000$\n    times the probability that rolling the die described in that\n    line yields outcome $1$,\n    $2$ and $3$, respectively.The test cases will finish with a line containing only the\n    number zero repeated three times (also preceded with a blank\n    line).",
            "output": "For each case, your program should output a line with the\n    word YES if it is feasible to produce\n    the desired die from the given ones, and NO otherwise."
        },
        "table": {
            "input": [
                "0 0 10000\n0 10000 0\n10000 0 0\n3000 4000 3000\n\n0 0 10000\n0 10000 0\n3000 4000 3000\n10000 0 0\n\n0 0 0\n"
            ],
            "output": [
                "YES\nNO\n"
            ]
        },
        "sidebar": {
            "problemID": "3sideddice",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "8.5"
        },
        "content": {
            "author": "Southwestern Europe Regional Contest (SWERC) 2010",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "0 0 10000\n0 10000 0\n10000 0 0\n3000 4000 3000\n\n0 0 10000\n0 10000 0\n3000 4000 3000\n10000 0 0\n\n0 0 0\n"
            ],
            "output": [
                "YES\nNO\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "4 thought",
        "body": {
            "question": "Write a program which, given an integer $n$ as input, will produce a\n    mathematical expression whose solution is $n$. The solution is restricted to\n    using exactly four $4$’s\n    and exactly three of the binary operations selected from the\n    set $\\{ *, +, -, /\\} $.\n    The number $4$ is the ONLY\n    number you can use. You are not allowed to concatenate fours to\n    generate other numbers, such as $44$ or $444$.For example given $n=0$, a solution is $4 * 4 - 4 * 4 = 0$. Given\n    $n=7$, a solution is\n    $4 + 4 - 4~ /~ 4 = 7$.\n    Division is considered truncating integer division, so that\n    $1/4$ is $0$ (instead of $0.25$). Assume the usual precedence\n    of operations so that $4 + 4 * 4\n    = 20$, not $32$.\n    Not all integer inputs have solutions using four $4$’s with the aforementioned\n    restrictions (consider $n=11$).Hint: Using your forehead and some forethought should\n    make an answer forthcoming. When in doubt use the\n    fourth.",
            "input": "Input begins with an integer $1 \\leq m \\leq 1\\, 000$, indicating\n    the number of test cases that follow. Each of the next\n    $m$ lines contain exactly\n    one integer value for $n$\n    in the range $-1\\, 000\\, 000 \\leq\n    n \\leq 1\\, 000\\, 000$.",
            "output": "For each test case print one line of output containing\n    either an equation using four $4$’s to reach the target number or\n    the phrase no solution. Print the equation\n    following the format of the sample output; use spaces to\n    separate the numbers and symbols printed. If there is more than\n    one such equation which evaluates to the target integer, print\n    any one of them."
        },
        "table": {
            "input": [
                "5\n9\n0\n7\n11\n24\n"
            ],
            "output": [
                "4 + 4 + 4 / 4 = 9\n4 * 4 - 4 * 4 = 0\n4 + 4 - 4 / 4 = 7\nno solution\n4 * 4 + 4 + 4 = 24\n"
            ]
        },
        "sidebar": {
            "problemID": "4thought",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.9"
        },
        "content": {
            "author": "Bruce S. Elenbogen",
            "source": "2013 ACM-ICPC North American Qualifier",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "5\n9\n0\n7\n11\n24\n"
            ],
            "output": [
                "4 + 4 + 4 / 4 = 9\n4 * 4 - 4 * 4 = 0\n4 + 4 - 4 / 4 = 7\nno solution\n4 * 4 + 4 + 4 = 24\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A1 Paper",
        "body": {
            "question": "Björn likes the square root of two, $\\sqrt {2} = 1.41421356\\dots $ very\n    much. He likes it so much that he has decided to write down the\n    first $10\\, 000$ digits of\n    it on a single paper. He started doing this on an A4 paper, but\n    ran out of space after writing down only $1250$ digits. Being pretty good at\n    math, he quickly figured out that he needs an A1 paper to fit\n    all the digits. Björn doesn’t have an A1 paper, but he has\n    smaller papers which he can tape together.Taping two A2 papers together along their long side turns\n    them into an A1 paper, two A3 papers give an A2 paper, and so\n    on. Given the number of papers of different sizes that Björn\n    has, can you figure out how much tape he needs to make an A1\n    paper? Assume that the length of tape needed to join together\n    two sheets of papers is equal to their long side. An A2 paper\n    is $2^{-5/4}$ meters\n    by $2^{-3/4}$ meters\n    and each consecutive paper size (A3, A4, ) have the same shape\n    but half the area of the previous one.",
            "input": "The first line of input contains a single integer\n    $2\\leq n \\leq 30$, the\n    A-size of the smallest papers Björn has. The second line\n    contains $n-1$ integers\n    giving the number of sheets he has of each paper size starting\n    with A2 and ending with A$n$. Björn doesn’t have more than\n    $10^9$ sheets of any paper\n    size.",
            "output": "If Björn has enough paper to make an A1 paper, output a\n    single floating point number, the smallest total length of tape\n    needed in meters. Otherwise output “impossible”. The output number should have an\n    absolute error of at most $10^{-5}$."
        },
        "table": {
            "input": [
                "4\n1 0 5\n",
                "3\n0 3\n"
            ],
            "output": [
                "1.60965532263\n",
                "impossible\n"
            ]
        },
        "sidebar": {
            "problemID": "a1paper",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.6"
        },
        "content": {
            "author": "Ulf Lundström",
            "source": "KTH Challenge 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n1 0 5\n",
                "3\n0 3\n"
            ],
            "output": [
                "1.60965532263\n",
                "impossible\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Aaah!",
        "body": {
            "question": "Jon Marius shouted too much at the recent Justin Bieber\n    concert, and now needs to go to the doctor because of his sore\n    throat. The doctor’s instructions are to say “aaah”.\n    Unfortunately, the doctors sometimes need Jon Marius to say\n    “aaah” for a while, which Jon Marius has never been good at.\n    Each doctor requires a certain level of “aah” – some\n    require “aaaaaah”, while others can actually diagnose his\n    throat with just an “h”. (They often diagnose wrongly, but that\n    is beyond the scope of this problem.) Since Jon Marius does not\n    want to go to a doctor and have his time wasted, he wants to\n    compare how long he manages to hold the “aaah” with the\n    doctor’s requirements. (After all, who wants to be all like\n    “aaah” when the doctor wants you to go “aaaaaah”?)Each day Jon Marius calls up a different doctor and asks\n    them how long his “aaah” has to be. Find out if Jon Marius\n    would waste his time going to the given doctor.",
            "input": "The input consists of two lines. The first line is the\n    “aaah” Jon Marius is able to say that day. The second line is\n    the “aah” the doctor wants to hear. Only lowercase ’a’ and ’h’\n    will be used in the input, and each line will contain between\n    $0$ and $999$ ’a’s, inclusive, followed by a\n    single ’h’.",
            "output": "Output “go” if Jon Marius can go to that\n    doctor, and output “no” otherwise."
        },
        "table": {
            "input": [
                "aaah\naaaaah\n",
                "aaah\nah\n"
            ],
            "output": [
                "no\n",
                "go\n"
            ]
        },
        "sidebar": {
            "problemID": "aaah",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.5"
        },
        "content": {
            "author": "Christian Neverdal Jonassen",
            "source": "Nordic Collegiate Programming Contest (NCPC) 2012",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "aaah\naaaaah\n",
                "aaah\nah\n"
            ],
            "output": [
                "no\n",
                "go\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Abandoned Animal",
        "body": {
            "question": "You know that your sister will hold on to her beloved\n    Fluffynose whenever possible, so the only time she could’ve\n    lost it is when she grabbed an item on her shopping list. So,\n    all you have to do is figure out at what store she bought what,\n    and then you’ll reunite her with her counterpart in no time!\n    However, you soon find out that this isn’t quite as easy as you\n    thought: she went to a lot of stores, and although she knows\n    the names of the stores she went to and the order in which she\n    visited them, she does not recall what she bought at each store\n    (it could have been nothing!). It would take a lot of time to\n    blindly search all the stores for all these items. As you have\n    better things to do today, like solving programming problems,\n    you want to spend as little time on this retrieval as possible.\n    Therefore, you want to know exactly which items your sister\n    bought at each store before you start your search.For this you have two pieces of information: firstly you\n    know the inventory of all stores your sister went to. Secondly,\n    you know exactly in what order she purchased the groceries, as\n    she has very carefully stacked all items into her bag. You\n    decide to number the stores your sister visited according to\n    the order in which she visited them. Given this information,\n    you want to decide whether you know for sure where she bought\n    every item so you can retrace her steps as efficiently as\n    possible.",
            "input": "The input starts with a line with a single integer\n    $1 \\leq N \\leq 100{,}000$,\n    the number of supermarkets in town. Then follows a line with an\n    integer $N\\leq K \\leq\n    100{,}000$, after which $K$ lines follow with a\n    space-separated integer $i$ (between $0$ and $N-1$) and a string $S$ (consisting of only lowercase\n    letters, at most $10$),\n    denoting that item $S$ is\n    available at the $i^\\text\n    {th}$ store that your sister visited. It is guaranteed\n    that every store has at least one item, every item is available\n    at at least one store, and that every item occurs at most once\n    at every store.The second part of the input contains the list of items your\n    sister bought, in order of purchase. It starts with a line with\n    an integer $M\\leq K$, the\n    number of items your sister has bought. Then follow\n    $M$ lines, each with\n    string $T$, denoting the\n    name of the item your sister bought. The items are given in the\n    order she purchased them in. All items that your sister has\n    bought are unique.",
            "output": "Output “impossible\" if there is no\n    path through the stores that matches your sister’s description.\n    Output “unique\" if there is exactly\n    one path through the stores that matches. Output “ambiguous\" if there are multiple possible\n    paths."
        },
        "table": {
            "input": [
                "3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n",
                "3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n",
                "3\n10\n0 tomatoes\n0 cucumber\n1 tomatoes\n2 tomatoes\n2 cucumber\n1 mustard\n0 salt\n2 salad\n2 salt\n2 mustard\n5\ntomatoes\ncucumber\nsalad\nmustard\nsalt\n"
            ],
            "output": [
                "impossible\n",
                "unique\n",
                "ambiguous\n"
            ]
        },
        "sidebar": {
            "problemID": "abandonedanimal",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.1"
        },
        "content": {
            "author": "Harry Smit",
            "source": "Benelux Algorithm Programming Contest (BAPC) preliminaries 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n",
                "3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n",
                "3\n10\n0 tomatoes\n0 cucumber\n1 tomatoes\n2 tomatoes\n2 cucumber\n1 mustard\n0 salt\n2 salad\n2 salt\n2 mustard\n5\ntomatoes\ncucumber\nsalad\nmustard\nsalt\n"
            ],
            "output": [
                "impossible\n",
                "unique\n",
                "ambiguous\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "ABC",
        "body": {
            "question": "You will be given three integers $A$, $B$ and $C$. The numbers will not be given in\n    that exact order, but we do know that $A$ is less than $B$ and $B$ less than $C$. In order to make for a more\n    pleasant viewing, we want to rearrange them in a given\n    order.",
            "input": "The first line contains the three positive integers\n    $A$, $B$ and $C$, not necessarily in that order.\n    The three numbers will be less than or equal to $100$.The second line contains three uppercase letters ’A’, ’B’ and\n    ’C’ (with no spaces between them)\n    representing the desired order.",
            "output": "Output $A$,\n    $B$ and $C$ in the desired order on a single\n    line, separated by single spaces."
        },
        "table": {
            "input": [
                "1 5 3\nABC\n",
                "6 4 2\nCAB\n"
            ],
            "output": [
                "1 3 5\n",
                "6 2 4\n"
            ]
        },
        "sidebar": {
            "problemID": "abc",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.7"
        },
        "content": {
            "author": "Croatian Open Competition in Informatics 2006/2007, contest #2",
            "source": ""
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1 5 3\nABC\n",
                "6 4 2\nCAB\n"
            ],
            "output": [
                "1 3 5\n",
                "6 2 4\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Ab Initio",
        "body": {
            "question": "“A journey of a thousand miles begins\n    with a single step.” ­–Lao Tzu.When someone is studying competitive programming from the\n    beginning, he or she is said to be a student of competitive\n    programming ab initio. Students should\n    be given relatively easy problems to begin their journeys,\n    before they are gradually given more difficult problems.Here is an example of an easy problem that does not even\n    need a description.",
            "input": "The first line of input contains three integers $V$ ($2\n    \\leq V \\leq 2\\, 000$), $E$ ($1\n    \\leq E \\leq 200\\, 000$), and $Q$ ($1\n    \\leq Q \\leq 2\\, 000$), the number of vertices, the\n    number of edges and the number of queries that must be\n    performed on a directed, unweighted graph $G$, respectively. For simplicity, we\n    label the vertices $0, 1, 2,\n    \\dots , V-1$.The next $E$ lines\n    describe the edges of $G$,\n    given in the format of an edge list. In\n    particular, the $i^\\text\n    {th}$ of these lines contains two integers $A_ i$ and $B_ i$ ($0\\leq A_ i, B_ i < V$;\n    $A_ i \\neq B_ i$),\n    denoting that the $i^\\text\n    {th}$ edge connects vertex $A_ i$ to vertex $B_ i$. It is guaranteed that for any\n    pair of vertices $(a, b)$,\n    there is at most one edge from $a$ to $b$.The next $Q$ lines\n    contain the queries. In particular, the $i^\\text {th}$ of these lines begins\n    with a single integer:\n      \n        If this integer is $1$, no integers follow.\n        \n          \n            You should add a new vertex labeled $V$ to $G$. This vertex should not\n            have edges to or from any other vertex. $V$ – the current size of\n            $G$ – now\n            increases by 1.\n          \n        \n      \n      \n        If this integer is $2$, two integers $X_ i$ and $Y_ i$ ($0\\leq X_ i, Y_ i < V$;\n        $X_ i \\neq Y_ i$)\n        follow.\n        \n          \n            You should add a new directed edge connecting vertex\n            $X_ i$ to vertex\n            $Y_ i$ in\n            $G$. It is\n            guaranteed that this edge does not currently exist.\n          \n        \n      \n      \n        If this integer is $3$, a single integer $X_ i$ ($0\\leq X_ i < V$) follows.\n        \n          \n            You should delete all the incoming and outgoing\n            edges of $X_ i$\n            from the graph $G$.\n          \n        \n      \n      \n        If this integer is $4$, two integers $X_ i$ and $Y_ i$ ($0\\leq X_ i, Y_ i < V$;\n        $X_ i \\neq Y_ i$)\n        follow.\n        \n          \n            You should remove the directed edge connecting\n            vertex $X_ i$ to\n            vertex $Y_ i$ from\n            $G$. It is\n            guaranteed that this edge currently exists.\n          \n        \n      \n      \n        If this integer is $5$, no integers follow.\n        \n          \n            You should replace $G$ with its transpose\n            $G’$, defined as\n            follows:\n            For every pair of vertices $(a, b)$, the edge from\n            $a$ to\n            $b$ exists in\n            $G’$ if and only\n            $a \\neq b$ and the\n            edge from $b$ to\n            $a$ exists in\n            $G$.\n          \n        \n      \n      \n        If this integer is $6$, no integers follow.\n        \n          \n            You should replace $G$ with its complement\n            $\\bar{G}$, defined\n            as follows:\n            For every pair of vertices $(a, b)$, the edge from\n            $a$ to\n            $b$ exists in\n            $\\bar{G}$ if and\n            only $a \\neq b$\n            and the edge from $a$ to $b$ does not exist in\n            $G$.",
            "output": "After performing all the queries, you will have a final\n    graph $G$. Since this\n    graph can be very large, we will not ask you to output the\n    entire graph. Instead, by doing the below, you can convince us\n    that you indeed have the required graph.\n      \n        On the first line, output a single integer $V$, the number of vertices in the\n        graph $G$.\n      \n      \n        For each of the next $V$ lines, output two integers. In\n        particular, in the $i^\\text\n        {th}$ of these lines, output:\n        \n          \n            $d_ i$, the\n            outdegree of vertex $i$, and\n          \n          \n            $h_ i$, the\n            hash of the adjacency list of vertex $i$, defined as follows.\n            Suppose the vertices in the out-neighborhood of vertex\n            $i$ are\n            $n_1 < n_2 < \\dots\n            < n_{d_ i}$. Then\\begin{equation*} h_ i = 7^0\\cdot n_1\n            + 7^1\\cdot n_2 + 7^2\\cdot n_3 + \\dots + 7^{d_ i-1}\\cdot\n            n_{d_ i} \\end{equation*}\n            Since $h_ i$\n            can be quite large, you should output only the\n            remainder after dividing this number by $10^9+7$."
        },
        "table": {
            "input": [
                "3 2 8\n0 1\n0 2\n2 1 2\n1\n2 3 0\n4 0 2\n3 0\n2 0 3\n6\n5\n"
            ],
            "output": [
                "4\n3 162\n3 161\n2 21\n2 15\n"
            ]
        },
        "sidebar": {
            "problemID": "abinitio",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "7.2"
        },
        "content": {
            "author": "Steven Halim",
            "source": "NUS Competitive Programming",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3 2 8\n0 1\n0 2\n2 1 2\n1\n2 3 0\n4 0 2\n3 0\n2 0 3\n6\n5\n"
            ],
            "output": [
                "4\n3 162\n3 161\n2 21\n2 15\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Above Average",
        "body": {
            "question": "The first line of standard input contains an integer\n    $1 \\le C \\le 50$, the\n    number of test cases. $C$\n    data sets follow. Each data set begins with an integer,\n    $N$, the number of people\n    in the class ($1 \\le N \\le\n    1000$). $N$\n    integers follow, separated by spaces or newlines, each giving\n    the final grade (an integer between $0$ and $100$) of a student in the class.",
            "input": "The first line of standard input contains an integer\n    $1 \\le C \\le 50$, the\n    number of test cases. $C$\n    data sets follow. Each data set begins with an integer,\n    $N$, the number of people\n    in the class ($1 \\le N \\le\n    1000$). $N$\n    integers follow, separated by spaces or newlines, each giving\n    the final grade (an integer between $0$ and $100$) of a student in the class.",
            "output": "For each case you are to output a line giving the percentage\n    of students whose grade is above average, rounded to exactly\n    $3$ decimal places."
        },
        "table": {
            "input": [
                "5\n5 50 50 70 80 100\n7 100 95 90 80 70 60 50\n3 70 90 80\n3 70 90 81\n9 100 99 98 97 96 95 94 93 91\n"
            ],
            "output": [
                "40.000%\n57.143%\n33.333%\n66.667%\n55.556%\n"
            ]
        },
        "sidebar": {
            "problemID": "aboveaverage",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.9"
        },
        "content": {
            "author": "Waterloo Programming Contest 2002-09-28",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "5\n5 50 50 70 80 100\n7 100 95 90 80 70 60 50\n3 70 90 80\n3 70 90 81\n9 100 99 98 97 96 95 94 93 91\n"
            ],
            "output": [
                "40.000%\n57.143%\n33.333%\n66.667%\n55.556%\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A+B Problem",
        "body": {
            "question": "Given $N$ integers in\n    the range $[-50\\, 000, 50\\,\n    000]$, how many ways are there to pick three integers\n    $a_ i$, $a_ j$, $a_ k$, such that $i$, $j$, $k$ are pairwise distinct and\n    $a_ i + a_ j = a_ k$? Two\n    ways are different if their ordered triples $(i, j, k)$ of indices are\n    different.",
            "input": "The first line of input consists of a single integer\n    $N$ ($1 \\leq N \\leq 200\\, 000$). The next\n    line consists of $N$\n    space-separated integers $a_1,\n    a_2, \\dots , a_ N$.",
            "output": "Output an integer representing the number of ways."
        },
        "table": {
            "input": [
                "4\n1 2 3 4\n",
                "6\n1 1 3 3 4 6\n"
            ],
            "output": [
                "4\n",
                "10\n"
            ]
        },
        "sidebar": {
            "problemID": "aplusb",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.3"
        },
        "content": {
            "author": "Tung Kam Chuen",
            "source": "Hong Kong Regional Online Preliminary 2016",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n1 2 3 4\n",
                "6\n1 1 3 3 4 6\n"
            ],
            "output": [
                "4\n",
                "10\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Brief Gerrymander",
        "body": {
            "question": "The evil ruling party, the Liberatives, are redistributing\n    the electoral regions (ridings) in your city, and are\n    nefariously attempting to pack certain opposition-friendly\n    neighborhoods into as few ridings as possible. If this plan\n    succeeds, it will be the end of democracy as we know it! As a\n    card-carrying member of the noble, compassionate Conservals\n    (the main opposition party), you must foil their devious plot\n    and safeguard the future of our country.Under the new plan, the city will be divided up into a grid\n    of rectangles by selecting certain major streets and avenues as\n    boundaries. All streets and avenues stretch straight across the\n    city, and are numbered starting from the southwest corner of\n    the city. The city is bounded by four roads: $1$st Street (west edge), $100$th Street (east edge),\n    $1$st Avenue (south edge),\n    $100$th Avenue (north\n    edge). Clearly these four roads must represent district\n    boundaries; however, only a subset of the streets and avenues\n    in between will divide districts. The Liberatives have already\n    been able to fix the North-South (street) boundaries; however,\n    they have been forced to allow the Conservals to select the\n    East-West (avenue) boundaries.You know the location of all the opposition-friendly\n    neighborhoods, which vote strongly Conserval. A neighborhood is\n    exactly one block between adjacent streets and avenues. For\n    instance, one neighborhood might lie between $47$th and $48$th Street and $67$th and $68$th Avenue.Place the avenue boundaries so that as many ridings as\n    possible contain at least one opposition-friendly\n    neighborhood.",
            "input": "Input consists of multiple cases (at most $100$), each describing a city. The\n    first line will give $0 \\le N \\le\n    99 \\cdot 99$, the number of Conserval neighborhoods in\n    the city; the following $N$ lines will contain the street and\n    avenue number of the southwest corner of each neighborhood. The\n    next line will contain $2 \\le S\n    \\le 100$, the number of street boundaries, and the\n    $S$ street numbers that\n    they lie on (including the forced ones along the west and east\n    borders), in increasing order. The final line will consist of\n    $2 \\le A \\le 100$, the\n    number of avenue boundaries you must place (including the\n    forced ones along the south and norther borders).Input will be terminated by a line containing $-1$.",
            "output": "For each case, output a single line giving $A$ followed by $A$ distinct avenue numbers for the\n    optimal redistriubution, in increasing order. If there are\n    multiple such solutions, any one will do."
        },
        "table": {
            "input": [
                "2\n49 49\n50 50\n2 1 100\n3\n-1\n"
            ],
            "output": [
                "3 1 50 100\n"
            ]
        },
        "sidebar": {
            "problemID": "gerrymander",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "8.4"
        },
        "content": {
            "author": "Derek Kisman",
            "source": "Waterloo Programming Contest 2003-09-27"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n49 49\n50 50\n2 1 100\n3\n-1\n"
            ],
            "output": [
                "3 1 50 100\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Abstract Art",
        "body": {
            "question": "Arty has been an abstract artist since childhood, and his\n    works have taken on many forms. His latest (and most pricey)\n    creations are lovingly referred to as Abstract Art within the\n    abstract art community (they’re not the most original bunch\n    when it comes to loving nicknames). Here’s an example of one of\n    Arty’s recent works:Figure 1: An example of Arty’s art.\n        \n      \n    As you can see, Abstract Art is created by painting\n    (possibly overlapping) polygons. When Arty paints one of his\n    designs he always paints each polygon completely before moving\n    on to the next one.The price of individual pieces of Arty’s Abstract Art varies\n    greatly based on their aesthetic appeal, but collectors demand\n    two pieces of information about each painting:\n      \n        the total amount of paint used, and\n      \n\n      \n        the total amount of canvas covered.\n      \n    Note that the first value will be larger than the second\n    whenever there is overlap between two or more polygons. Both of\n    these values can be calculated from a list containing the\n    vertices of all the polygons used in the painting, but Arty\n    can’t waste his time on such plebeian pursuits — he has great\n    art to produce! I guess it’s left up to you.",
            "input": "The first line of input contains a single integer\n    $n$ ($1 \\leq n \\leq 100$) representing the\n    number of polygons to be painted. Following this are\n    $n$ lines each describing\n    a painted polygon. Each polygon description starts with an\n    integer $m$ ($3 \\leq m \\leq 20$) indicating the\n    number of sides in the polygon, followed by $m$ pairs of integers $x$ $y$ ($0\n    \\leq x, y \\leq 1\\, 000)$ specifying the coordinates of\n    the vertices of the polygon in consecutive order. Polygons may\n    be concave but no polygon will cross itself. No point on the\n    canvas will be touched by more than two polygon border\n    segments.",
            "output": "Display both the total amount of paint used and the amount\n    of canvas covered. Your answers must have a relative or\n    absolute error of at most $10^{-6}$."
        },
        "table": {
            "input": [
                "3\n8 7 10 7 17 10 20 17 20 20 17 20 10 17 7 10 7\n4 0 0 0 8 8 8 8 0\n4 3 3 3 13 13 13 13 3\n"
            ],
            "output": [
                "315.00000000 258.50000000\n"
            ]
        },
        "sidebar": {
            "problemID": "abstractart",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.2"
        },
        "content": {
            "author": "John Bonomo",
            "source": "2017 ICPC East-Central NA Regional Contest",
            "license": "https://licensebuttons.net/p/zero/1.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3\n8 7 10 7 17 10 20 17 20 20 17 20 10 17 7 10 7\n4 0 0 0 8 8 8 8 0\n4 3 3 3 13 13 13 13 3\n"
            ],
            "output": [
                "315.00000000 258.50000000\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Absurdistan Roads II",
        "body": {
            "question": "The people of Absurdistan discovered how to build roads only\n    last year. After the discovery, each city decided to build its\n    own road, connecting the city with some other city. Each newly\n    built road can be used in both directions.Absurdistan is full of absurd coincidences. It took all\n    $N$ cities precisely one\n    year to build their roads. And even more surprisingly, when the\n    roads were finished it was possible to travel from every city\n    to any other city using the newly built roads. We say that such\n    a road network is connected. Being interested in\n    mathematics and probability, you started wondering how unlikely\n    this coincidence really is.",
            "input": "Each city picked uniformly at random another city to which\n    they built a road. Calculate the probability that the road\n    network ends up being connected.",
            "output": "The first line contains an integer $N$ $(2\\le N\\le 140)$ – the number of\n    cities.OutputOutput one line containing a floating point number denoting\n    the probability that the randomly built road network with\n    $N$ cities and\n    $N$ roads is connected.\n    Your answer should have an absolute error of at most\n    $10^{-8}$."
        },
        "table": {
            "input": [
                "4\n",
                "2\n"
            ],
            "output": [
                "0.962962962963\n",
                "1.000000000000\n"
            ]
        },
        "sidebar": {
            "problemID": "absurdistan2",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.7"
        },
        "content": {
            "author": "Lukáš Poláček",
            "source": "KTH Challenge 2014",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n",
                "2\n"
            ],
            "output": [
                "0.962962962963\n",
                "1.000000000000\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Absurdistan Roads III",
        "body": {
            "question": "The people of Absurdistan discovered how to build roads only\n    last year. After the discovery, each city decided to build its\n    own road, connecting the city to some other city. Each newly\n    built road can be used in both directions.You bought a tourist guide which has a map of the country\n    with the newly built roads. However, since you are very\n    interested in history, you would like to know which city built\n    which road.Given the description of $n$ roads, can you find an assignment\n    of roads to $n$ cities,\n    such that each city built one road? If there are multiple\n    assignments, you are happy with any one. At least one solution\n    is guaranteed to exist.",
            "input": "The first line contains an integer $n$ $(2\\le n\\le 100\\, 000)$ – the number\n    of cities and roads. Then follow $n$ lines with $2$ numbers each. A line containing\n    “$a$ $b$” indicates that there is a road\n    between cities $a$ and\n    $b$, $1 \\le a, b\\le n, a \\not= b$. There\n    can be multiple roads between the same pair of cities.",
            "output": "Print $n$ lines with\n    two integers “$a$\n    $b$” denoting that a road\n    between $a$ and\n    $b$ was built by city\n    $a$. Each road from the\n    input must appear exactly once in the output. If there are\n    multiple solutions, you can print any one and you can print the\n    roads in any order."
        },
        "table": {
            "input": [
                "4\n1 2\n2 3\n3 1\n4 1\n",
                "2\n1 2\n1 2\n"
            ],
            "output": [
                "4 1\n2 1\n3 2\n1 3\n",
                "2 1\n1 2\n"
            ]
        },
        "sidebar": {
            "problemID": "absurdistan3",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.5"
        },
        "content": {
            "author": "Lukáš Poláček",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n1 2\n2 3\n3 1\n4 1\n",
                "2\n1 2\n1 2\n"
            ],
            "output": [
                "4 1\n2 1\n3 2\n1 3\n",
                "2 1\n1 2\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Access Points",
        "body": {
            "question": "A well-known programming contest is considering a new way to\n    position its teams. For the contest all $n$ teams have to be assigned some\n    position $(x,y)$ in an\n    infinitely-large gym hall. To keep a good overview of the teams\n    the following strategy is chosen:All teams have been assigned a unique integer ID in the\n    range $[1,n]$. Any two\n    teams with IDs $i$ and\n    $j$, where $i<j$, must be placed at positions\n    $(x_ i,y_ i)$,\n    $(x_ j,y_ j)$, such that\n    $x_ i \\le x_ j$ and\n    $y_ i \\le y_ j$.Unfortunately, someone already assigned the (fixed) internet\n    access point for each team. The access points are quite big and\n    only have one port, so access points for different teams are\n    located at different positions. Every team must be connected to\n    its designated access point by a direct UTP cable. The cost of\n    a UTP cable of length $\\ell\n    $ is $\\ell ^2$.Find a placement for all teams, such that their respective\n    order along both axes is maintained and the total cost of the\n    required UTP cables is minimised. As the judges are not too\n    worried about privacy, they are fine with two (or more) teams\n    being placed at the exact same location or being arbitrarily\n    close together. See Figure 1 for an example.\n      \n        \n        \n          Figure 1: Illustration of an optimal placement for\n          Sample Input 1. Team placement (boxes), access points\n          (circles), and required UTP cables (dashed).",
            "input": "The input consists of:\n      \n        One line with one integer $n$ ($1 \\le n \\le 10^5$), the number of\n        teams.\n      \n      \n        $n$ lines, the\n        $i$th of which\n        contains two integers $s_\n        i$, $t_ i$\n        ($1 \\le s_ i,t_ i \\le\n        10^6$), the location of the internet access point of\n        team $i$.\n      \n    No two access points are at the same position.",
            "output": "Output the minimum total cost of all UTP cables required to\n    connect the teams to their access points in an optimal legal\n    layout.Your answer should have an absolute or relative error of at\n    most $10^{-6}$."
        },
        "table": {
            "input": [
                "6\n4 1\n2 4\n3 2\n8 3\n5 6\n2 5\n",
                "6\n11 6\n23 7\n24 11\n24 32\n27 38\n42 42\n"
            ],
            "output": [
                "22.5\n",
                "0\n"
            ]
        },
        "sidebar": {
            "problemID": "accesspoints",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.8"
        },
        "content": {
            "author": "Arthur van Goethem",
            "source": "Northwestern Europe Regional Contest (NWERC) 2018",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "6\n4 1\n2 4\n3 2\n8 3\n5 6\n2 5\n",
                "6\n11 6\n23 7\n24 11\n24 32\n27 38\n42 42\n"
            ],
            "output": [
                "22.5\n",
                "0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Classy Problem",
        "body": {
            "question": "In his memoir “So, Anyway”, comedian John Cleese writes of\n    the class difference between his father (who was\n    “middle-middle-middle-lower-middle class” and his mother (who\n    was “upper-upper-lower-middle class”). These fine distinctions\n    between classes tend to confuse North American readers, so you\n    are to write a program to sort a group of people by their\n    classes to show their true place in the social class\n    hierarchy.For this problem, there are three main classes: upper,\n    middle, and lower. Obviously, the highest is upper and the\n    lowest is lower. But there can be distinctions within a class,\n    so upper-upper is a higher class than middle-upper, which is\n    higher than lower-upper. However, all of the upper classes\n    (upper-upper, middle-upper, and lower-upper) are higher than\n    any of the middle classes.Within a class like middle-upper, there can be further\n    distinctions as well, leading to classes like\n    lower-middle-upper-middle-upper. When comparing classes, once\n    you have reached the lowest level of detail, you should assume\n    that all further classes are the same as the middle level of\n    the previous level of detail. So upper class and middle-upper\n    class are equivalent, as are middle-middle-lower-middle and\n    lower-middle.",
            "input": "The first line of input contains a single positive integer\n    $T$ $(T \\leq 500)$ indicating the number\n    of cases to follow. Each case starts with a positive integer\n    $n$ $(n \\leq 100)$ on a line indicating\n    the number of people to consider. Each of the next $n$ lines contains the name of a\n    person followed by a colon and a space, followed by the class\n    of the person. The name contains up to 30 lowercase characters.\n    The class is a string consisting of a nonempty sequence of up\n    to 10 of the words upper, middle,\n    lower separated by hyphens (-), followed by a\n    space, followed by the word class. No two people will\n    have the same name in a single case.",
            "output": "For each test case, print the list of names from highest to\n    lowest class. If two people have the same or equivalent\n    classes, they should be listed in alphabetical order by name.\n    Output a line of 30 equal signs (=) after each\n    case."
        },
        "table": {
            "input": [
                "1\n5\nmom: upper-upper-lower-middle class\ndad: middle-middle-middle-lower-middle class\nqueenelizabeth: upper-upper-upper class\nchair: lower-lower class\nunclebob: middle-middle-lower-middle class\n"
            ],
            "output": [
                "queenelizabeth\nmom\ndad\nunclebob\nchair\n==============================\n"
            ]
        },
        "sidebar": {
            "problemID": "classy",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.5"
        },
        "content": {
            "author": "Rocky Mountain Regional Contest (RMRC) 2015",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "1\n5\nmom: upper-upper-lower-middle class\ndad: middle-middle-middle-lower-middle class\nqueenelizabeth: upper-upper-upper class\nchair: lower-lower class\nunclebob: middle-middle-lower-middle class\n"
            ],
            "output": [
                "queenelizabeth\nmom\ndad\nunclebob\nchair\n==============================\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "ACM Contest Scoring",
        "body": {
            "question": "Our new contest submission system keeps a chronological log\n    of all submissions made by each team during the contest. With\n    each entry, it records the number of minutes into the\n    competition at which the submission was received, the letter\n    that identifies the relevant contest problem, and the result of\n    testing the submission (designated for the sake of this problem\n    simply as right or wrong). As an example, the following is a\n    hypothetical log for a particular team:3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\nThe rank of a team relative to others is determined by a\n    primary and secondary scoring measure calculated from the\n    submission data. The primary measure is the number of problems\n    that were solved. The secondary measure is based on a\n    combination of time and penalties. Specifically, a team’s time\n    score is equal to the sum of those submission times that\n    resulted in right answers, plus a 20-minute\n    penalty for each wrong submission of a problem that is\n    ultimately solved. If no problems are solved, the time measure\n    is $0$.In the above example, we see that this team successfully\n    completed three problems: E on their first\n    attempt ($3$ minutes\n    into the contest); A on their third attempt\n    at that problem ($200$ minutes into the contest);\n    and D on their first attempt at that\n    problem ($300$ minutes into the contest).\n    This team’s time score (including penalties) is $543$. This is computed to include\n    $3$ minutes for\n    solving E, $200$ minutes for solving\n    A with an additional $40$ penalty minutes for two\n    earlier mistakes on that problem, and finally $300$ minutes for solving\n    D. Note that the team also attempted\n    problems B and C, but\n    were never successful in solving those problems, and thus\n    received no penalties for those attempts.According to contest rules, after a team solves a particular\n    problem, any further submissions of the same problem are\n    ignored (and thus omitted from the log). Because times are\n    discretized to whole minutes, there may be more than one\n    submission showing the same number of minutes. In particular\n    there could be more than one submission of the same problem in\n    the same minute, but they are chronological, so only the last\n    entry could possibly be correct. As a second example, consider\n    the following submission log:7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\nThis team solved 4 problems, and their total time score\n    (including penalties) is $502$, with $7$ minutes for H, $35+20$ for\n    E, $80+40$ for B, and\n    $300+20$ for C.",
            "input": "The input contains $n$\n    lines for $0 \\leq n \\leq\n    100$, with each line describing a particular log entry.\n    A log entry has three parts: an integer $m$, with $1 \\leq m \\leq 300$, designating the\n    number of minutes at which a submission was received, an\n    uppercase letter designating the problem, and either the word\n    right or wrong. The\n    integers will be in nondecreasing order and may contain\n    repeats. After all the log entries is a line containing just\n    the number $-1$.",
            "output": "Output two integers on a single line: the number of problems\n    solved and the total time measure (including penalties)."
        },
        "table": {
            "input": [
                "3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n",
                "7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n-1\n"
            ],
            "output": [
                "3 543\n",
                "4 502\n"
            ]
        },
        "sidebar": {
            "problemID": "acm",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.6"
        },
        "content": {
            "author": "Andrew Harrington",
            "source": "2015 ICPC Mid-Central Regional",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n",
                "7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n-1\n"
            ],
            "output": [
                "3 543\n",
                "4 502\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Adding Words",
        "body": {
            "question": "Psychologists at Wassamatta University believe that humans\n    are able to more easily deal with words than with numbers. So\n    they have devised experiments to find out if this is true. In\n    an interesting twist, one of their experiments deals with using\n    words which represent numbers. Rather than adding numbers, they\n    want to add words. You are a research programmer on the\n    project, and your job is to write a program that demonstrates\n    this ability.",
            "input": "Input is a sequence of up to $2000$ commands, one per line, ending\n    at end of file. Each command is a definition, a calculation, or\n    a clear. All tokens within a command are separated by single\n    spaces.A definition has the format def x y\n    where x is a variable name and y is a an integer in the range $[-1\\, 000, 1\\, 000]$. No two\n    variables are ever defined to have the same numeric value at\n    the same time. If x had been defined\n    previously, defining it again erases its old definition.\n    Variable names are up to $30$ lowercase characters, each\n    character from the range a to z.A calculation command starts with the word calc, and is followed by one to $15$ more variable names separated by\n    addition or subtraction operators. The end of a calc command is an equals sign. For example:\n      calc foo + bar - car =\n    The clear command instructs your program\n    to forget all of its definitions.",
            "output": "Your program should produce no output for definitions, but\n    for calculations it should produce the value of the\n    calculation. If there is not a word for the result, or some\n    word in the calculation has not been defined, then the result\n    of the calculation should be unknown. The\n    word unknown is never used as a variable in\n    the input."
        },
        "table": {
            "input": [
                "def foo 3\ncalc foo + bar =\ndef bar 7\ndef programming 10\ncalc foo + bar =\ndef is 4\ndef fun 8\ncalc programming - is + fun =\ndef fun 1\ncalc programming - is + fun =\nclear\n"
            ],
            "output": [
                "foo + bar = unknown\nfoo + bar = programming\nprogramming - is + fun = unknown\nprogramming - is + fun = bar\n"
            ]
        },
        "sidebar": {
            "problemID": "addingwords",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.0"
        },
        "content": {
            "author": "Greg Hamerly",
            "source": "Baylor Competitive Learning course",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "def foo 3\ncalc foo + bar =\ndef bar 7\ndef programming 10\ncalc foo + bar =\ndef is 4\ndef fun 8\ncalc programming - is + fun =\ndef fun 1\ncalc programming - is + fun =\nclear\n"
            ],
            "output": [
                "foo + bar = unknown\nfoo + bar = programming\nprogramming - is + fun = unknown\nprogramming - is + fun = bar\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Different List Game",
        "body": {
            "question": "You are playing the following simple game with a friend:The first player picks a positive integer $X$.\n      \n\n      \n        The second player gives a list of $k$ distinct positive\n        integers $Y_1, \\ldots , Y_\n        k$ such that $(Y_1+1)(Y_2+1) \\cdots (Y_ k+1) =\n        X$, and gets $k$ points.\n      \n    Write a program that plays the second player.",
            "input": "The input consists of a single integer $X$ satisfying $10^3 \\le X \\le 10^{15}$, giving the\n    number picked by the first player.",
            "output": "Write a single integer $k$, giving the number of points\n    obtained by the second player, assuming she plays as good as\n    possible."
        },
        "table": {
            "input": [
                "1099511627776\n",
                "127381\n"
            ],
            "output": [
                "8\n",
                "3\n"
            ]
        },
        "sidebar": {
            "problemID": "listgame2",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "9.1"
        },
        "content": {
            "author": "Per Austrin",
            "source": "Spotify Challenge 2010",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1099511627776\n",
                "127381\n"
            ],
            "output": [
                "8\n",
                "3\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Different Problem",
        "body": {
            "question": "Write a program that computes the difference between\n    non-negative integers.",
            "input": "Each line of the input consists of a pair of integers. Each\n    integer is between $0$ and\n    $10^{15}$ (inclusive). The\n    input is terminated by end of file.",
            "output": "For each pair of integers in the input, output one line,\n    containing the absolute value of their difference."
        },
        "table": {
            "input": [
                "10 12\n71293781758123 72784\n1 12345677654321\n"
            ],
            "output": [
                "2\n71293781685339\n12345677654320\n"
            ]
        },
        "sidebar": {
            "problemID": "different",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.1"
        },
        "content": {
            "author": "Kattis",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "10 12\n71293781758123 72784\n1 12345677654321\n"
            ],
            "output": [
                "2\n71293781685339\n12345677654320\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Adjoin the Networks",
        "body": {
            "question": "One day your boss explains to you that he has a bunch of\n    computer networks that are currently unreachable from each\n    other, and he asks you, the cable expert’s assistant, to adjoin\n    the networks to each other using new cables. Existing cables in\n    the network cannot be touched.He has asked you to use as few cables as possible, but the\n    length of the cables used does not matter to him, since the\n    cables are optical and the connectors are the expensive parts.\n    Your boss is rather picky on cable usage, so you know that the\n    already existing networks have as few cables as possible.Due to your humongous knowledge of computer networks, you\n    are of course aware that the latency for an information packet\n    travelling across the network is proportional to the number of\n    hops the packet needs, where a hop is a traversal\n    along a single cable. And since you believe a good solution to\n    your boss’ problem may earn you that long wanted promotion, you\n    decide to minimise the maximum number of hops needed between\n    any pair of network nodes.",
            "input": "On the first line, you are given two positive integers, the\n    number $1 \\leq c \\leq\n    10^5$ of computers and the number $0 \\leq \\ell \\leq c-1$ of existing\n    cables. Then follow $\\ell\n    $ lines, each line consisting of two\n    integers $a$\n    and $b$, the two\n    computers the cables connect. You may assume that every\n    computer has a unique name between $0$ and $n-1$.",
            "output": "The maximum number of hops in the resulting network."
        },
        "table": {
            "input": [
                "6 4\n0 1\n0 2\n3 4\n3 5\n",
                "11 9\n0 1\n0 3\n0 4\n1 2\n5 4\n6 4\n7 8\n7 9\n7 10\n"
            ],
            "output": [
                "3\n",
                "4\n"
            ]
        },
        "sidebar": {
            "problemID": "adjoin",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.6"
        },
        "content": {
            "author": "Markus S. DregiPål G. Drange",
            "source": "Nordic Collegiate Programming Contest (NCPC) 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "6 4\n0 1\n0 2\n3 4\n3 5\n",
                "11 9\n0 1\n0 3\n0 4\n1 2\n5 4\n6 4\n7 8\n7 9\n7 10\n"
            ],
            "output": [
                "3\n",
                "4\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Administrative Difficulties",
        "body": {
            "question": "At the end of the year, all spies need to be billed for the\n    usage of cars in the past year. Last week, there was a major\n    crash in the billing system, rendering it unusable. All that\n    could be recovered was a list of all available types of cars\n    and a log of events for the past year. Using this information,\n    the spy-car rental company wants to obtain a list of the costs\n    for car usage for every spy on record. This list can then be\n    used to send out the bills manually.Every type of car is registered with a catalog price, the\n    cost to pick up the car and the cost of driving that car per\n    kilometer. The event list contains three types of events:\n    pick-ups, returns and accidents. When a spy picks up a car, he\n    or she must pay the pick-up cost for that car. Once the car is\n    returned, the number of kilometers driven in the car is\n    recorded and the spy must pay for these kilometers. If an\n    accident occurred when the spy was using the car, repairs need\n    to be paid for. Every accident is rated with a severity as a\n    percentage. To repair the car, this percentage of the catalog\n    price is billed to the spy who caused the accident. If any\n    billed cost is fractional, it is rounded up to the next integer\n    before being added to the bill.The list of all available types of cars is complete.\n    However, because of the crash, some events in the recovered\n    event log might be missing. The spy-car rental company does not\n    want to present spies with an inconsistent bill, so you should\n    detect inconsistencies in the log entries for each spy. The\n    following conditions hold for a consistent event log:\n      \n        A spy will pick up a car before returning it.\n      \n\n      \n        A spy will always return a car they picked up.\n      \n\n      \n        A spy can use at most one car at a time.\n      \n\n      \n        Accidents can only happen when a spy is using a car.",
            "input": "On the first line one positive number: the number of test\n    cases, at most 100. After that per test case:\n      \n        one line with two space-separated integers $n$ and $m$ ($0 \\leq n \\leq 500$ and\n        $0 \\leq m \\leq 10\\,\n        000$): the number of types of cars, and the number\n        of events, respectively.\n      \n\n      \n        $n$ lines with a\n        string $N$ and three\n        integers $p$,\n        $q$ and $k$ ($1 \\leq p \\leq 100\\, 000, 1 \\leq q \\leq\n        1\\, 000, 1 \\leq k \\leq 100$), all separated by a\n        space: for each type of car, its unique name, its catalog\n        price, its pick-up cost, and its cost per kilometer driven,\n        respectively.\n      \n\n      \n        $m$ lines starting\n        with one integer $t$\n        ($0 \\leq t \\leq 100\\,\n        000$), a string $S$ and one character $e$, all separated by a space: the\n        time of the event, the name of the involved spy, and the\n        type of event, followed by:\n\n        \n          \n            if $e$ =\n            ‘p’ (pick-up): a string $C$: the name of the type of\n            car picked up.\n          \n\n          \n            if $e$ =\n            ‘r’ (return): an integer $d$ ($0 \\leq d \\leq 1\\, 000$): the\n            distance covered in the car last picked up by spy\n            $S$, in\n            kilometers.\n          \n\n          \n            if $e$ =\n            ‘a’ (accident): an integer $s$ ($0 \\leq s \\leq 100$): the\n            severity of the accident, in percents.\n          \n        \n      \n    All names of cars and spies consist of at least $1$ and at most $40$ lowercase letters. There will be\n    at most 500 unique spy names in each test case. The events are\n    given in chronological order.",
            "output": "Per test case:\n      \n        one line for every spy referenced in any of the events,\n        containing a string and one integer, separated by a space:\n        the name of the spy and his total car cost. If the event\n        log for the spy is inconsistent, the total cost should be\n        replaced by the string “INCONSISTENT”. The lines\n        should be sorted alphabetically by the name of the spy."
        },
        "table": {
            "input": [
                "1\n2 8\nbmw 5000 150 10\njaguar 7000 200 25\n10 mallory p bmw\n15 jb p jaguar\n20 jb r 500\n35 badluckbrian a 100\n50 mallory a 10\n55 silva p jaguar\n60 mallory r 100\n110 silva a 30\n"
            ],
            "output": [
                "badluckbrian INCONSISTENT\njb 12700\nmallory 1650\nsilva INCONSISTENT\n"
            ]
        },
        "sidebar": {
            "problemID": "administrativeproblems",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.5"
        },
        "content": {
            "author": "Benelux Algorithm Programming Contest (BAPC) 2013",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "1\n2 8\nbmw 5000 150 10\njaguar 7000 200 25\n10 mallory p bmw\n15 jb p jaguar\n20 jb r 500\n35 badluckbrian a 100\n50 mallory a 10\n55 silva p jaguar\n60 mallory r 100\n110 silva a 30\n"
            ],
            "output": [
                "badluckbrian INCONSISTENT\njb 12700\nmallory 1650\nsilva INCONSISTENT\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Advanced Causal Measurements",
        "body": {
            "question": "Causality is a very important concept in theoretical\n    physics. The basic elements in a discussion of causality are\n    events. An event $e$ is described by its time of\n    occurrence $t$, and its\n    location, $x$, and we\n    write $e = (t,x)$. For our\n    concerns, all events happen in the one dimensional geometric\n    space and thus locations are given by a single real number\n    $x$ as a coordinate on\n    $x$-axis. Usually,\n    theoretical physicists like to define the speed of light to be\n    $1$, so that time and\n    space have the same units (actual physical units frighten and\n    confuse theorists).One event ${e_{1}} =\n    ({t_{1}},{x_{1}})$ is a possible cause for a\n    second event ${e_{2}} =\n    ({t_{2}},{x_{2}})$ if a signal emitted at ${e_{1}}$ could arrive at ${e_{2}}$. Signals can’t travel faster\n    than the speed of light, so this condition can be stated\n    as:\\[ {e_{1}} \\text { is a\n    possible cause for } {e_{2}} \\textbf{ iff } {t_{2}} \\ge\n    {t_{1}}+|{x_{2}}-{x_{1}}| \\]Thus an event at $(-1,1)$ could cause events at\n    $(0,0), (1,2)$, and\n    $(1,3)$, for example, but\n    could not have caused events at $(1,4)$ or $(-2,1)$. Note that one event can\n    cause several others.Recently, scientists have observed several unusual events in\n    the geometrically one dimensional universe, and using current\n    theories, they know how many causes were responsible for these\n    observations, but they know nothing about the time and space\n    coordinates of the causes. You asked to write a program to\n    determine the latest time at which the earliest cause could\n    have occurred (i.e. the time such that at least one cause must\n    have occurred on or before this time). Somewhat surprisingly,\n    all the observed events have both space and time coordinates\n    expressed by integer numbers in the range $-1\\, 000\\, 000 \\le t, x \\le 1\\, 000\\,\n    000$.The figure above illustrates the first case from input: the\n    earliest single event as a possible cause of all four\n    events.",
            "input": "The first line of input is the number of cases which follow,\n    at most $5$. Each case\n    begins with a line containing the number $n$ of events and the number\n    $m$ of causes,\n    $1 \\le n, m \\le 100\\,\n    000$. Next follows $n$ lines containing the $t$ and $x$ coordinates for each event.",
            "output": "Output consists of a single line for each case in the format\n    as in the sample output, giving the latest time at which the\n    earliest cause could have occurred, this will be an integer as\n    our time units are not divisible."
        },
        "table": {
            "input": [
                "4\n4 1\n1 -1\n1 3\n1 4\n2 6\n4 2\n1 -1\n1 3\n1 4\n2 6\n4 3\n1 -1\n1 3\n1 4\n2 6\n4 4\n1 -1\n1 3\n1 4\n2 6\n"
            ],
            "output": [
                "Case 1: -2\nCase 2: 0\nCase 3: 0\nCase 4: 1\n"
            ]
        },
        "sidebar": {
            "problemID": "causal",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.9"
        },
        "content": {
            "author": "Daniel Robbins",
            "source": "Waterloo Programming Contest 2004-01-31"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n4 1\n1 -1\n1 3\n1 4\n2 6\n4 2\n1 -1\n1 3\n1 4\n2 6\n4 3\n1 -1\n1 3\n1 4\n2 6\n4 4\n1 -1\n1 3\n1 4\n2 6\n"
            ],
            "output": [
                "Case 1: -2\nCase 2: 0\nCase 3: 0\nCase 4: 1\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Adventure Begins",
        "body": {
            "question": "The game Pokenom Go has just been released. Pokenom trainers\n    can now travel the world, capture Pokenom in the wild and\n    battle each other! Bash — the Pokenom trainer — has decided to\n    drop out of his university to pursue his childhood dream of\n    becoming the best Pokenom trainer!However, Linux — Bash’s university headmaster — does not\n    allow his students to drop out so easily …Linux puts $N$ black\n    boxes on a straight line. The black boxes are numbered from\n    $1$ to $N$ from left to right. Initially, all\n    black boxes are empty. Then Linux gives Bash $Q$ queries. Each query can be one of\n    the following $2$\n    types:\n      \n        Linux puts exactly one stone inside exactly one box\n        between $u$-th box and\n        $v$-th box, inclusive,\n        with equal probability. $(1\n        \\le u \\le v \\le N)$.\n      \n      \n        Let $a_ i$ be the\n        number of stones in black box numbered $i$. Let $A = \\sum _{i=1}^{N}{a_ i^2}$.\n        Bash has to calculate the expected value $E(A)$.\n      \n    Bash can only drop out of his university if he is able to\n    answer all queries correctly. But now all Bash can think of is\n    Pokenom. Please help him!",
            "input": "The first line of input contains exactly $2$ positive integers $N$ and $Q$. $(1\n    \\le N, Q \\le 10^5)$.$Q$ lines follow, each\n    line contains exactly one query. As explained, a query can be\n    one of the following $2$\n    types:\n      \n        $1 \\; u \\; v$:\n        Linux puts a stone inside one of the boxes between\n        $u$ and $v$.\n      \n      \n        $2$: Linux asks\n        Bash to compute $E(A)$.",
            "output": "It can be proved that the expected value can be represented\n    as an irreducible fraction $\\dfrac {A}{B}$. For each query of\n    type $2$, print one line\n    containing the value $A \\times\n    B^{-1}$ modulo $10^{9} +\n    7$. The given input guarantees that $B$ is not a multiple of $10^{9} + 7$.Explanation for examples\n      \n        In the first example: With a probability of $0.5$, two stones are in different\n        squares. Hence, the answer to the fourth query is\n        $0.5 \\times (1^{2} + 1^{2}) +\n        0.5 \\times 2^{2} = 3$.\n      \n      \n        In the second example: With a probability of\n        $\\frac{2}{3}$, two\n        stones are in different squares. Hence, the answer to the\n        fourth query is $\\frac{2}{3}\n        \\times 2 + \\frac{1}{3} \\times 4 = \\frac{8}{3}$."
        },
        "table": {
            "input": [
                "2 4\n1 1 2\n2\n1 1 2\n2\n",
                "3 4\n1 1 3\n2\n1 1 3\n2\n"
            ],
            "output": [
                "1\n3\n",
                "1\n666666674\n"
            ]
        },
        "sidebar": {
            "problemID": "adventurebegins",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.1"
        },
        "content": {
            "author": "The 2018 ICPC Vietnam National Programming Contest",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "2 4\n1 1 2\n2\n1 1 2\n2\n",
                "3 4\n1 1 3\n2\n1 1 3\n2\n"
            ],
            "output": [
                "1\n3\n",
                "1\n666666674\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Adventures in Moving -- Part IV",
        "body": {
            "question": "To help you move from Waterloo to the big city, you are\n    considering renting a moving truck. Gas prices being so high\n    these days, you want to know how much the gas for such a beast\n    will set you back.The truck consumes a full litre of gas for each kilometre it\n    travels. It has a 200 litre gas tank. When you rent the truck\n    in Waterloo, the tank is half full. When you return it in the\n    big city, the tank must be at least half full, or you’ll get\n    gouged even more for gas by the rental company. You would like\n    to spend as little as possible on gas, but you don’t want to\n    run out along the way.",
            "input": "Input is all integers. The first integer is the distance in\n    kilometres from Waterloo to the big city, at most $10\\, 000$. Next comes a set of up to\n    100 gas station specifications, describing all the gas stations\n    along your route, in non-decreasing order by distance. Each\n    specification consists of the distance in kilometres of the gas\n    station from Waterloo, and the price of a litre of gas at the\n    gas station, in tenths of a cent, at most $2\\, 000$.",
            "output": "Output is the minimum amount of money that you can spend on\n    gas to get you from Waterloo to the big city. If it is not\n    possible to get from Waterloo to the big city without running\n    out of gas along the way, output “Impossible”."
        },
        "table": {
            "input": [
                "500\n100 999\n150 888\n200 777\n300 999\n400 1009\n450 1019\n500 1399\n"
            ],
            "output": [
                "450550\n"
            ]
        },
        "sidebar": {
            "problemID": "adventuremoving4",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.2"
        },
        "content": {
            "author": "Ondřej LhotákGordon V. Cormack",
            "source": "Waterloo Programming Contest 2001-09-29",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "500\n100 999\n150 888\n200 777\n300 999\n400 1009\n450 1019\n500 1399\n"
            ],
            "output": [
                "450550\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Favourable Ending",
        "body": {
            "question": "Fiction books are all the same. The author has decided\n    everything in advance, from beginning, middle, to the final\n    plot. You, the reader, just read from page 1 to the very\n    last page, in that order. So predictable.A choose-your-own-story fiction book is different. The book\n    is divided into sections. Each section starts on a new page. At\n    the end of each section, you as the reader gets a choice of how\n    you want the story to continue. You get to choose among a set\n    of options such as “If you want to enter the dark dungeon, go\n    to page 37. If you want to drink the spoiled potion, go to page\n    221. If you want to befriend the three-eyed scorpion, go to\n    page 114.” In this case, there are three choices, and you\n    choose one of these by flipping over to that page. A new\n    section starts on that page, and you read that next. You\n    continue to do so until, eventually, you reach a section that\n    ends the story. A story can end in one of two ways: either\n    favourably or catastrophically.",
            "input": "The first line of the input contains an integer,\n    $T$, the number of test\n    cases ($1 \\leq T \\leq\n    100$). The first line of each test case contains an\n    integer $S$, the number of\n    sections ($1 \\leq S \\leq\n    100$).Each of the next $S$\n    lines contains either exactly four integers, or one integer\n    plus the word “favourably” or “catastrophically”. All integers\n    are between $1$ and\n    $400$. The first integer\n    on each of $S$ lines is\n    the page number on which that section begins. The next three\n    integers are the page numbers on which each of the three\n    sections start, among which we choose one. The three page\n    numbers are distinct, and there is always a section starting on\n    those three page numbers. Alternatively, the next word is\n    either “favourably” or “catastrophically”, which means the\n    story ends here, and in that way. It is guaranteed that some\n    section begins on page 1 and no two sections begin on the\n    same page number.All sections listed in the input can be reached starting at\n    page $1$.",
            "output": "For each of the $T$\n    test cases, output the number of distinct stories that end in a\n    favourable ending. The answer is guaranteed not to exceed a\n    signed $64$-bit\n    integer."
        },
        "table": {
            "input": [
                "2\n4\n1 3 11 13\n3 favourably\n11 catastrophically\n13 favourably\n10\n1 21 6 17\n3 favourably\n6 catastrophically\n8 favourably\n12 favourably\n15 6 33 12\n17 15 8 33\n21 3 29 15\n29 favourably\n33 catastrophically\n"
            ],
            "output": [
                "2\n5\n"
            ]
        },
        "sidebar": {
            "problemID": "favourable",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.6"
        },
        "content": {
            "author": "Peter Høyer",
            "source": "Calgary Collegiate Programming Contest 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n4\n1 3 11 13\n3 favourably\n11 catastrophically\n13 favourably\n10\n1 21 6 17\n3 favourably\n6 catastrophically\n8 favourably\n12 favourably\n15 6 33 12\n17 15 8 33\n21 3 29 15\n29 favourably\n33 catastrophically\n"
            ],
            "output": [
                "2\n5\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Feast For Cats",
        "body": {
            "question": "Your crazy aunt has asked you to watch her cats while she’s\n    attending a seminar about making cat hats out of cat fur. Your\n    aunt owns a great number of cats – all toms – and, due to the\n    complex social structure of cats, every cat has a specific but\n    different amount of hate reserved for every other cat.Over the years, the cats have been spoiled to the point that\n    they demand (at the least) 1 milliliter of milk at tea time.\n    Your task is to feed the cats the aforementioned milk, in order\n    to dull their primal instincts and prevent an all-out cat\n    war.The task is complicated by three things:\n      \n        Your aunt has a limited amount of milk stored in the\n        fridge.\n      \n\n      \n        For each pair of cats, there is a distance they have to\n        be kept from each other to avoid infighting.\n      \n\n      \n        The excessive amount of meowing has driven you to drink\n        large amounts of hard liquor, and now you can’t move\n        liquids without constant spilling. You will spill 1\n        milliliter of the milk you carry for every meter you\n        walk.\n      \n    Given an amount of milk, and a set of cats – each pair of\n    cats being a given distance apart from each other – determine\n    if it’s possible to feed every cat at least 1 milliliter of\n    milk. Every cat has a cat bowl that can hold an arbitrary\n    amount of milk. For every meter you walk, you will definitely\n    spill 1 milliliter of milk (instantly spoiling it), but instead\n    of carrying all the milk at once, you may serve a cat more milk\n    than needed and pick it up when backtracking (the cat will not\n    drink the excess milk before you’re finished walking). The cats\n    will never move, but they will eye each other with intense\n    hate.",
            "input": "The first line of the input consists of a single integer\n    $T$, the number of test\n    cases.\n    Each of the following $T$\n    cases begins with a line containing two positive integers\n    $M$ and $C$, separated by a space, denoting\n    the amount of milk in the fridge in milliliters and the number\n    of cats, respectively.\n    This is followed by $\\frac{C\n    \\cdot (C-1)}{2}$ (combinations of cats) lines containing\n    three positive integers $i$ $j$ $D_{i,j}$, separated by single spaces,\n    describing the distance between the cat with index $i$ and the cat with index\n    $j$ in meters. Cats are\n    numbered from $0$ up to\n    and including $C-1$, and\n    each pair of cats will be listed exactly once. You may assume\n    that the fridge is placed at the very same location as cat\n    $0$.\n      \n        $1 \\leq T \\leq\n        20$\n      \n\n      \n        $1 \\leq M \\leq 20\\,\n        000$\n      \n\n      \n        $1 \\leq C \\leq\n        2000$\n      \n\n      \n        $1 \\leq D_{i,j} \\leq\n        3000$\n      \n\n      \n        Cats co-exist in dimensions far greater than our three,\n        so you can assume that every pair of cats is correctly\n        separated by exactly the given distance.",
            "output": "Output yes if it’s possible to\n    serve every cat at least 1 milliliter of milk. Output\n    no if it’s not."
        },
        "table": {
            "input": [
                "1\n20 5\n0 1 4\n0 2 3\n0 3 10\n0 4 15\n1 2 7\n1 3 3\n1 4 5\n2 3 4\n2 4 3\n3 4 8\n"
            ],
            "output": [
                "yes\n"
            ]
        },
        "sidebar": {
            "problemID": "cats",
            "CPU": " 6 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.3"
        },
        "content": {
            "author": "Vegard Sjonfjell",
            "source": "IDI Open 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "1\n20 5\n0 1 4\n0 2 3\n0 3 10\n0 4 15\n1 2 7\n1 3 3\n1 4 5\n2 3 4\n2 4 3\n3 4 8\n"
            ],
            "output": [
                "yes\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Air Conditioned Minions",
        "body": {
            "question": "You are the boss of ACM (Air Conditioned Minions), an\n    upstanding company with a single goal of world domination.The company has $N$\n    minions. Each minion works evilly from early morning until\n    evening inside a super secret bunker in Helsinki. After much\n    deliberation, you decided to move your headquarters to\n    Singapore. However, unlike Helsinki, Singapore is very hot, so\n    the entire complex must be air conditioned. With strenuous\n    working hours (under minimum wage too), it is imperative that\n    all your minions work under optimal work condition. In\n    particular, all minions must like the temperatures of the rooms\n    they are in.You are planning to construct several rooms in your new\n    hideout, and assign your minions there. You fix the temperature\n    of each room to any value you want (different rooms may have\n    different temperatures). After you fix the temperatures, you\n    will assign each of your minions to these rooms (a room can\n    hold any number of minions). You want all minions to like the\n    temperatures of their assigned rooms. Each minion likes an\n    interval of temperature, and these preferences will be given to\n    you.Air conditioners are very expensive to maintain. Thus, you\n    want to construct as few rooms as possible. What is the minimum\n    number of rooms you need to set up such that it would be\n    possible to assign minions to rooms as discussed earlier?",
            "input": "The first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number\n    of minions in your company. The next $N$ lines each describe the\n    temperature preferences of all your minions. The $i$-th line consists of two single\n    space separated integers $L$ and $U$ ($1\n    \\le L \\le U \\le 2N$), which denotes that the\n    $i$-th minion likes any\n    temperature between $L$\n    and $U$, inclusively.",
            "output": "Print an integer denoting the minimum number of rooms you\n    need to construct.Sample Data ExplanationIn the first example, one of the possible solutions is to\n    setup two rooms — one with temperature $2$, and another with temperature\n    $5$. The first two minions\n    can be assigned to the first room, while the third minion can\n    be assigned to the second room."
        },
        "table": {
            "input": [
                "3\n1 2\n2 4\n5 6\n",
                "5\n1 2\n3 5\n4 6\n7 9\n8 10\n"
            ],
            "output": [
                "2\n",
                "3\n"
            ]
        },
        "sidebar": {
            "problemID": "airconditioned",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.2"
        },
        "content": {
            "author": "Irvan Jahja",
            "source": "2015 ACM ICPC Singapore Regional",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "3\n1 2\n2 4\n5 6\n",
                "5\n1 2\n3 5\n4 6\n7 9\n8 10\n"
            ],
            "output": [
                "2\n",
                "3\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Airline Hub",
        "body": {
            "question": "World Wide Flyer (WWF) has landing rights at several\n    airports throughout the world. They wish to place their central\n    hub at the airport that minimizes the maximum direct flying\n    distance from the hub to any other airport in the world.",
            "input": "Input file contains several sets of input. Each set consists\n    of a line containing $1 \\le n \\le\n    1000$, the number of airports. $n$ lines follow, each giving the\n    latitude (between $-90$\n    and $+90$ degrees) and\n    longitude (between $-180$\n    and $+180$ degrees) of an\n    airport. The input floating point numbers will not have more\n    than two digits after the decimal point. Input is terminated by\n    end of file.",
            "output": "For each set of input print the latitude and longitude of\n    the airport that best serves as a hub in a single line. If\n    there is more than one airport that best serves as a hub print\n    the one that appears last in the input of the corresponding\n    input set. Your output should always contain two digits after\n    the decimal point."
        },
        "table": {
            "input": [
                "3\n3.2 -15.0\n20.1 -175\n-30.2 10\n3\n3.2 -15.0\n20.1 -175\n-30.2 10\n"
            ],
            "output": [
                "3.20 -15.00\n3.20 -15.00\n"
            ]
        },
        "sidebar": {
            "problemID": "airlinehub",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.9"
        },
        "content": {
            "author": "Waterloo Programming Contest 2000-01-29",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3\n3.2 -15.0\n20.1 -175\n-30.2 10\n3\n3.2 -15.0\n20.1 -175\n-30.2 10\n"
            ],
            "output": [
                "3.20 -15.00\n3.20 -15.00\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Airport Coffee",
        "body": {
            "question": "As it happens, Jonna just landed at Copenhagen Airport,\n    trying to make her connection to Heathrow Airport. Since her\n    flight from Helsinki was delayed, she must walk very quickly\n    from her arrival gate to the new departure gate. Normally,\n    Jonna walks at a speed of $a$ centimeters per second. To make\n    matters more difficult, Jonna has a slight coffee addiction,\n    and will walk very sluggishly while not drinking coffee. While\n    the coffee itself does not really affect the walking speed, the\n    resulting grumpiness from not drinking coffee trumps even the\n    worries of a missed flight. When she is drinking coffee, her\n    speed increases to $b$\n    centimeters per second.The distance between Jonna’s arrival and departure gates is\n    $\\ell $ centimeters, and\n    along the way there are $n$ small coffee carts where Jonna can\n    buy a cup of coffee. When buying a cup of coffee (a practically\n    instant endeavour nowadays, thanks to contactless card\n    payments), she first waits for $t$ seconds, in order to let it cool\n    down. During this time, she will keep walking at the slower\n    pace. Immediately after $t$ seconds pass, she starts drinking\n    the coffee. It takes exactly $r$ seconds to finish the coffee\n    (during which she walks at the faster pace). When the coffee is\n    finished, she will again walk slower.Note that Jonna is carrying a bag with her left hand, so she\n    can only carry a single cup of coffee at a time. While a bit\n    wasteful, she may throw away a cup that still contains some\n    amount of coffee to purchase a brand new cup.Can you help Jonna determine where to purchase her\n    coffee(s), in order to get to her departure gate as quickly as\n    possible?",
            "input": "The first line of input contains five integers $\\ell $, $a$, $b$, $t$ and $r$, where:\n      \n        $1 \\le \\ell \\le\n        10^{11}$ is the distance between Jonna’s arrival and\n        departure gates in centimeters.\n      \n\n      \n        $1 \\le a < b \\le\n        200$ are Jonna’s walking speeds in centimeters per\n        second when she is not and when she is drinking coffee,\n        respectively.\n      \n\n      \n        $0 \\le t \\le 300$\n        is the number of seconds Jonna must wait until she can\n        drink her coffee.\n      \n\n      \n        $1 \\le r \\le 1200$\n        is the number of seconds it takes for Jonna to drink a cup\n        of coffee.\n      \n    Then follows a line containing an integer $0 \\le n \\le 500\\, 000$, the number of\n    coffee carts between the two gates. The third and last line of\n    input contains $n$\n    integers – the positions of the coffee carts, given in\n    ascending distance from the departure gate in centimeters\n    (i.e., each number is between $0$ and $\\ell $, inclusive). No two coffee\n    carts are in the same postion.",
            "output": "First, output a line containing the number of carts where\n    Jonna should purchase coffee. Next, output a single line\n    containing the indices of the coffee carts where Jonna should\n    buy coffee. These indicies should be between $0$ and $n - 1$, and correspond to the order\n    of the coffee carts in the input. The indices may be output in\n    any order, but each index must be output at most once.Your answer will be accepted if the time that the proposed\n    coffee purchasing plan takes is within an absolute or relative\n    error of at most $10^{-9}$\n    compared to the optimum time.\n      \n        \n\n        \n          Figure 1: Illustration of Sample Input 1 and a\n          possible solution. The coffee shops Jonna uses are marked\n          with triangles. The portions where she walks faster due\n          to the effects of coffee are marked with a dotted line.\n          The first coffee cools down $11\\, 000$ centimeters from the\n          starting position, and the second after $61\\, 000$ centimeters from the\n          starting position."
        },
        "table": {
            "input": [
                "100000 100 138 60 300\n5\n5000 20000 50000 55000 75000\n",
                "100000 78 86 9 560\n4\n13505 69705 87448 92090\n"
            ],
            "output": [
                "2\n0 3\n",
                "2\n0 1 \n"
            ]
        },
        "sidebar": {
            "problemID": "airportcoffee",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.5"
        },
        "content": {
            "author": "Johan Sannemo",
            "source": "Nordic Collegiate Programming Contest (NCPC) 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "100000 100 138 60 300\n5\n5000 20000 50000 55000 75000\n",
                "100000 78 86 9 560\n4\n13505 69705 87448 92090\n"
            ],
            "output": [
                "2\n0 3\n",
                "2\n0 1 \n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Airport Construction",
        "body": {
            "question": "The tropical island nation of Piconesia is famous for its\n    beautiful beaches, lush vegetation, cocoa and coffee\n    plantations, and wonderful weather all year round. This\n    paradise is being considered as a future location for the World\n    Finals of the ACM International Collegiate Programming Contest\n    (or at the very least a vacation spot for the executive\n    council). There is only one small problem: the island is really\n    hard to reach.Currently, the fastest way to reach the island takes three\n    days from the nearest airport, and uses a combination of\n    fishing boat, oil tanker, kayak, and submarine. To make\n    attending the ICPC World Finals slightly easier and to\n    jump-start the island’s tourism business, Piconesia is planning\n    to build its first airport.Since longer landing strips can accommodate larger\n    airplanes, Piconesia has decided to build the longest possible\n    landing strip on their island. Unfortunately, they have been\n    unable to determine where this landing strip should be located.\n    Maybe you can help?For this problem we model the boundary of Piconesia as a\n    polygon. Given this polygon, you need to compute the length of\n    the longest landing strip (i.e., straight line segment) that\n    can be built on the island. The landing strip must not\n    intersect the sea, but it may touch or run along the boundary\n    of the island. Figure 1 shows an example corresponding to\n    the first sample input.\n      \n        \n\n        \n          Figure 1: The island modeled as a polygon. The\n          longest possible landing strip is shown as a thick line.",
            "input": "The input starts with a line containing an integer\n    $n$ ($3 \\leq n \\leq 200$) specifying the\n    number of vertices of the polygon. This is followed by\n    $n$ lines, each containing\n    two integers $x$ and\n    $y$ ($|x|, |y| \\leq 10^6$) that give the\n    coordinates $(x, y)$ of\n    the vertices of the polygon in counter-clockwise order. The\n    polygon is simple, i.e., its vertices are distinct and no two\n    edges of the polygon intersect or touch, except that\n    consecutive edges touch at their common vertex. In addition, no\n    two consecutive edges are collinear.",
            "output": "Display the length of the longest straight line segment that\n    fits inside the polygon, with an absolute or relative error of\n    at most $10^{-6}$."
        },
        "table": {
            "input": [
                "7\n0 20\n40 0\n40 20\n70 50\n50 70\n30 50\n0 50\n",
                "3\n0 2017\n-2017 -2017\n2017 0\n"
            ],
            "output": [
                "76.157731059\n",
                "4510.149110617\n"
            ]
        },
        "sidebar": {
            "problemID": "airport",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "7.5"
        },
        "content": {
            "author": "International Collegiate Programming Contest (ACM-ICPC) World Finals 2017",
            "source": ""
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "7\n0 20\n40 0\n40 20\n70 50\n50 70\n30 50\n0 50\n",
                "3\n0 2017\n-2017 -2017\n2017 0\n"
            ],
            "output": [
                "76.157731059\n",
                "4510.149110617\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Airport Logistics",
        "body": {
            "question": "Many airports have moving conveyor belts in the corridors\n    between halls and terminals. Instead of walking on the floor,\n    passengers can choose to stand on a conveyor or, even better,\n    walk on a conveyor to get to the end of the corridor much\n    faster.The brand new Delft City Airport uses a similar system.\n    However, in line with the latest fashion in airport\n    architecture, there are no corridors: the entire airport is one\n    big hall with a bunch of conveyor lines laid out on the floor\n    arbitrarily.To get from a certain point $A$ to a certain point $B$, a passenger can use any\n    combination of walking on the floor and walking on conveyors.\n    Passengers can hop on or off a conveyor at any point along the\n    conveyor. It is also possible to cross a conveyor without\n    actually standing on it.Walking on the floor goes at a speed of $1$ meter/second.\n    Walking forward on a conveyor goes at a total speed of\n    $2$ meter/second.\n    Walking in reverse direction on a conveyor is useless and\n    illegal, but you may walk on the floor immediately next to the\n    conveyor. (Conveyors are infinitely thin.)How fast can you get from $A$ to $B$?",
            "input": "The first line contains four floating point numbers,\n    $X_ A$, $Y_ A$, $X_ B$, and $Y_ B$. They describe the coordinates\n    of your initial location $A = (X_\n    A,Y_ A)$ and your final location $B = (X_ B,Y_ B)$.The second line contains an integer $N$, the number of conveyors in the\n    hall ($0 \\leq N \\leq\n    100$). The following $N$ lines each contain four floating\n    point numbers, $X_1$,\n    $Y_1$, $X_2$, and $Y_2$, describing a conveyor which\n    starts at the point $(X_1,Y_1)$ and ends at the point\n    $(X_2,Y_2)$, running in a\n    straight line from start to end.All coordinates are floating point numbers in the range\n    ($0 \\leq X, Y \\leq\n    1000.0$), expressed in units of meters, given with at\n    most $6$ decimals after\n    the decimal point.Conveyors are at least $1$ meter long. Conveyors do not\n    intersect or touch. Your start and destination are not on any\n    conveyor.",
            "output": "Write one line with a floating point number, the minimum\n    time (in seconds) needed to get from $A$ to $B$ in seconds.Your answer may have an absolute error of at most\n    $10^{-4}$."
        },
        "table": {
            "input": [
                "60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n",
                "60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n",
                "0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n",
                "0.0 1.0 10.0 1.0\n2\n1.0 0.0 2.0 3.0\n6.0 1.0 4.0 1.0\n"
            ],
            "output": [
                "168.7916512460\n",
                "163.5274740179\n",
                "3.7320508076\n",
                "10.0000000000\n"
            ]
        },
        "sidebar": {
            "problemID": "airportlogistics",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "7.4"
        },
        "content": {
            "author": "Joris van Rantwijk",
            "source": "Benelux Algorithm Programming Contest (BAPC) 2016",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "4",
            "input": [
                "60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n",
                "60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n",
                "0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n",
                "0.0 1.0 10.0 1.0\n2\n1.0 0.0 2.0 3.0\n6.0 1.0 4.0 1.0\n"
            ],
            "output": [
                "168.7916512460\n",
                "163.5274740179\n",
                "3.7320508076\n",
                "10.0000000000\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Airports",
        "body": {
            "question": "An airline company offers flights out of $n$ airports. The flight time between\n    any given pair of airports is known, but may differ on\n    direction due to things like wind or geography. Upon landing at\n    a given airport, a plane must be inspected before it can be\n    flown again. This inspection time is dependent on the airport\n    at which the inspection is taking place.Given a set of $m$\n    flights that the airline company must realize, determine the\n    minimum number of planes that the company needs to purchase.\n    The airline may add unscheduled flights to move the airplanes\n    around if that would reduce the total number of planes\n    needed.",
            "input": "Each input will consist of a single test case. Note that\n    your program may be run multiple times on different inputs. The\n    first line of input contains two integers $n$ and $m$ ($2\n    \\le n, m \\le 500$). The next line contains $n$ space-separated nonnegative\n    integers less than or equal to $10^6$, where the $i^{\\text {th}}$ integer denotes the\n    amount of time (in minutes) that an inspection takes at airport\n    $i$.Each of the next $n$\n    lines contains $n$\n    space-separated nonnegative integers less than or equal to\n    $10^6$. On the\n    $i^{\\text {th}}$ line, The\n    $j^{\\text {th}}$ integer\n    indicates the amount of time it takes to fly from airport\n    $i$ to airport\n    $j$. It takes no time to\n    fly from an airport to itself. Note that the flight time from\n    airport $i$ to\n    $j$ is not necessarily the\n    same as the flight time from airport $j$ to $i$.The next $m$ lines\n    contain three space-separated integers, $s$, $f$, and $t$, ($1\n    \\le s, f \\le n$, $s \\ne\n    f$, $1 \\le t \\le\n    10^6)$ indicating that a flight must start at airport\n    $s$, end at airport\n    $f$, and fly out from\n    airport $s$ at exactly\n    time $t$ heading directly\n    to airport $f$.",
            "output": "Output a single positive integer indicating the minimum\n    number of planes the airline company must purchase in order to\n    realize the $m$ requested\n    flights."
        },
        "table": {
            "input": [
                "2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n",
                "2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n",
                "5 5\n72 54 71 94 23\n0 443 912 226 714\n18 0 776 347 810\n707 60 0 48 923\n933 373 881 0 329\n39 511 151 364 0\n4 2 174\n2 1 583\n4 3 151\n1 4 841\n4 3 993\n"
            ],
            "output": [
                "2\n",
                "1\n",
                "3\n"
            ]
        },
        "sidebar": {
            "problemID": "airports",
            "CPU": " 9 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.2"
        },
        "content": {
            "author": "2015 Southeast USA Regionals Division 1",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n",
                "2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n",
                "5 5\n72 54 71 94 23\n0 443 912 226 714\n18 0 776 347 810\n707 60 0 48 923\n933 373 881 0 329\n39 511 151 364 0\n4 2 174\n2 1 583\n4 3 151\n1 4 841\n4 3 993\n"
            ],
            "output": [
                "2\n",
                "1\n",
                "3\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Akcija",
        "body": {
            "question": "There is a promotional offer in a bookstore “Take 3, pay for\n    the 2 more expensive ones”. So, each customer who picks\n    $3$ books gets the\n    cheapest one for free. Of course, the customer can take even\n    more books and, depending on the way the books are arranged\n    into groups of three, get the cheapest one in each group for\n    free.For example, let the prices of the books taken by the\n    customer be: $2, 3, 4, 4, 6, 9,\n    10$. If he arranges them into the groups $(10, 3, 2)$, $(4, 6, 4)$ and $(9)$, he will get the book priced\n    $2$ from the first group\n    for free and the book priced $4$ from the second group. We can see\n    that he will not get anything for free from the third group\n    because it contains only one book.The lady working in the bookstore is well-intentioned and\n    she always wants to lower the price for each customer as much\n    as possible. For given book prices, help the lady arrange the\n    books into groups in the best way possible, so that the total\n    price the customer has to pay is minimal.Please note: The lady doesn’t have to arrange the books into\n    groups so that each group contains exactly $3$ books, but the number of books in\n    a group needs to be between $1$ and $3$, inclusively.",
            "input": "The first line of input contains the integer $N$ ($1\n    \\leq N \\leq 100\\ 000$), the number of books the customer\n    bought. Each of the following $N$ lines contains a single integer\n    $C_ i$ ($1 \\leq C_ i \\leq 100\\ 000$), the\n    price of each book.",
            "output": "The first and only line of output must contain the required\n    minimal price."
        },
        "table": {
            "input": [
                "4\n3\n2\n3\n2\n",
                "6\n6\n4\n5\n5\n5\n5\n"
            ],
            "output": [
                "8\n",
                "21\n"
            ]
        },
        "sidebar": {
            "problemID": "akcija",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.1"
        },
        "content": {
            "author": "Antonio Jurić",
            "source": "Croatian Open Competition in Informatics 2015/2016, contest #1"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n3\n2\n3\n2\n",
                "6\n6\n4\n5\n5\n5\n5\n"
            ],
            "output": [
                "8\n",
                "21\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Aladin",
        "body": {
            "question": "Aladin was walking down the path one day when he found the\n    strangest thing: $N$ empty\n    boxes right next to a weird alien machine. After a bit of\n    fumbling around he got the machine to do something. The machine\n    now accepts 4 integers $L$, $R$, $A$ and $B$. After that hitting the big red\n    glowing button labeled “NE DIRAJ”1 causes the\n    machine to go crazy and follow the next routine:Set the number of stones in the box labeled $L$ to $A$ modulo $B$.\n      \n\n      \n        It procedes to fly to the box labeled $L+1$, and set the number of\n        stones there to $(2\\cdot A)\n        \\mod B$.\n      \n\n      \n        It procedes to fly to the box labeled $L+2$, and set the number of\n        stones there to $(3\\cdot A)\n        \\mod B$.\n      \n\n      \n        Generaly, it visits each box labeled between\n        $L$ and $R$, and set the number of stones\n        there to $( (X - L + 1)\\cdot\n        A) \\mod B$, where $X$ is the box label.\n      \n\n      \n        After it visits the box labeled $R$. It settles down for further\n        instructions.\n      \n    During the game Aladin wonders what is the total number of\n    stones in some range of boxes.Write a program that simulates the device and answers\n    Aladin’s questions.",
            "input": "The first line contains two integers $N$ and $Q$ ($1\n    \\leq N \\leq 1\\, 000\\, 000\\, 000$) ($1 \\leq Q \\leq 50\\, 000$), number of\n    boxes and number of queries.The next $Q$ lines\n    contain information about the simulation.If the line starts with 1, than it follows the format “1\n    $L$ $R$ $A$ $B$” ($1\n    \\leq L \\leq R \\leq N$) ($1\n    \\leq A, B \\leq 1\\, 000\\, 000$), meaning that Aladin\n    keyed in numbers $L$,\n    $R$, $A$ and $B$ in the device and allowed the\n    device to do its job.If the line starts with 2, then it follows the format “2 L\n    R” ($1 \\leq L \\leq R \\leq\n    N$), meaning that Aladin wonders how many stones in\n    total are ther stones are in boxes labeled $L$ to $R$ (inclusive).",
            "output": "For each query beginning with 2 output the answer to that\n    particular query. Queries should be processed in the order they\n    are given in the input.First sample descriptionThe boxes start containing $\\{\n    0, 0, 0, 0, 0, 0\\} $, 0 stones in total. After that the\n    device sets the stones to $\\{ 1\n    \\mod 2, 2 \\mod 2, 3 \\mod 2, 4 \\mod 2, 5 \\mod 2, 0\\} $ =\n    $\\{ 1,0,1,0,1,0\\} $, or 3\n    stones in total."
        },
        "table": {
            "input": [
                "6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n",
                "4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n",
                "4 4\n1 1 4 7 9\n2 1 4\n1 1 4 1 1\n2 1 4\n"
            ],
            "output": [
                "0\n3\n",
                "3\n2\n1\n0\n",
                "16\n0\n"
            ]
        },
        "sidebar": {
            "problemID": "aladin",
            "CPU": " 6 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.9"
        },
        "content": {
            "author": "Goran Žužić",
            "source": "Croatian Open Competition in Informatics 2009/2010, contest #1"
        },
        "testCases": {
            "numTestCases": "",
            "input": [
                "6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n",
                "4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n",
                "4 4\n1 1 4 7 9\n2 1 4\n1 1 4 1 1\n2 1 4\n"
            ],
            "output": [
                "0\n3\n",
                "3\n2\n1\n0\n",
                "16\n0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alchemy",
        "body": {
            "question": "Since the days of yore, alchemy has been studied and\n    practiced. The practice makes alchemists able to transmute\n    materials into other forms. Transmuting materials requires\n    drawing a transmutation circle on the ground. A little known\n    fact about transmutation circles is they can be drawn inside or\n    outside other transmutation circles. By activating certain\n    configurations in the correct order, more powerful\n    transmutations can be produced. Activating circles incorrectly\n    can have drastic effects on the alchemist’s body.A young alchemist named Nicholas Flamel would like to learn\n    the ways of alchemy. He is going to draw several configurations\n    of transmutation circles on the ground. When a circle is drawn\n    it burns bright red representing the element of fire. The\n    drawing of the circle itself produces no energy, but it has an\n    effect on any and all circles that are already drawn inside!\n    All of the circles inside the newly drawn circle quickly change\n    to their complement elements. Fire changes to a cool blue\n    representing water. Circles that were blue for water will burn\n    fiery red once again. This transformation can either create or\n    drain energy. Interestingly, it is the transformation, and not\n    the drawing, that emanates energy. Beware, energy can go\n    negative at any time draining the alchemist’s life force.Nicholas wants to get as much out of his transmutations as\n    possible. To do so requires him to draw his circles in an order\n    that releases the most energy. Determine the maximum amount of\n    energy that can be released, and the order in which he should\n    draw the circles.",
            "input": "Each input will consist of a single test case. Note that\n    your program may be run multiple times on different inputs.\n    Each test case will start with a line with a single integer\n    $n$ ($1 \\le n \\le 2\\, 000$) indicating the\n    number of circles. The next $n$ lines will describe the circles,\n    in order, from circle $1$\n    to circle $n$. Each line\n    will describe its circle with $5$ integers, with a single space\n    between integers:x y r a b\nWhere $(x,y)$ is the\n    center of the circle ($-20\\, 000\n    \\le x,y \\le 20\\, 000$), $r$ is the radius of the circle\n    ($1 \\le r \\le 20\\, 000$),\n    $a$ is the energy released\n    in the transition from fire to water, and $b$ is the energy released in the\n    transition from water to fire ($-500 \\le a,b \\le 500$). It is\n    guaranteed that no two circles’ edges will intersect.",
            "output": "Output exactly two lines. On the first line output a single\n    integer representing the maximum energy that can be produced by\n    activating the circles. On the second line output the order of\n    drawing the circles that can produce that energy. If more than\n    one order will work, output the one that comes first\n    lexicographically."
        },
        "table": {
            "input": [
                "8\n0 0 100 -100 -100\n0 0 50 -10 -10\n0 0 10 -100 500\n0 0 1 100 100\n1000 1000 100 -1 1\n1000 1000 50 -1 1\n1000 1000 10 -1 1\n1000 1000 1 -1 1\n"
            ],
            "output": [
                "700\n4 3 1 2 5 6 7 8\n"
            ]
        },
        "sidebar": {
            "problemID": "alchemy",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.2"
        },
        "content": {
            "author": "2014 Southeast USA Regionals Division 1",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "8\n0 0 100 -100 -100\n0 0 50 -10 -10\n0 0 10 -100 500\n0 0 1 100 100\n1000 1000 100 -1 1\n1000 1000 50 -1 1\n1000 1000 10 -1 1\n1000 1000 1 -1 1\n"
            ],
            "output": [
                "700\n4 3 1 2 5 6 7 8\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alea iacta est",
        "body": {
            "question": "Isaac B. Manfred always dreamed about being a terribly rich\n    man. Recently, he started to study dice games. He found several\n    of them similar to a trademarked game called Yahtzee! The rules\n    sometimes vary but basic principles are the same. To give you\n    an idea, we will describe a simplified version of such\n    rules.The game consists of rounds. In each round, a player rolls\n    five dice. After the first roll, it is possible to keep some of\n    the dice and re-roll the rest of them. Any number of dice can\n    be rerolled (including none or all of them). If the re-rolled\n    dice still do not fit the player’s intentions, it is possible\n    to re-roll some of them again, for the third and final time.\n    After at most two such re-rolls, the player must assign the\n    result to one of possible combinations and the round is scored\n    according to that combination.\n      \n        \n          \n            \n            Combination\n            \n\n            \n            Condition\n            \n\n            \n            Scoring\n            \n\n            \n            Example\n            \n\n            \n            Score\n            \n          \n\n          \n            \n            Ones\n            \n\n            \n            At least one 1.\n            \n\n            \n            One point for each 1.\n            \n\n            \n            1 1 2 4 5\n            \n\n            \n            2\n            \n          \n\n          \n            \n            Twos\n            \n\n            \n              At least one 2.\n            \n\n            \n              Two points for each 2.\n            \n\n            \n              1 2 2 2 6\n            \n\n            \n              6\n            \n          \n\n          \n            \n            Threes\n            \n\n            \n              At least one 3.\n            \n\n            \n              Three points for each 3.\n            \n\n            \n              1 2 4 5 5\n            \n\n            \n              0\n            \n          \n\n          \n            \n            Fours\n            \n\n            \n              At least one 4.\n            \n\n            \n              Four points for each 4.\n            \n\n            \n              4 4 4 4 4\n            \n\n            \n              20\n            \n          \n\n          \n            \n            Fives\n            \n\n            \n              At least one 5.\n            \n\n            \n              Five points for each 5.\n            \n\n            \n              1 2 3 4 5\n            \n\n            \n              5\n            \n          \n\n          \n            \n            Sixes\n            \n\n            \n              At least one 6.\n            \n\n            \n              Six points for each 6.\n            \n\n            \n              1 4 6 6 6\n            \n\n            \n              18\n            \n          \n\n          \n            \n            Sequence\n            \n\n            \n            (1 2 3 4 5) or (2 3 4 5 6).\n            \n\n            \n            Thirty points.\n            \n\n            \n            1 2 3 4 5\n            \n\n            \n            30\n            \n          \n\n          \n            \n            Full House\n            \n\n            \n              Three of the same value and\n            \n\n            \n              Sum of all dice values.\n            \n\n            \n              2 2 5 5 5\n            \n\n            \n              19\n            \n          \n\n          \n            \n             \n\n            \n              a pair of another value.\n            \n\n            \n             \n\n            \n             \n\n            \n             \n          \n\n          \n            \n            Four of a kind\n            \n\n            \n              Four of the same value,\n            \n\n            \n              Sum of all dice values.\n            \n\n            \n              4 4 4 4 5\n            \n\n            \n              21\n            \n          \n\n          \n            \n             \n\n            \n              the fifth one different.\n            \n\n            \n             \n\n            \n             \n\n            \n             \n          \n\n          \n            \n            Five of a kind\n            \n\n            \n              All five of the same value.\n            \n\n            \n              Fifty points.\n            \n\n            \n              1 1 1 1 1\n            \n\n            \n              50\n            \n          \n\n          \n            \n            Chance\n            \n\n            \n            None.\n            \n\n            \n            Sum of all dice values.\n            \n\n            \n            2 4 5 5 6\n            \n\n            \n            22\n            \n          \n        \n      \n\n      \n        Figure 1: The list of combinations, conditions that\n        must be satisfied to use them, and the number of points\n        scored when the combination is used.\n      \n    A small example: The player rolls 2, 3, 6, 6, 5. The two 6’s\n    are kept and the three remaining dice re-rolled, they give new\n    values: 1, 1, 6. The player may now choose to score 20 points\n    immediately for a Full House. Instead, he or she decides to\n    re-roll the two 1’s again, in hope there will be another 6. The\n    dice give 4 and 5 and the player will score either 18 points\n    for Sixes or 27 points for Chance.The main point of the game is that there are eleven\n    combinations and eleven rounds. During the whole game, each\n    combination must be used exactly once. It may happen that some\n    result would not fit into any available combination. In such a\n    case, the player must select some combination anyway, scoring\n    zero points for that round and losing the possibility to use\n    that combination later. These rules make the game very tricky,\n    especially at the end, when the combinations have been almost\n    exhausted.Now, we get back to Isaac. He found a casino with an\n    electronic version of this dice game. After carefully watching\n    many games of other players, he was able to crack the\n    random-number generator used in the machine. Therefore, he is\n    able to predict the following rolls exactly. What an\n    opportunity! However, it is still not easy to find the optimal\n    strategy. If you write a program that would help him to become\n    rich, he may share some of his money with you.",
            "input": "The input contains several scenarios (at most 12), each of\n    them specified on a single line. The line contains three\n    numbers separated by a space: $A$, $C$, and $X_0$. These numbers describe the\n    random-number generator: $A$ is called a multiplier\n    $(1\\leq A\\leq 2^{31})$,\n    $C$ is an\n    increment $(0\\leq C\\leq\n    2^{31})$, and $X_0$\n    is the initial seed $(0\\leq X_0\\leq 2^{31})$. The last\n    scenario is followed by a line containing three zeros.The generator is a linear congruential generator, which\n    means that the next random number is calculated from the\n    previous one using the following formula:\\[ X_{n+1} = (A\\cdot X_ n + C) \\bmod 2^{32}\n    \\]The modulo operation specifies that only the lowest 32 bits\n    of the result are used, the rest is discarded. Numbers\n    $X_1, X_2, X_3, \\ldots $\n    constitute a pseudo-random sequence, each of them determines\n    the result of one individual roll of a dice. With congruential\n    generators, the “randomness” of the numbers is in their higher\n    bits only – therefore, to get a result of the $n$-th roll (starting with\n    $n = 1$), we discard lower\n    16 bits of the number $X_\n    n$ and compute the remainder when the number in bits\n    16–31 is divided by six. This gives a number between 0 and 5,\n    by adding one, we get a number shown on a dice:\\[ roll(n) = (\\lfloor X_ n/2^{16}\\rfloor\n    \\bmod 6) + 1 \\]For example, when $A = 69069,\n    C = 5,$ and the $X_0 =\n    0$ is zero, we get the following sequence of “random”\n    rolls: $1, 6, 6, 3, 2, 4, 3, 2,\n    3, 5, 1, 6, 6, 4, 5, 1, 3, 4, 1, \\ldots $.",
            "output": "For each scenario, print one integer number: the maximal\n    number of points that may be scored in a game determined by the\n    given generator. The score is calculated after 11 rounds as the\n    sum of scores in all combinations."
        },
        "table": {
            "input": [
                "69069 5 0\n69069 5 2\n1664525 1013904223 177\n1103515245 12345 67890\n0 0 0\n"
            ],
            "output": [
                "235\n194\n241\n235\n"
            ]
        },
        "sidebar": {
            "problemID": "alea",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.9"
        },
        "content": {
            "author": "Josef CibulkaMartin KačerJan Stoklasa",
            "source": "CTU Open 2008"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "69069 5 0\n69069 5 2\n1664525 1013904223 177\n1103515245 12345 67890\n0 0 0\n"
            ],
            "output": [
                "235\n194\n241\n235\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alice in the Digital World",
        "body": {
            "question": "After returning from Wonderland, Alice needs to improve her\n    scientific skills in the current digital world. Alice decides\n    to participate the ACM - ICPC Asia Nha Trang Regional Contest\n    2016 to evaluate her actual performance. Her favorite problem\n    in the contest is described below.Given an array of positive integers $A = {a}_{1}, {a}_{2},\\ldots ,\n    {a}_{n}$, a subarray ${A}_{i}^{j}$ of $A$ is a sequence of continuous\n    elements in $A$, i.e.,\n    ${A}_{i}^{j} = {a}_{i},\n    {a}_{i+1},\\ldots , {a}_{j}$ (where $1 \\leq i \\leq j \\leq $ n). The weight\n    of ${A}_{i}^{j}$ is the\n    sum of all its elements, i.e., $\\sum _{k=i}^{j} {a}_{k}$.Given an integer $m$,\n    your task is to find the maximum weight subarray of\n    $A$ that contains only one\n    $m$ as the minimum\n    element. You can assume that $A$ always contains at least one\n    element with value $m$.",
            "input": "The input consists of several datasets. The first line of\n    the input contains the number of datasets, which is a positive\n    number and is not greater than $20$. The following lines describe the\n    datasets.Each dataset is described by the following lines:\n      \n        The first line contains two positive integers\n        $n$ and $m$ where $n \\leq {10}^{5}$ and $m \\leq {2}^{6}$;\n      \n      \n        The second line contains $n$ positive integers, each with\n        value at most ${2}^{6}$.",
            "output": "For each dataset, output the maximum weight."
        },
        "table": {
            "input": [
                "1\n6 2\n1 3 2 6 2 4\n"
            ],
            "output": [
                "12\n"
            ]
        },
        "sidebar": {
            "problemID": "alicedigital",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.1"
        },
        "content": {
            "author": "The 2016 ACM - ICPC Asia Nha Trang Regional Contest",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "1\n6 2\n1 3 2 6 2 4\n"
            ],
            "output": [
                "12\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alien Codebreaking",
        "body": {
            "question": "You’ve intercepted encrypted communications between Martian\n    diplomats. Since Martian diplomats are often spies, you decide\n    to decrypt the messages. While the Martians have skilled rocket\n    tech, they lag behind in number theory considerably, which\n    compromises their encryption protocol.Fortunately for you, spies friendly to you have reverse\n    engineered the Martian protocol. It turns out that the Martians\n    are using a shift-based cipher combined with a very long\n    one-time pad. More specifically, the decryption procedure works\n    as follows:\n      \n      \n    Step 1: Define the function $f(x) = (33x + 1) \\mod\n    2^{20}$.Further define $f^1(x) =\n    f(x)$,  $f^2(x) =\n    f(f(x))$,  $f^3(x) =\n    f(f(f(x)))$, and so on.Step 2: Create a $X$ by\n    $X$ size grid, fill the\n    upper left corner with $f^1(0)$, the next cell to the right\n    with $f^2(0)$,\n    $f^3(0)$ etc. Once the top\n    row is filled, continue to the cell below the upper left cell,\n    and fill with $f^{X+1}(0)$. Continue this process\n    until all rows are filled.Step 3: Sum all the values in every column, and take those\n    values mod $2^{20}$.Step 4: Concatenate the base-10 representations of the\n    column sums together, to get a very long base-10 number. For\n    instance, if you had column sums of 10 and 12 for the\n    first and second column, the leftmost four digits of the\n    resulting value would be 1012.Step 5: Convert the result of step 4 from base $10$ to base $27$. This will yield the one-time pad\n    the Martians used.Step 6: For each letter $l$ of the intercepted message, shift\n    the letter by the amount given by the corresponding digit of\n    step 5, base $27$.\n    “Shifting” means to add the digit at the corresponding position\n    of the pad to the value of the letter in the encrypted message\n    and then to compute its remainder modulo $27$. You may assume that both the\n    encrypted and the decrypted message consist of only uppercase\n    English characters ‘A’ through\n    ‘Z’ and spaces, which are assigned\n    values $0 \\ldots 26$\n    (A = 0, B =\n    1, ... Z = 25, SPACE = 26). Thus, if the encrypted message has\n    letter ‘D’ in position $3$, and the $3^{\\text {rd}}$ base-$27$ digit of the pad is $25$, then the decrypted letter after\n    shifting would be $3 + 25 = 1\n    \\mod 27$ which is ‘B’.Step 7: Output the decrypted message.",
            "input": "The first line of the input contains two positive integers,\n    $N$ ($1 \\le N \\le 10^6$), and $X$ ($1\n    \\le X \\le 2.5 \\cdot 10^5$). It is guaranteed that the\n    base $27$ result of step 5\n    will be longer or equal to the length of the intercepted\n    message. The second line of the input contains a string\n    consisting of uppercase letters and spaces of length\n    $N$, the encrypted\n    text.",
            "output": "Output the decrypted text."
        },
        "table": {
            "input": [
                "14 4\nJQ IRKEYFG EXQ\n",
                "43 100000\nBLNAMOTPRRNIXRNMPIWHXDZTRQJXRKIAIEEIIPJLGZP\n"
            ],
            "output": [
                "THIS IS A TEST\n",
                "FRIENDS ROMANS COUNTRYMEN LEND ME YOUR EARS\n"
            ]
        },
        "sidebar": {
            "problemID": "aliencodebreaking",
            "CPU": " 13 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.9"
        },
        "content": {
            "author": "Peter Steele",
            "source": "2017 Virginia Tech High School Programming Contest",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "14 4\nJQ IRKEYFG EXQ\n",
                "43 100000\nBLNAMOTPRRNIXRNMPIWHXDZTRQJXRKIAIEEIIPJLGZP\n"
            ],
            "output": [
                "THIS IS A TEST\n",
                "FRIENDS ROMANS COUNTRYMEN LEND ME YOUR EARS\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alien Numbers",
        "body": {
            "question": "The decimal numeral system is composed of ten digits, which\n    we represent as \"0123456789\" (the digits in a system are\n    written from lowest to highest). Imagine you have discovered an\n    alien numeral system composed of some number of digits, which\n    may or may not be the same as those used in decimal. For\n    example, if the alien numeral system were represented as \"oF8\",\n    then the numbers one through ten would be (F, 8, Fo, FF, F8,\n    8o, 8F, 88, Foo, FoF). We would like to be able to work with\n    numbers in arbitrary alien systems. More generally, we want to\n    be able to convert an arbitrary number that’s written in one\n    alien system into a second alien system.",
            "input": "The first line of input gives the number of cases,\n    $T\\leq 100$. $T$ test cases follow. Each case is a\n    line formatted asalien_number source_language target_language\nEach language will be represented by a list of its digits,\n    ordered from lowest to highest value. No digit will be repeated\n    in any representation, all digits in the alien number will be\n    present in the source language, and the first digit of the\n    alien number will not be the lowest valued digit of the source\n    language (in other words, the alien numbers have no leading\n    zeroes). Each digit will either be a number 0-9, an uppercase\n    or lowercase letter, or one of the following symbols\n    !\"#$%&'()*+,-./:;<>[email protected][\\]^_`{|}~You may assume that the number in decimal is positive and at\n    most 1000000000. All languages will have at most 94 digits.",
            "output": "For each test case, output one line containing \"Case\n    #$x$: \" followed by the\n    alien number translated from the source language to the target\n    language."
        },
        "table": {
            "input": [
                "4\n9 0123456789 oF8\nFoo oF8 0123456789\n13 0123456789abcdef 01\nCODE O!CDE? A?JM!.\n"
            ],
            "output": [
                "Case #1: Foo\nCase #2: 9\nCase #3: 10011\nCase #4: JAM!\n"
            ]
        },
        "sidebar": {
            "problemID": "aliennumbers",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.0"
        },
        "content": {
            "author": "Google Code Jam Practice Problems",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n9 0123456789 oF8\nFoo oF8 0123456789\n13 0123456789abcdef 01\nCODE O!CDE? A?JM!.\n"
            ],
            "output": [
                "Case #1: Foo\nCase #2: 9\nCase #3: 10011\nCase #4: JAM!\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A List Game",
        "body": {
            "question": "You are playing the following simple game with a friend:The first player picks a positive integer $X$.\n      \n\n      \n        The second player gives a list of $k$ positive integers $Y_1, \\ldots , Y_ k$ such that\n        $(Y_1+1)(Y_2+1) \\cdots (Y_\n        k+1) = X$, and gets $k$ points.\n      \n    Write a program that plays the second player.",
            "input": "The input consists of a single integer $X$ satisfying $10^3 \\le X \\le 10^9$, giving the\n    number picked by the first player.",
            "output": "Write a single integer $k$, giving the number of points\n    obtained by the second player, assuming she plays as good as\n    possible."
        },
        "table": {
            "input": [
                "65536\n",
                "127381\n"
            ],
            "output": [
                "16\n",
                "3\n"
            ]
        },
        "sidebar": {
            "problemID": "listgame",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.9"
        },
        "content": {
            "author": "Per Austrin",
            "source": "Spotify Challenge 2010",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "65536\n",
                "127381\n"
            ],
            "output": [
                "16\n",
                "3\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "All about that base",
        "body": {
            "question": "The base (or radix) of a positional\n    numeral system is the number of symbols that can be used to\n    represent a number in that system. The base $10$ system (also known as decimal)\n    uses $10$ distinct\n    symbols: $0, 1, \\ldots ,\n    9$. For example, we interpret the number $72345$ as:\\[ 7 \\times 10^4 + 2 \\times 10^3 + 3 \\times\n    10^2 + 4 \\times 10^1 + 5 \\times 10^0. \\]This example illustrates that in base $10$ the symbol at place $P\\ge 0$ (starting from the right) is\n    multiplied by $10^ P$ to\n    get its value. More generally, in base $B$ we use $B$ symbols to represent $0, \\ldots , B-1$, and the symbol at\n    the $P$th place is\n    multiplied by $B^ P$ to\n    get its value.Other bases commonly used in computation include base\n    $2$ (or binary, using\n    symbols $0$ and\n    $1$), base $8$ (or octal, using symbols\n    $0$–$7$), and base $16$ (or hexadecimal, using symbols\n    $0$–$9$ and $a$–$f$). In bases higher than\n    $10$, letters represent\n    the higher values. Thus in hexadecimal $a$–$f$ represent the decimal values\n    $10$–$15$, and in bases $\\ge 36$ the letter $z$ represents the decimal value\n    $35$.Your job is to determine the bases in which given arithmetic\n    expressions are valid. We define an expression as\n    valid in base $B$\n    if two conditions are true. First, all the operands used are\n    interpretable in base $B$\n    as having values in the decimal range $[1,2^{32}-1]$. Second, the expression\n    is true. Any arbitrary expression might be valid in zero, one,\n    or more bases. In this problem we will only consider bases\n    $1$–$36$, where base $1$ is unary.Note that following the convention listed above, unary would\n    consist of a single symbol: $0$. In this problem, unary numbers\n    use the symbol $1$ rather\n    than $0$ (think “tally\n    marks”). E.g., $111$ in\n    unary is equivalent to the decimal number $3$ and $1111111$ in unary is equivalent to\n    the decimal number $7$.",
            "input": "Input for this problem starts with a line containing an\n    integer $0\\le N \\le 20$.\n    The following $N$ lines\n    each contain an arithmetic expression with the following\n    form:\\[ X ~ op ~ Y ~ = ~ Z\n    \\]where $X$, $Y$, and $Z$ are positive, whole numbers\n    consisting of $1$ to\n    $100$ symbols from the set\n    $0$–$9$ and $a$–$z$, and $op$ is one of the four operators\n    +, -, *, /. For each statement there is at\n    least one base $1\\le B \\le\n    36$ such that $X$,\n    $Y$, and $Z$ can all be interpreted in base\n    $B$ as having values in\n    the decimal range $[1,2^{32}-1]$.",
            "output": "For each expression, list the bases in which the expression\n    is valid (sorted in ascending base order) or the word “invalid”\n    if the expression not valid in any of the bases $1$–$36$. Use symbols $1$–$9$, then $a$–$z$, then $0$ to represent bases $1$–$36$ (with the last symbol,\n    $0$, representing base\n    $36$)."
        },
        "table": {
            "input": [
                "8\n6ef + d1 = 7c0\n3 / 2 = 1\n444 / 2 = 222\n10111 * 11 = 1000101\n10111 * 11 = 111221\n5k - 1z = 46\n1111111111 - 1111111 = 111\n2048 - 512 = 1536\n"
            ],
            "output": [
                "g\ninvalid\n56789abcdefghijklmnopqrstuvwxyz0\n2\n3456789abcdefghijklmnopqrstuvwxyz0\ninvalid\n1\na\n"
            ]
        },
        "sidebar": {
            "problemID": "allaboutthatbase",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.1"
        },
        "content": {
            "author": "Joshua T. GuerinKathleen Ericson",
            "source": "2015 ICPC North American Qualifier Contest",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "8\n6ef + d1 = 7c0\n3 / 2 = 1\n444 / 2 = 222\n10111 * 11 = 1000101\n10111 * 11 = 111221\n5k - 1z = 46\n1111111111 - 1111111 = 111\n2048 - 512 = 1536\n"
            ],
            "output": [
                "g\ninvalid\n56789abcdefghijklmnopqrstuvwxyz0\n2\n3456789abcdefghijklmnopqrstuvwxyz0\ninvalid\n1\na\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "All Different Directions",
        "body": {
            "question": "If you walk through a big city and try to find your way\n    around, you might try asking people for directions. However,\n    asking $n$ people for\n    directions might result in $n$ different sets of directions. But\n    you believe in the law of averages: if you consider everyone’s\n    advice, then you will have a good idea of where to go by\n    computing the average destination that they all lead to. You\n    would also like to know how far off were the worst directions.\n    You compute this as the maximum straight-line distance between\n    each direction’s destination and the averaged destination.",
            "input": "Input consists of up to $100$ test cases. Each test case\n    starts with an integer $1 \\leq n\n    \\leq 20$, which is the number of people you ask for\n    directions. The following $n$ lines each has two things: your\n    $(x, y)$ location when you\n    meet the person (since you are walking around meeting people)\n    and that person’s directions from where you are standing. Each\n    person’s directions are built from instructions of the\n    following form:\n      \n        ‘start $\\alpha $’,\n        where $\\alpha $ is the\n        initial direction you are facing in degrees (east is 0\n        degrees, north is 90 degrees).\n      \n\n      \n        ‘turn $\\alpha $’,\n        where $\\alpha $ is an\n        angle in degrees you should turn. A positive $\\alpha $ indicates to turn to the\n        left.\n      \n\n      \n        ‘walk $x$’, where\n        $x$ is a number of\n        units to walk.\n      \n    The ‘start’ instruction is always the first instruction, and\n    only occurs at the beginning. Each person’s directions contain\n    at most $25$ instructions.\n    All numeric inputs are real numbers in the range $[-1\\, 000,1\\, 000]$ with at most four\n    digits past the decimal. Input ends when $n$ is zero.",
            "output": "For each test case, print a line with the $x$ and $y$ coordinates of the average\n    destination, followed by the distance between the worst\n    directions and the averaged destination. Answers should be\n    accurate within $0.01$\n    units."
        },
        "table": {
            "input": [
                "3\n87.342 34.30 start 0 walk 10.0\n2.6762 75.2811 start -45.0 walk 40 turn 40.0 walk 60\n58.518 93.508 start 270 walk 50 turn 90 walk 40 turn 13 walk 5\n2\n30 40 start 90 walk 5\n40 50 start 180 walk 10 turn 90 walk 5\n0\n"
            ],
            "output": [
                "97.1547 40.2334 7.63097\n30 45 0\n"
            ]
        },
        "sidebar": {
            "problemID": "alldifferentdirections",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.7"
        },
        "content": {
            "author": "Greg Hamerly",
            "source": "Baylor Competitive Learning course",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3\n87.342 34.30 start 0 walk 10.0\n2.6762 75.2811 start -45.0 walk 40 turn 40.0 walk 60\n58.518 93.508 start 270 walk 50 turn 90 walk 40 turn 13 walk 5\n2\n30 40 start 90 walk 5\n40 50 start 180 walk 10 turn 90 walk 5\n0\n"
            ],
            "output": [
                "97.1547 40.2334 7.63097\n30 45 0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Allergy Test",
        "body": {
            "question": "A test for allergy is conducted over the course of several\n    days, and consists of exposing you to different substances (so\n    called allergens). The goal is to decide exactly which of the\n    allergens you are allergic to. Each allergen has a live\n    duration $D$ measured in\n    whole days, indicating exactly how many days you will suffer\n    from an allergic reaction if you are allergic to that\n    particular substance. An allergic reaction starts to show\n    almost immediately after you have been exposed to an allergen\n    which you are allergic to. The test scheme has two action\n    points per day:At 8 o’clock each morning, at most one of the allergens\n        is applied to your body.\n      \n\n      \n        At 8 o’clock each evening, you are examined for allergic\n        reactions.\n      \n    Thus an allergen with live duration $D$ will affect exactly $D$ allergic reaction\n    examinations.Of course, if you have two or more active allergens in your\n    body at the time of an observed reaction, you cannot tell from\n    that information only, which of the substances you are allergic\n    to.You want to find the shortest possible test scheme given the\n    durations of the allergens you want to test. Furthermore, to\n    allow simple large scale application the test scheme must be\n    non-adaptive, i.e. the scheme should be fixed in advance. Thus\n    you may not choose when to apply an allergen based on the\n    outcome of previous allergic reaction examinations.",
            "input": "The first line of the input contains a single integer\n    $k$ ($1 \\leq k \\leq 20$) specifying the\n    number of allergens being tested for. Then follow $k$ lines each containing an integer\n    $D$ ($1 \\leq D \\leq 7$) specifying the live\n    duration of each allergen.",
            "output": "The number of days of the shortest conclusive non-adaptive\n    test scheme.A scheme ends the morning when you no longer have active\n    allergens in your body, thus a test scheme for a single\n    allergen with live duration $D$ takes $D$ days."
        },
        "table": {
            "input": [
                "3\n2\n2\n2\n",
                "5\n1\n4\n2\n5\n2\n"
            ],
            "output": [
                "5\n",
                "10\n"
            ]
        },
        "sidebar": {
            "problemID": "allergy",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "7.5"
        },
        "content": {
            "author": "Andreas Björklund",
            "source": "Nordic Collegiate Programming Contest (NCPC) 2009",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "3\n2\n2\n2\n",
                "5\n1\n4\n2\n5\n2\n"
            ],
            "output": [
                "5\n",
                "10\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "All Friends",
        "body": {
            "question": "Sociologists are interested in the phenomenon of\n    “friendship”. To study this property, they analyze various\n    groups of people. For each two persons in such a group they\n    determine whether they are friends (it is assumed that this\n    relation is symmetric). The sociologists are mostly interested\n    in the sets of friends. A set $S$ of people is a set of friends if\n    every two persons in $S$\n    are friends. However, studying the sets of friends turns out to\n    be quite complicated, since there are too many such sets.\n    Therefore, they concentrate just on the maximal sets of\n    friends. A set of friends $S$ is maximal if there is no person\n    outside $S$ who is friends\n    with everyone in $S$.Your task is to determine the number of maximal sets of\n    friends in each group. In case this number exceeds $1\\, 000$, you just need to report\n    this – such a group is too complicated to study.",
            "input": "The input consists of several instances, separated by single\n    empty lines.The first line of each instance consists of two integers\n    $1 \\le n \\le 128$ and\n    $0 \\le m \\le {n \\choose\n    2}$ – the number of people in the group and the number\n    of friendship relations. Each of the $m$ following lines consists of two\n    integers $a_ i$ and\n    $b_ i$ ($1 \\le a_{i}, b_{i} \\le n$). This\n    means that persons $a_{i}$\n    and $b_{i}$ ($a_{i} \\ne b_{i}$) are friends. Each\n    such relationship is described at most once.",
            "output": "The output for each instance consists of a single line\n    containing the number of maximal sets of friends in the\n    described group, or the string “Too many\n    maximal sets of friends.” (including the period!) in case\n    this number is greater than $1\\,\n    000$."
        },
        "table": {
            "input": [
                "5 4\n1 2\n3 4\n2 3\n4 5\n"
            ],
            "output": [
                "4\n"
            ]
        },
        "sidebar": {
            "problemID": "friends",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "8.5"
        },
        "content": {
            "author": "CTU Open 2005",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "5 4\n1 2\n3 4\n2 3\n4 5\n"
            ],
            "output": [
                "4\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "All Just A Dream",
        "body": {
            "question": "When the All Just A Dream trick is taken too far and gets\n    used too often, it can get difficult to keep track of what has\n    actually happened. This is where you enter the picture. You\n    will be given a list of events, dreams, and scenarios. Each\n    scenario specifies some events that have happened and some\n    others that have not happened. Your job is to determine for\n    each scenario whether that scenario is possible (possibly using\n    the All Just A Dream trick).",
            "input": "The first line of input consists of an integer $0 \\le n \\le 50\\, 000$, the number of\n    events, dreams and scenarios. Then follow $n$ lines, giving the events, dreams,\n    and scenarios in chronological order. Each line is in one of\n    the following forms:\n      \n        An event line is of the form “E\n        $e$”, indicating\n        that event $e$ happens\n        (see below for format of $e$).\n      \n\n      \n        A dream line is of the form “D\n        $r$”, indicating\n        that the last $r$\n        events that happened were All Just A Dream. Note that these\n        events are now considered to not have happened, so they\n        should not be counted when processing subsequent D lines.\n      \n\n      \n        A scenario line is of the form “S\n        $k$ $e_1$ $\\ldots $ $e_ k$”, where $1 \\le k \\le 30$ is an integer\n        giving the number of events and $e_1, \\ldots , e_ k$ is the list\n        of events of the scenario. In a scenario, each event may be\n        prefixed with a ‘!’, indicating\n        that the event did not happen in this\n        scenario.\n      \n    Events are strings containing at most $20$ characters and using only the\n    characters ‘a’-‘z’ and underscores (‘_’). For ‘D’ lines,\n    you can assume that $r$ is\n    an integer between $1$ and\n    $R$, where $R$ is the total number of events that\n    have happened so far (and that have not turned out to be a\n    dream). For ‘E’ lines, you can assume\n    that $e$ is not an event\n    that has already happened, except if the previous occurence of\n    the event turned out to be a dream, in which case it can happen\n    again.WarningThis problem has somewhat large amounts of input and output.\n    We recommend you to make sure that your input and output are\n    properly buffered in order to make the most of the few seconds\n    of execution time that we give you.",
            "output": "For each scenario in the input, output a line as\n    follows:\n      \n        “Yes” if the given scenario is\n        consistent with what has happened so far.\n      \n\n      \n        “$r$ Just A Dream” if the\n        given scenario would be consistent with what has happened\n        so far, provided a “D $r$” line had occurred just\n        before the scenario. If there are many possible values of\n        $r$, choose the\n        smallest value. Note that you should not consider this\n        hypothetical “D $r$” line to have occurred\n        (as illustrated by sample input 2 below).\n      \n\n      \n        “Plot Error” otherwise."
        },
        "table": {
            "input": [
                "10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2 !bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1 !bobby_dies\nS 2 !bobby_dies it_goes_on_and_on\n",
                "11\nS 1 !something\nE one\nE two\nE three\nE four\nE five\nS 3 three !four one\nD 1\nS 3 three !four one\nD 1\nS 3 three !four one\n"
            ],
            "output": [
                "Plot Error\n3 Just A Dream\nYes\nPlot Error\n",
                "Yes\n2 Just A Dream\n1 Just A Dream\nYes\n"
            ]
        },
        "sidebar": {
            "problemID": "dream",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.5"
        },
        "content": {
            "author": "Per Austrin",
            "source": "Spotify Challenge 2011",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2 !bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1 !bobby_dies\nS 2 !bobby_dies it_goes_on_and_on\n",
                "11\nS 1 !something\nE one\nE two\nE three\nE four\nE five\nS 3 three !four one\nD 1\nS 3 three !four one\nD 1\nS 3 three !four one\n"
            ],
            "output": [
                "Plot Error\n3 Just A Dream\nYes\nPlot Error\n",
                "Yes\n2 Just A Dream\n1 Just A Dream\nYes\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "All Pairs Shortest Path",
        "body": {
            "question": "The input consists of several test cases. Each test case\n    starts with a line with three non-negative integers,\n    $1 \\le n \\le 150$,\n    $0 \\le m \\le 5000$ and\n    $1 \\le q \\le 1000$,\n    separated by single single spaces, where $n$ is the numbers of nodes in the\n    graph, $m$ the number of\n    edges and $q$ the number\n    of queries. Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of\n    three (space-separated) integers $u$, $v$ and $w$ indicating that there is an edge\n    from $u$ to $v$ in the graph with weight\n    $-1000 \\le w \\le 1000$.\n    Then follow $q$ lines of\n    queries, each consisting of two node numbers $u$ and $v$ (separated by a space), asking for\n    the minimum distance from node $u$ to node $v$.Input will be terminated by a line containing 0 0 0, this line should not be\n    processed.",
            "input": "The input consists of several test cases. Each test case\n    starts with a line with three non-negative integers,\n    $1 \\le n \\le 150$,\n    $0 \\le m \\le 5000$ and\n    $1 \\le q \\le 1000$,\n    separated by single single spaces, where $n$ is the numbers of nodes in the\n    graph, $m$ the number of\n    edges and $q$ the number\n    of queries. Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of\n    three (space-separated) integers $u$, $v$ and $w$ indicating that there is an edge\n    from $u$ to $v$ in the graph with weight\n    $-1000 \\le w \\le 1000$.\n    Then follow $q$ lines of\n    queries, each consisting of two node numbers $u$ and $v$ (separated by a space), asking for\n    the minimum distance from node $u$ to node $v$.Input will be terminated by a line containing 0 0 0, this line should not be\n    processed.",
            "output": "For each query, output a single line containing the minimum\n    distance from node $u$ to\n    $v$, or the word\n    Impossible if there is no path from\n    $u$ to $v$, or -Infinity if there are arbitrarily short paths\n    from $u$ to $v$. Print a blank line after each\n    test case."
        },
        "table": {
            "input": [
                "4 3 4\n0 1 2\n1 2 2\n3 3 1\n0 2\n1 2\n3 0\n3 3\n2 1 2\n0 1 100\n0 1\n1 0\n0 0 0\n"
            ],
            "output": [
                "4\n2\nImpossible\n0\n\n100\nImpossible\n"
            ]
        },
        "sidebar": {
            "problemID": "allpairspath",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.7"
        },
        "content": {
            "author": "Per Austrin",
            "source": "KTH CSC Popup 2005",
            "license": "https://licensebuttons.net/l/by/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4 3 4\n0 1 2\n1 2 2\n3 3 1\n0 2\n1 2\n3 0\n3 3\n2 1 2\n0 1 100\n0 1\n1 0\n0 0 0\n"
            ],
            "output": [
                "4\n2\nImpossible\n0\n\n100\nImpossible\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Almost Perfect",
        "body": {
            "question": "A positive integer $p$\n    is called a perfect number if all the\n    proper divisors of $p$ sum\n    to $p$ exactly. Integer\n    $d$ is a proper divisor of\n    $p$ if $1 \\le d \\le p-1$ and $p$ is evenly divisible by\n    $d$. For example, the\n    number $28$ is a perfect\n    number, since its proper divisors (which are $1$, $2$, $4$, $7$ and $14$) add up to $28$.Perfect numbers are rare; only $50$ of them are known (as of 2017).\n    Perhaps the definition of perfection is a little too strict.\n    Instead, we will consider numbers that we’ll call almost perfect. Positive integer $p$ is almost perfect if the proper\n    divisors of $p$ sum to a\n    value that differs from $p$ by no more than two.",
            "input": "Input consists of a sequence of up to $500$ integers, one per line. Each\n    integer is in the range $2$ to $10^9$ (inclusive). Input ends at end\n    of file.",
            "output": "For each input value, output the same value and then one of\n    the following: “perfect” (if the number is perfect), “almost\n    perfect” (if it is almost perfect but not perfect), or “not\n    perfect” (otherwise)."
        },
        "table": {
            "input": [
                "6\n65\n650\n"
            ],
            "output": [
                "6 perfect\n65 not perfect\n650 almost perfect\n"
            ]
        },
        "sidebar": {
            "problemID": "almostperfect",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.6"
        },
        "content": {
            "author": "David Sturgill",
            "source": "Baylor Competitive Learning course",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "6\n65\n650\n"
            ],
            "output": [
                "6 perfect\n65 not perfect\n650 almost perfect\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Almost Union-Find",
        "body": {
            "question": "I hope you know the beautiful Union-Find structure. In this\n    problem, you’re to implement something similar, but not\n    identical. The data structure you need to write is also a\n    collection of disjoint sets, supporting 3 operations:$1\\ p\\ q$\n\n      \n        Union the sets containing $p$ and $q$. If $p$ and $q$ are already in the same set,\n        ignore this command.\n      \n\n      $2\\ p\\ q$\n\n      \n        Move $p$ to the set\n        containing $q$. If\n        $p$ and $q$ are already in the same set,\n        ignore this command\n      \n\n      $3\\ p$\n\n      \n        Return the number of elements and the sum of elements in\n        the set containing $p$.\n      \n    Initially, the collection contains $n$ sets: $\\{ 1\\} , \\{ 2\\} , \\{ 3\\} , \\ldots , \\{ n\\}\n    $.As an example, consider the sequence of operations in sample\n    input 1 below.\n      \n        Initially: $\\{ 1\\} , \\{\n        2\\} , \\{ 3\\} , \\{ 4\\} , \\{ 5\\} $\n      \n\n      \n        Collection after operation 1 1\n        2: $\\{ 1,2\\} , \\{ 3\\} ,\n        \\{ 4\\} , \\{ 5\\} $\n      \n\n      \n        Collection after operation 2 3\n        4: $\\{ 1,2\\} , \\{ 3,4\\}\n        , \\{ 5\\} $ (we omit the empty set that is produced\n        when taking out $3$\n        from $\\{ 3\\} $)\n      \n\n      \n        Collection after operation 1 3\n        5: $\\{ 1,2\\} , \\{\n        3,4,5\\} $\n      \n\n      \n        Collection after operation 2 4\n        1: $\\{ 1,2,4\\} , \\{\n        3,5\\} $",
            "input": "There are several test cases. Each test case begins with a\n    line containing two integers $n$ and $m$ ($1\n    \\leq n,m \\leq 100\\, 000$), the number of integers, and\n    the number of commands. Each of the next $m$ lines contains a command. For\n    every operation, $1\\leq p,q\\leq\n    n$. The input is terminated by end-of-file (EOF). There\n    are at most $20$ cases,\n    and the size of the input file does not exceed $5$ MB.",
            "output": "For each type-$3$\n    command, output $2$\n    integers: the number of elements and the sum of elements."
        },
        "table": {
            "input": [
                "5 7\n1 1 2\n2 3 4\n1 3 5\n3 4\n2 4 1\n3 4\n3 3\n"
            ],
            "output": [
                "3 12\n3 7\n2 8\n"
            ]
        },
        "sidebar": {
            "problemID": "almostunionfind",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.6"
        },
        "content": {
            "author": "Rujia Liu",
            "source": "Rujia Liu's Present 3: A datastructure contest celebrating the 100th anniversary of Tsinghua University",
            "license": "https://licensebuttons.net/l/by/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "5 7\n1 1 2\n2 3 4\n1 3 5\n3 4\n2 4 1\n3 4\n3 3\n"
            ],
            "output": [
                "3 12\n3 7\n2 8\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alphabet",
        "body": {
            "question": "A string of lowercase letters is called alphabetical if some\n    of the letters can be deleted so that the only letters that\n    remain are the letters from ‘a’ to ‘z’ in order. Given a string\n    $s$, determine the minimum\n    number of letters to add anywhere in the string to make it\n    alphabetical.",
            "input": "Each input will consist of a single test case. Note that\n    your program may be run multiple times on different inputs. The\n    only line of input contains a string $s$ ($1\n    \\le |s| \\le 50$) which contains only lowercase\n    letters.",
            "output": "Output a single integer, which is the smallest number of\n    letters needed to add to $s$ to make it alphabetical."
        },
        "table": {
            "input": [
                "xyzabcdefghijklmnopqrstuvw\n",
                "aiemckgobjfndlhp\n"
            ],
            "output": [
                "3\n",
                "20\n"
            ]
        },
        "sidebar": {
            "problemID": "alphabet",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.0"
        },
        "content": {
            "author": "2016 Southeast USA Regionals Division 1",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "xyzabcdefghijklmnopqrstuvw\n",
                "aiemckgobjfndlhp\n"
            ],
            "output": [
                "3\n",
                "20\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alphabet Spam",
        "body": {
            "question": "A very simple and fast spam detection mechanism is based on\n    the ratios between whitespace characters, lowercase letters,\n    uppercase letters, and symbols. Symbols are defined as\n    characters that do not fall in one of the first three\n    groups.",
            "input": "The input consists of:\n      \n        one line with a string consisting of at least\n        $1$ and at most\n        $100\\, 000$\n        characters.\n      \n    A preprocessing step has already transformed all whitespace\n    characters to underscores (_), and the line\n    will consist solely of characters with ASCII codes between 33\n    and 126 (inclusive).",
            "output": "Output four lines, containing the ratios of whitespace\n    characters, lowercase letters, uppercase letters, and symbols\n    (in that order). Your answer should have an absolute or\n    relative error of at most $10^{-6}$."
        },
        "table": {
            "input": [
                "Welcome_NWERC_participants!\n",
                "\\/\\/in_US$100000_in_our_Ca$h_Lo||ery!!!\n"
            ],
            "output": [
                "0.0740740740740741\n0.666666666666667\n0.222222222222222\n0.0370370370370370\n",
                "0.128205128205128\n0.333333333333333\n0.102564102564103\n0.435897435897436\n"
            ]
        },
        "sidebar": {
            "problemID": "alphabetspam",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.3"
        },
        "content": {
            "author": "Northwestern Europe Regional Contest (NWERC) 2014 Practice Session",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "Welcome_NWERC_participants!\n",
                "\\/\\/in_US$100000_in_our_Ca$h_Lo||ery!!!\n"
            ],
            "output": [
                "0.0740740740740741\n0.666666666666667\n0.222222222222222\n0.0370370370370370\n",
                "0.128205128205128\n0.333333333333333\n0.102564102564103\n0.435897435897436\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Alternative Bracket Notation",
        "body": {
            "question": "Balanced closed bracket or parenthesis statements are ones\n    where each opening bracket is matched with a closed bracket\n    later in the string.Notice how each closed parenthesis matches to the most\n    recent unmatched open parenthesis.Define an alternative bracket notation as follows: each\n    bracket pair corresponds to a header in the form of\n    “start,end:” where start and\n    end are indices of the new string itself! The index\n    start is the index of the character immediately after\n    the ‘:’, and end is the index past the last header\n    corresponding to the last bracket pair contained in this\n    bracket pair. By taking a substring(start,\n    end) of the new notation, you get an alternative\n    bracket sequence describing all of the pairs of brackets\n    contained by the brackets corresponding to the\n    “start,end:”! Since an empty pair of brackets\n    has nothing inside, in their header, start and\n    end will be the same.Each index takes up as many characters in the string as they\n    do when they are base $10$\n    numbers. (For example, the index $42$ will take up $2$ characters). The indices in the\n    new string start from $0$.\n    All of the indices found in the alternative bracket notation\n    string are absolute indices from the beginning of the new\n    string.Consider this parenthetical statement: (())Here is it, in our new, alternate bracket notation:\n    4,8:8,8:In this example, there are two sets of matching parenthesis,\n    the outer one and the inner one. The outer one appears before\n    the inner one, since the start bracket appears first. So, the\n    header for the outer brackets will appear before the header for\n    the inner bracket. The header 4,8:\n    represents the outer bracket, while the header 8,8: represents the inner bracket. The\n    substring from the $4$th\n    character to $7$th\n    character is 8,8:, which represents\n    what is contained inside the outer bracket. Note that\n    5,11:11,11: could also be a\n    legitimate alternate notation, but we want the shortest one,\n    which is why 4,8:8,8: is the correct\n    answer.",
            "input": "Each input will consist of a single test case. Note that\n    your program may be run multiple times on different inputs. The\n    input will consist of a single line, containing a string\n    $s$, which consists only\n    of open and closed parentheses. The string $s$ will be between $2$ and $4\\, 000$ characters long. There will\n    be no spaces. The string $s$ is guaranteed to be balanced.",
            "output": "Output the string $s$\n    in our new alternative bracket notation. If there’s more than\n    one way to represent $s$\n    in the new notation, choose the shortest representation, which\n    will be unique."
        },
        "table": {
            "input": [
                "(())\n",
                "()\n",
                "((())(()))()\n"
            ],
            "output": [
                "4,8:8,8:\n",
                "4,4:\n",
                "5,29:11,17:17,17:23,29:29,29:35,35:\n"
            ]
        },
        "sidebar": {
            "problemID": "bracketnotation",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.4"
        },
        "content": {
            "author": "North American Invitational Programming Contest (NAIPC) 2016",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "(())\n",
                "()\n",
                "((())(()))()\n"
            ],
            "output": [
                "4,8:8,8:\n",
                "4,4:\n",
                "5,29:11,17:17,17:23,29:29,29:35,35:\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Altruistic Amphibians",
        "body": {
            "question": "The frogs realize that if a frog $A$ climbs up on the back of frog\n    $B$ before it jumps, the\n    first frog $A$ stands a\n    better chance of escaping the pit: it can escape if\n    $h_ B+l_ A$ is strictly\n    larger than the depth of the pit.Furthermore, if frog $B$ carrying frog $A$ on its back climbs up on the back\n    of frog $C$, the situation\n    is even better for frog $A$: it can now escape the pit if\n    $h_ C+h_ B+l_ A$ is\n    strictly larger than the depth of the pit.The frogs can build even higher piles of frogs this way, the\n    only restriction is that no frog may carry other frogs of\n    weight in total amounting to its own weight or heavier. Once a\n    pile has been used to allow a frog to escape, the frogs in the\n    pile jump back to the bottom of the pit and they can then form\n    a new pile (possibly consisting of a different set of frogs).\n    The question is simply how many frogs can escape the pit\n    assuming they collaborate to maximize this number?",
            "input": "The first line of input contains two integers $n$ and $d$ ($1\n    \\le n \\leq 100\\, 000$, $1\n    \\le d \\le 10^8$), where $n$ is the number of frogs and\n    $d$ is the depth of the\n    pit in µm. Then follow $n$\n    lines each containing three integers $l, w, h$ ($1 \\le l, w, h \\le 10^8$),\n    representing a frog with leap capacity $l$ µm, weight $w$ µg, and height $h$ µm. The sum of all frogs’ weights\n    is at most $10^8$ µg.",
            "output": "Output the maximum number of frogs that can escape the\n    pit."
        },
        "table": {
            "input": [
                "3 19\n15 5 3\n12 4 4\n20 10 5\n",
                "3 19\n14 5 3\n12 4 4\n20 10 5\n"
            ],
            "output": [
                "3\n",
                "2\n"
            ]
        },
        "sidebar": {
            "problemID": "altruisticamphibians",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.1"
        },
        "content": {
            "author": "Andreas Björklund",
            "source": "Nordic Collegiate Programming Contest 2018",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "",
            "input": [
                "3 19\n15 5 3\n12 4 4\n20 10 5\n",
                "3 19\n14 5 3\n12 4 4\n20 10 5\n"
            ],
            "output": [
                "3\n",
                "2\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Amalgamated Artichokes",
        "body": {
            "question": "Fatima has done some previous analyses and has found that\n    the stock price over any period of time can be modelled\n    reasonably accurately with the following\n    equation:\\[ \\operatorname\n    {price}(k) = p \\cdot (\\sin (a \\cdot k+b) + \\cos (c \\cdot k+d) +\n    2) \\]where $p$, $a$, $b$, $c$ and $d$ are constants. Fatima would like\n    you to write a program to determine the largest price decline\n    over a given sequence of prices. Figure 1 illustrates the\n    price function for Sample Input 1. You have to consider\n    the prices only for integer values of $k$.\n      \n        \n\n        \n          Figure 1: Sample Input 1. The largest decline\n          occurs from the fourth to the seventh price.",
            "input": "The input consists of a single line containing $6$ integers $p$ ($1\n    \\le p \\le 1\\, 000$), $a$, $b$, $c$, $d$ ($0\n    \\le a, b, c, d \\le 1\\, 000$) and $n$ ($1\n    \\le n \\le 10^6$). The first $5$ integers are described above. The\n    sequence of stock prices to consider is $\\operatorname {price(1)}, \\operatorname\n    {price(2)}, \\ldots , \\operatorname {price}(n)$.",
            "output": "Display the maximum decline in the stock prices. If there is\n    no decline, display the number $0$. Your output should have an\n    absolute or relative error of at most $10^{-6}$."
        },
        "table": {
            "input": [
                "42 1 23 4 8 10\n",
                "100 7 615 998 801 3\n",
                "100 432 406 867 60 1000\n"
            ],
            "output": [
                "104.855110477\n",
                "0.00\n",
                "399.303813\n"
            ]
        },
        "sidebar": {
            "problemID": "artichoke",
            "CPU": " 5 seconds",
            "memory": " 1024 MB",
            "difficulty": "2.8"
        },
        "content": {
            "author": "International Collegiate Programming Contest (ACM-ICPC) World Finals 2015",
            "source": ""
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "42 1 23 4 8 10\n",
                "100 7 615 998 801 3\n",
                "100 432 406 867 60 1000\n"
            ],
            "output": [
                "104.855110477\n",
                "0.00\n",
                "399.303813\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Amanda Lounges",
        "body": {
            "question": "Amanda Air has routes between\n    many different airports, and has asked their most important\n    frequent flyers, members of the AA Frequent Flyer\n    program, which routes they most often fly. Based on this\n    survey, Amanda, the CEO and owner, has concluded that\n    Amanda Air will place lounges at\n    some of the airports at which they operate.However, since there are so many routes going between a wide\n    variety of airports, she has hired you to determine how many\n    lounges she needs to build, if at all possible, given the\n    constraints set by her. This calculation is to be provided by\n    you, before any lounges are built. Her requirements specifies\n    that for some routes, there must be lounges at both airports,\n    for other routes, there must be lounges at exactly one of the\n    airports, and for some routes, there will be no lounges at the\n    airports.She is very economically minded and is demanding the\n    absolute minimum number of lounges to be built.",
            "input": "The first line contains two non-negative integers\n    $1 \\leq n,m \\leq 200\\;\n    000$, giving the number of airports and routes in the\n    Amanda Catalog respectively. Thereafter\n    follow $m$ lines,\n    each describing a route by three non-negative integers\n    $1 \\leq a, b \\leq n$ and\n    $c \\in \\{ 0,1,2\\} $,\n    where $a$\n    and $b$ are the\n    airports the route connects and $c$ is the number of lounges.No route connects any airport with itself, and for any two\n    airports at most one requirement for that route is given. As\n    one would expect, $0$\n    is a request for no lounge, $1$ for a lounge at exactly one of the\n    two airports and $2$\n    for lounges at both airports.",
            "output": "If it is possible to satisfy the requirements, give the\n    minimum number of lounges necessary to do so. If it is not\n    possible, output impossible."
        },
        "table": {
            "input": [
                "4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n",
                "5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n",
                "4 5\n1 2 1\n2 3 0\n2 4 1\n3 1 1\n3 4 1\n"
            ],
            "output": [
                "3\n",
                "impossible\n",
                "2\n"
            ]
        },
        "sidebar": {
            "problemID": "amanda",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.4"
        },
        "content": {
            "author": "Markus S. DregiPål G. Drange",
            "source": "Nordic Collegiate Programming Contest (NCPC) 2014",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n",
                "5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n",
                "4 5\n1 2 1\n2 3 0\n2 4 1\n3 1 1\n3 4 1\n"
            ],
            "output": [
                "3\n",
                "impossible\n",
                "2\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Mazing!",
        "body": {
            "question": "A maze consists of a collection of equal sized square cells,\n    where any or all of the sides may be a wall or a door. The maze\n    may have no exit or multiple exits. Cells are typically\n    arranged so that they may share sides with other cells as shown\n    in the four sample mazes below:Figure 1: (The numbers in the cells above are for\n          illustrative purposes only.)\n        \n      \n    Each side of a cell is labeled with a direction to allow\n    navigation:\n      \n        \n      \n    For each maze, the starting point is someplace in the maze\n    (for example, any of the numbered cells in the samples above).\n    In the samples above:\n      \n        Maze A has no way out.\n      \n\n      \n        Maze B has an exit (solution) to the right of cell\n        2.\n      \n\n      \n        Maze C has an exit down from cell 3, unless the starting\n        point is cell 5, in which case there is no way out\n      \n\n      \n        Maze D has an exit up from cell 6.\n      \n    For example, using Maze D above, if the starting point is\n    cell 9, one possible set of directions to get to the exit would\n    be: right, right, right,\n    right, right, up, up, up.For this problem, you will write a program that finds an\n    exit to a maze. Your program must operate\n    interactively. That is, your program will make a move\n    by providing a direction (right, down, left or up), and the\n    judging software will send back one of four responses:\n      \n        wall - indicates that a wall is\n        there and you cannot proceed in that direction\n      \n\n      \n        ok - indicates that there is\n        door there and you may proceed in that direction to the\n        neighboring cell.\n      \n\n      \n        solved - indicates that you have\n        successfully found an exit to the maze.\n      \n\n      \n        wrong - indicates that your\n        program made an error, as discussed below.\n      \n    If your program determines there is no way out of the maze,\n    you should send the precise string “no way\n    out” (without the quotes) instead of a direction. If there\n    is in fact no way out of the maze, you will receive a solved reply.Your program will receive a wrong\n    indication if any of the following occur:\n      \n        Your program sends “no way\n        out”, even though there is a way out.\n      \n\n      \n        Your program makes the same move (direction) from the\n        same cell twice.\n      \n    After receiving a wrong or a\n    solved reply, your program should\n    exit.",
            "input": "This is an interactive program. The input you receive is a\n    function of the output you generate. All input and output\n    strings must end in a new-line character. You should never send\n    extra blank lines.You must make sure that your program’s standard output\n    stream is flushed after you output a the new-line character\n    that completes a command. This is accomplished with System.out.flush() in Java, stdout.flush() in Python, fflush(stdout) in C, and cout << flush in C++.The first thing your program must do when it starts up is to\n    send its first move (up, down, right or\n    left), followed by a new-line\n    character. It will then wait for a new-line terminated response\n    on the standard input. The response will be one of wall, ok, solved, or wrong\n    indication. Your program will then make another move based on\n    the response it received as discussed above. This process will\n    repeat until your program receives a wrong or solved\n    indication.Example (User output in Teletype,\n    Computer judge output in Bold). (This\n    sample run has no relationship to the samples shown above).\n      \n        \n          \n          Sample Run\n          \n        \n\n        \n          \n          down\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          right\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          left\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          up\n          \n        \n\n        \n          \n          ok\n          \n        \n\n        \n          \n          right\n          \n        \n\n        \n          \n          ok\n          \n        \n\n        \n          \n          down\n          \n        \n\n        \n          \n          ok\n          \n        \n\n        \n          \n          down\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          right\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          left\n          \n        \n\n        \n          \n          wall\n          \n        \n\n        \n          \n          up\n          \n        \n\n        \n          \n          ok\n          \n        \n\n        \n          \n          right\n          \n        \n\n        \n          \n          solved\n          \n        \n      \n    It is guaranteed that the maze will not be larger than\n    $100 \\times 100$ in any\n    dimension.",
            "output": ""
        },
        "table": {
            "input": [],
            "output": []
        },
        "sidebar": {
            "problemID": "amazing",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.3"
        },
        "content": {
            "author": "2016 Greater New York Region ACM Regional Contest",
            "source": ""
        },
        "testCases": {
            "numTestCases": "",
            "input": [
			],
            "output": [
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Amazing Adventures",
        "body": {
            "question": "The amazing game Pokenom Go has just been released. Pokenom\n    trainers can now travel the world, capture Pokenom in the wild\n    and battle each other!Bash and Cee are two students who have recently dropped out\n    of university to pursue their childhood dream of becoming\n    Pokenom trainers. Today their amazing adventures begins!The world can be considered as a grid with $N$ rows and $M$ columns. Rows are numbered from\n    $1$ to $N$ from bottom to top, and columns\n    are numbered from $1$ to\n    $M$ from left to right.\n    The cell at $r$-th row and\n    $c$-th column is denoted\n    as $(r, c)$.Bash’s house is located at cell $(r_ B, c_ B)$. Today he will go to\n    the Pokenom Gym located at cell $(r_ G, c_ G)$ where he can battle\n    other Pokenom trainers. On the way to the Pokenom Gym, Bash\n    also wants to visit Cee’s house, located at cell $(r_ C, c_ C)$.Bash’s university is located at cell $(r_ U, c_ U)$. Bash does not want to\n    pass the university on the path to the Pokenom Gym, as that\n    will trigger Bash’s bad memories.In each step, Bash can only go in either $4$ directions (up, down, left and\n    right) to a cell which shares exactly one common edge with the\n    current cells. Hence, a path can be uniquely defined by a\n    string consisting of $4$\n    characters ‘U’, ‘D’, ‘L’, ‘R’ — representing the directions up,\n    down, left and right, respectively.A simple path is a path where no cells (including the\n    starting and ending cells) are visited more than once.Bash wants to find a simple path from cell $(r_ B, c_ B)$ to cell $(r_ G, c_ G)$, which passes through\n    cell $(r_ C, c_ C)$ but\n    not cell $(r_ U, c_ U)$.\n    Bash would like to use as few steps as possible. Please help\n    Bash!",
            "input": "The input contains multiple test cases. Each test case is\n    described by $6$\n    lines:\n      \n        The first line contains exactly $2$ integers $N$ and $M$, separated by a single space.\n        $(1 \\le M, N \\le\n        100)$.\n      \n      \n        The second line contains exactly $2$ integers $r_ B$ and $c_ B$, separated by a single\n        space.\n      \n      \n        The third line contains exactly $2$ integers $r_ C$ and $c_ C$, separated by a single\n        space.\n      \n      \n        The fourth line contains exactly $2$ integers $r_ G$ and $c_ G$, separated by a single\n        space.\n      \n      \n        The fifth line contains exactly $2$ integers $r_ U$ and $c_ U$, separated by a single\n        space.\n      \n      \n        The sixth line is a blank line.\n      \n      \n        $1 \\le r_ B, r_ C, r_ G,\n        r_ U \\le N, 1 \\le c_ B, c_ C, c_ G, c_ U \\le M$. The\n        $4$ cells $(r_ B, c_ B)$, $(r_ C, c_ C)$, $(r_ G, c_ G)$ and $(r_ U, c_ U)$ are pairwise\n        different.\n      \n    The input is terminated by a single line containing two\n    zeros.The sum of $M \\cdot N$\n    over all test cases does not exceed $10^5$.",
            "output": "For each test case, if it is impossible to find a path\n    satisfying all the given constraints, print exactly one line\n    with the word ‘NO’. Otherwise, print $2$ lines:\n      \n        The first line contains the word ‘YES’.\n      \n      \n        The second line contains a string presenting Bash’s\n        shortest simple path.\n      \n    If there are multiple shortest simple paths, you can output\n    any of them.Sample Illustration"
        },
        "table": {
            "input": [
                "3 3\n1 1\n3 3\n2 1\n2 2\n\n3 4\n1 1\n3 4\n2 1\n1 2\n\n2 2\n2 1\n2 2\n1 2\n1 1\n\n0 0\n"
            ],
            "output": [
                "YES\nRRUULLD\nNO\nYES\nRD\n"
            ]
        },
        "sidebar": {
            "problemID": "amazingadventures",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.1"
        },
        "content": {
            "author": "The 2018 ICPC Asia Hanoi Regional Contest",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3 3\n1 1\n3 3\n2 1\n2 2\n\n3 4\n1 1\n3 4\n2 1\n1 2\n\n2 2\n2 1\n2 2\n1 2\n1 1\n\n0 0\n"
            ],
            "output": [
                "YES\nRRUULLD\nNO\nYES\nRD\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Amazing Race",
        "body": {
            "question": "The scavenger hunt must be completed within $T$ minutes. That is, the time between\n    leaving the starting location and arriving at the ending\n    location must be no more than $T$ minutes. In addition, some tasks\n    have a specific deadline $d_\n    i$, meaning that the task must be completed within\n    $d_ i$ minutes since\n    leaving the starting location. Again, note that if a competitor\n    arrives at location $i$,\n    the task at location $i$\n    must be performed. If the competitor were to arrive at the\n    location too late and would not finish the task at that\n    location by the deadline, then the competitor would not be\n    allowed to travel to the location at all.What is the maximum total number of points that can be\n    obtained from the tasks?",
            "input": "The input consists of one case. The first line of input\n    contains two positive integers $n$ and $T$ ($T\n    \\leq 1440$). Each of the next $n$ lines contains three integers\n    $p_ i$ ($1 \\leq p_ i \\leq 100$), $t_ i$ ($1 \\leq t_ i \\leq 1440$), and\n    $d_ i$ ($-1 \\leq d_ i \\leq 1440$). If\n    $d_ i = -1$ then there is\n    no deadline for task $i$.\n    Finally, the last $n+2$\n    lines each contains $n+2$\n    nonnegative integers. The entry in the $i$th row and $j$th column is the number of minutes\n    ($\\leq 1440$) it takes to\n    travel from location $i$\n    to location $j$. The\n    indices of the starting and ending locations are $n+1$ and $n+2$, respectively.It is guaranteed that the time to travel from a location to\n    itself is $0$, but the\n    time to travel between two locations in different directions\n    may not be the same (e.g. uphill instead of downhill).",
            "output": "Print the maximum total number of points that can be\n    obtained on the first line. In the second line, print a set of\n    indices of the tasks that need to be performed to achieve this\n    maximum. The list of tasks should be sorted by the indices of\n    the tasks (not by the order in which they are performed). The\n    indices should be separated by a single space. If there are\n    multiple sets of tasks that can achieve the maximum, print the\n    one that is lexicographically smallest. That is, if two sets of\n    tasks achieve the same maximum, the index of the first task in\n    the set should be as small as possible. If there is a tie, the\n    index of the second task in the set should be as small as\n    possible, and so on.If the maximum number of points that can be obtained is\n    $0$, output a blank line\n    for the indices of the tasks to be performed.If there is no way of travelling from the starting location\n    to the ending location within $T$ minutes, print $0$."
        },
        "table": {
            "input": [
                "3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n",
                "5 696\n96 88 532\n99 70 519\n96 66 637\n90 92 592\n95 94 -1\n0 67 80 81 60 83 61\n72 0 99 68 85 93 82\n100 91 0 88 99 70 68\n69 65 77 0 65 68 75\n63 65 91 96 0 92 100\n65 76 85 62 89 0 75\n93 83 74 65 88 84 0\n"
            ],
            "output": [
                "99\n3\n",
                "386\n1 2 3 5\n"
            ]
        },
        "sidebar": {
            "problemID": "race",
            "CPU": " 6 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.6"
        },
        "content": {
            "author": "Howard Cheng",
            "source": "Rocky Mountain Regional Contest (RMRC) 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n",
                "5 696\n96 88 532\n99 70 519\n96 66 637\n90 92 592\n95 94 -1\n0 67 80 81 60 83 61\n72 0 99 68 85 93 82\n100 91 0 88 99 70 68\n69 65 77 0 65 68 75\n63 65 91 96 0 92 100\n65 76 85 62 89 0 75\n93 83 74 65 88 84 0\n"
            ],
            "output": [
                "99\n3\n",
                "386\n1 2 3 5\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Ambiguous Result",
        "body": {
            "question": "The ACM (Advanced Cosmos Monitor) recorded a set of messages\n    transmitted by alien race of Space Invaders. Unfortunately, the\n    antenna used for recording only handles lower frequencies\n    representing numbers and two arithmetical operators in\n    space-invaderian language, while all parentheses (corresponding\n    to a high frequency) were lost.Since numbers are important for those 8-bit creatures, we\n    really need to know what number ranges these messages belong to\n    — please, write a program that can do this for us!",
            "input": "Input contains at most $1\\\n    500$ legal arithmetical expressions, each expression on\n    a separate line. Each expression consists only of non-negative\n    integers $x_ i$\n    ($0 \\leq x_ i \\leq 100$)\n    and binary operators “+” and\n    “*”. The expression starts with a\n    number, then the operators and numbers alternate, and the last\n    element is a number. Each expression contains $P$ numbers ($1 \\leq P \\leq 100$) and $P - 1$ operators. There are no\n    parentheses, no other operators, no unary operator, etc.The last input expression is followed by a line containing\n    the single word “END”.",
            "output": "For each input line (not counting the final END), output one line containing the minimum\n    and maximum values (separated by a single space) that are\n    achievable by adding parentheses to the input in a way that\n    forms a legal expression and computing the result of that\n    expression.For example, the minimum value for $2 + 1 \\cdot 0$ input is achieved by\n    $(2 + 1) \\cdot 0$ and the\n    maximum value is achieved by $2 +\n    (1 \\cdot 0)$. Therefore, you should print “0 2”.It is guaranteed that for any placement of parentheses, the\n    value of each parenthesis will be less than $2^{63}$. This means that also the\n    maximal result will be between $0$ and $2^{63} - 1$, inclusive."
        },
        "table": {
            "input": [
                "2+1*0\n3+2*5+1*7+16\n0\nEND\n"
            ],
            "output": [
                "0 2\n36 690\n0 0\n"
            ]
        },
        "sidebar": {
            "problemID": "result",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "7.6"
        },
        "content": {
            "author": "CTU Open 2011",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2+1*0\n3+2*5+1*7+16\n0\nEND\n"
            ],
            "output": [
                "0 2\n36 690\n0 0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Amsterdam Distance",
        "body": {
            "question": "Your friend from Manhattan is visiting you in Amsterdam.\n    Because she can only stay for a short while, she wants to see\n    as many tourist attractions in Amsterdam in as little time as\n    possible. To do that, she needs to be able to figure out how\n    long it takes her to walk from one landmark to another. In her\n    hometown, that is easy: to walk from point $m = (m_ x, m_ y)$ to point\n    $n = (n_ x, n_ y)$ in\n    Manhattan you need to walk a distance\\[ |n_ x - m_ x| + |n_ y - m_ y|, \\]since Manhattan looks like a rectangular grid of city\n    blocks. However, Amsterdam is not well approximated by a\n    rectangular grid. Therefore, you have taken it upon yourself to\n    figure out the shortest distances between attractions in\n    Amsterdam. With its canals, Amsterdam looks much more like a\n    half-disc, with streets radiating at regular angles from the\n    center, and with canals running the arc of the circle at\n    equally spaced intervals. A street corner is given by the\n    intersection of a circular canal and a street which radiates\n    from the city center.\n      \n        \n\n        \n          Figure 1: The first sample input.\n        \n      \n    Depending on how accurately you want to model the street\n    plan of Amsterdam, you can split the city into more or fewer\n    half rings, and into more or fewer segments. Also, to avoid\n    conversion problems, you want your program to work with any\n    unit, given as the radius of the half circle. Can you help your\n    friend by writing a program which computes the distance between\n    any two street corners in Amsterdam, for a particular\n    approximation?",
            "input": "The input consists of\n      \n        One line with two integers $M,N$ and a real number\n        $R$.\n\n        \n          \n            $1 \\leq M \\leq\n            100$ is the number of segments (or ‘pie slices’)\n            the model of the city is split into.\n          \n\n          \n            $1 \\leq N \\leq\n            100$ is the number of half rings the model of\n            the city is split into.\n          \n\n          \n            $1 \\leq R \\leq\n            1000$ is the radius of the city, given with at\n            most $15$ digits\n            after the decimal point.\n          \n        \n      \n\n      \n        One line with four integers, $a_ x, a_ y, b_ x, b_ y$, with\n        $0 \\leq a_ x, b_ x \\leq\n        M$, and $0 \\leq a_ y,\n        b_ y \\leq N$, the coordinates of two corners in the\n        model of Amsterdam.",
            "output": "Output a single line containing a single real number, the\n    least distance needed to travel from point $a$ to point $b$ following only the streets in the\n    model. The result should have an absolute or relative error of\n    at most $10^{-6}$."
        },
        "table": {
            "input": [
                "6 5 2.0\n1 3 4 2\n",
                "9 7 3.0\n1 5 9 5\n",
                "10 10 1.0\n2 0 6 0\n"
            ],
            "output": [
                "1.65663706143592\n",
                "4.28571428571429\n",
                "0\n"
            ]
        },
        "sidebar": {
            "problemID": "amsterdamdistance",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.8"
        },
        "content": {
            "author": "Mees de Vries",
            "source": "Benelux Algorithm Programming Contest (BAPC) 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "6 5 2.0\n1 3 4 2\n",
                "9 7 3.0\n1 5 9 5\n",
                "10 10 1.0\n2 0 6 0\n"
            ],
            "output": [
                "1.65663706143592\n",
                "4.28571428571429\n",
                "0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Multiplication Game",
        "body": {
            "question": "Stan and Ollie play the game of multiplication by\n    multiplying an integer $p$\n    by one of the numbers $2$\n    to $9$. Stan always starts\n    with $p = 1$, does his\n    multiplication, then Ollie multiplies the number, then Stan and\n    so on. Before a game starts, they draw an integer $n$ and the winner is who first\n    reaches $p \\ge n$.",
            "input": "Each line of input contains the integer $1 < n < 4\\, 294\\, 967\\, 295$.\n    There are at most $30$\n    lines of input.",
            "output": "For each line of input output one line eitherStan wins.\norOllie wins.\nassuming that both of them play perfectly."
        },
        "table": {
            "input": [
                "162\n17\n34012226\n"
            ],
            "output": [
                "Stan wins.\nOllie wins.\nStan wins.\n"
            ]
        },
        "sidebar": {
            "problemID": "amultiplicationgame",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.8"
        },
        "content": {
            "author": "Waterloo Programming Contest 2001-09-22",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "162\n17\n34012226\n"
            ],
            "output": [
                "Stan wins.\nOllie wins.\nStan wins.\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Anagram Counting",
        "body": {
            "question": "An anagram is a reordering of the letters in a word of\n    phrase. For example, you can rearrange the letters of\n    terraced to get the word retraced. Rearranging them some more will give\n    you the word cratered. You can even\n    make dactrere and redatrec, which are both anagrams of terraced even if they are not legitimate\n    English words.",
            "input": "Input contains up to $200$ words, one per line. Each word\n    consists of upper- and lower-case letters (a–z) and may have as\n    many as $100$ characters.\n    Input ends at end of file.",
            "output": "For every input word, output the total number of unique\n    anagrams that can be made from it. For the purpose of this\n    problem, upper- and lower-case letters are considered\n    distinct."
        },
        "table": {
            "input": [
                "at\nordeals\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmabcdefghijklm\nabcdABCDabcd\n"
            ],
            "output": [
                "2\n5040\n403291461126605635584000000\n49229914688306352000000\n29937600\n"
            ]
        },
        "sidebar": {
            "problemID": "anagramcounting",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.0"
        },
        "content": {
            "author": "David Sturgill",
            "source": "Baylor Competitive Learning course",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "at\nordeals\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmabcdefghijklm\nabcdABCDabcd\n"
            ],
            "output": [
                "2\n5040\n403291461126605635584000000\n49229914688306352000000\n29937600\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Andrew the Ant",
        "body": {
            "question": "Andrew the Ant is fascinated by the behavior of his friends.\n    Thousands of them are marching their paths on and on. They can\n    build highly organized ant-hills. Sometimes, however, they act\n    a little bit stupidly.Recently, Andrew watched his fellow ants marching on top of\n    a long piece of wood. He noticed their behavioral pattern is\n    very simple: Each ant walks slowly forward with a constant\n    speed of $1\\, \\mathrm{cm}$\n    per second. Whenever it meets another ant, both of them only\n    touch with their antennae and immediately turn around and walk\n    the opposite direction. If an ant comes to the end of the wood,\n    it falls down and does not affect other ants anymore.\n      \n        \n\n        \n          Figure 1: Picture of the third sample input at\n          time $0\\,\n          \\mathrm{s}$. In one second, the ants $E$ and $A$ meet at position\n          $2$ and change their\n          directions. The ant $A$ then meets $B$ in the next $1.5$ seconds. At the same time\n          ($2.5$ seconds after\n          the start), the ants $C$ and $D$ will meet too. All four of\n          them change their directions. In the next $0.5$ seconds (time $3\\, \\mathrm{s}$), the first ant\n          ($E$) falls down off\n          the left end, etc.\n        \n      \n    Your task is to simulate the movement of ants. For\n    simplicity, suppose that the ants have zero size (although the\n    picture could suggest something else).",
            "input": "The input consists of several scenarios, at most\n    $5$. Each scenario starts\n    with a line containing two integer numbers $L$ and $A$, separated by a space.\n    $L$ is the length of the\n    wood in centimetres ($1 \\leq L\n    \\leq 99\\, 999$), and $A$ is the number of ants at the\n    beginning of the simulation ($1\n    \\leq A \\leq L + 1$). Then there are $A$ lines, each containing a\n    non-negative integer $X_\n    i$, one space, and an uppercase letter. The number\n    ($0 \\leq X_ i \\leq L$)\n    specifies the position of the $i$-th ant and the letter its initial\n    direction: either “L” for left\n    (towards zero) or “R” for right. No\n    two ants will start at the same position.",
            "output": "For each scenario, you should print a single line containing\n    the text “The last ant will fall down in\n    $T$ seconds - started at\n    $P$.”, where\n    $T$ is the exact time when\n    the last ant (or two) reaches the end of the wood, and\n    $P$ is the position where\n    that particular ant has originally started in time $0$. If two last ants fall down at the\n    same time, print “started at $P$ and $Q$”, indicating both of their\n    positions, $P < Q$."
        },
        "table": {
            "input": [
                "90000 1\n0 R\n10 1\n0 L\n14 5\n3 L\n6 L\n13 L\n8 R\n1 R\n"
            ],
            "output": [
                "The last ant will fall down in 90000 seconds - started at 0.\nThe last ant will fall down in 0 seconds - started at 0.\nThe last ant will fall down in 13 seconds - started at 6 and 8.\n"
            ]
        },
        "sidebar": {
            "problemID": "andrewant",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.9"
        },
        "content": {
            "author": "CTU Open 2012",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "90000 1\n0 R\n10 1\n0 L\n14 5\n3 L\n6 L\n13 L\n8 R\n1 R\n"
            ],
            "output": [
                "The last ant will fall down in 90000 seconds - started at 0.\nThe last ant will fall down in 0 seconds - started at 0.\nThe last ant will fall down in 13 seconds - started at 6 and 8.\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A New Alphabet",
        "body": {
            "question": "A New Alphabet has been developed for Internet\n    communications. While the glyphs of the new alphabet don’t\n    necessarily improve communications in any meaningful way, they\n    certainly make us feel cooler.You are tasked with creating a translation program to speed\n    up the switch to our more elite New Alphabet by\n    automatically translating ASCII plaintext symbols to our new\n    symbol set.The new alphabet is a one-to-many translation (one character\n    of the English alphabet translates to anywhere between\n    $1$ and $6$ other characters), with each\n    character translation as follows:\n      \n        \n          \n          Original\n          \n\n          \n          New\n          \n\n          \n          English Description\n          \n\n          \n          Original\n          \n\n          \n          New\n          \n\n          \n          English Description\n          \n        \n\n        \n          \n          a\n          \n\n          \n          @\n          \n\n          \n          at symbol\n          \n\n          \n          n\n          \n\n          \n          []\\[]\n          \n\n          \n          brackets, backslash, brackets\n          \n        \n\n        \n          \n          b\n          \n\n          \n            8\n          \n\n          \n            digit eight\n          \n\n          \n            o\n          \n\n          \n            0\n          \n\n          \n            digit zero\n          \n        \n\n        \n          \n          c\n          \n\n          \n            (\n          \n\n          \n            open parenthesis\n          \n\n          \n            p\n          \n\n          \n            |D\n          \n\n          \n            bar, capital D\n          \n        \n\n        \n          \n          d\n          \n\n          \n            |)\n          \n\n          \n            bar, close parenthesis\n          \n\n          \n            q\n          \n\n          \n            (,)\n          \n\n          \n            parenthesis, comma, parenthesis\n          \n        \n\n        \n          \n          e\n          \n\n          \n            3\n          \n\n          \n            digit three\n          \n\n          \n            r\n          \n\n          \n            |Z\n          \n\n          \n            bar, capital Z\n          \n        \n\n        \n          \n          f\n          \n\n          \n            #\n          \n\n          \n            number sign (hash)\n          \n\n          \n            s\n          \n\n          \n            $\n          \n\n          \n            dollar sign\n          \n        \n\n        \n          \n          g\n          \n\n          \n            6\n          \n\n          \n            digit six\n          \n\n          \n            t\n          \n\n          \n            ']['\n          \n\n          \n            quote, brackets, quote\n          \n        \n\n        \n          \n          h\n          \n\n          \n            [-]\n          \n\n          \n            bracket, hyphen, bracket\n          \n\n          \n            u\n          \n\n          \n            |_|\n          \n\n          \n            bar, underscore, bar\n          \n        \n\n        \n          \n          i\n          \n\n          \n            |\n          \n\n          \n            bar\n          \n\n          \n            v\n          \n\n          \n            \\/\n          \n\n          \n            backslash, forward slash\n          \n        \n\n        \n          \n          j\n          \n\n          \n            _|\n          \n\n          \n            underscore, bar\n          \n\n          \n            w\n          \n\n          \n            \\/\\/\n          \n\n          \n            four slashes\n          \n        \n\n        \n          \n          k\n          \n\n          \n            |<\n          \n\n          \n            bar, less than\n          \n\n          \n            x\n          \n\n          \n            }{\n          \n\n          \n            curly braces\n          \n        \n\n        \n          \n          l\n          \n\n          \n            1\n          \n\n          \n            digit one\n          \n\n          \n            y\n          \n\n          \n            `/\n          \n\n          \n            backtick, forward slash\n          \n        \n\n        \n          \n          m\n          \n\n          \n          []\\/[]\n          \n\n          \n          brackets, slashes, brackets\n          \n\n          \n          z\n          \n\n          \n          2\n          \n\n          \n          digit two\n          \n        \n      \n    For instance, translating the string “Hello World!” would\n    result in:\n      [-]3110 \\/\\/0|Z1|)!\n    Note that uppercase and lowercase letters are both\n    converted, and any other characters remain the same (the\n    exclamation point and space in this example).",
            "input": "Input contains one line of text, terminated by a newline.\n    The text may contain any characters in the ASCII range\n    $32$–$126$ (space through tilde), as well\n    as $9$ (tab). Only\n    characters listed in the above table (A–Z, a–z) should be\n    translated; any non-alphabet characters should be printed (and\n    not modified). Input has at most $10\\, 000$ characters.",
            "output": "Output the input text with each letter (lowercase and\n    uppercase) translated into its New Alphabet counterpart."
        },
        "table": {
            "input": [
                "All your base are belong to us.\n",
                "What's the Frequency, Kenneth?\n",
                "A new alphabet!\n"
            ],
            "output": [
                "@11 `/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n",
                "\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n",
                "@ []\\[]3\\/\\/ @1|D[-]@83']['!\n"
            ]
        },
        "sidebar": {
            "problemID": "anewalphabet",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.8"
        },
        "content": {
            "author": "Kathleen EricsonJoshua T. Guerin",
            "source": "2016 ICPC North American Qualifier Contest",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "All your base are belong to us.\n",
                "What's the Frequency, Kenneth?\n",
                "A new alphabet!\n"
            ],
            "output": [
                "@11 `/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n",
                "\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n",
                "@ []\\[]3\\/\\/ @1|D[-]@83']['!\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "An I for an Eye",
        "body": {
            "question": "Ken has been having trouble lately staying under the word\n    limit in Twitter, so he’s decided to write a little front-end\n    program which will take in text and shorten it using a fixed\n    set of abbreviations for commonly used letter sequences. Those\n    abbreviations are shown in the table below:The character ...\n          \n          \n            ... substitutes for\n          \n        \n        \n          \n           \n          \n            the letter sequence\n          \n        \n        \n          \n            @\n          \n          \n            at\n          \n        \n        \n          \n            &\n          \n          \n            and\n          \n        \n        \n          \n            1\n          \n          \n            one, won\n          \n        \n        \n          \n            2\n          \n          \n            to, too, two\n          \n        \n        \n          \n            4\n          \n          \n            for, four\n          \n        \n        \n          \n            b\n          \n          \n            bea, be, bee\n          \n        \n        \n          \n            c\n          \n          \n            sea, see\n          \n        \n        \n          \n            i\n          \n          \n            eye\n          \n        \n        \n          \n            o\n          \n          \n            oh, owe\n          \n        \n        \n          \n            r\n          \n          \n            are\n          \n        \n        \n          \n            u\n          \n          \n            you\n          \n        \n        \n          \n            y\n          \n          \n            why\n          \n        \n      \n    Ken is about to start writing this program when he realizes\n    that the extent of his computer knowledge is ... well ... using\n    Twitter. He’s looking for someone to help him – r u [email protected] some1?",
            "input": "Input starts with a single integer $n$ indicating the number of lines of\n    text to process. Following this are $n$ lines of text. Each line will\n    contain only alphanumeric characters and spaces, and each line\n    will have at least one non-space character. Each line has at\n    most $200$ characters.",
            "output": "Display each line with the appropriate substitutions made.\n    Substitutions should also be made inside words, e.g., the word\n    that should be changed to [email protected]. If two letter sequences overlap (like at and to in the word baton) just replace the first one (in this case\n    resulting in [email protected]). If two letter sequences\n    start at the same location (like be and\n    bee in been) replace\n    the longer one (in this case resulting in bn). If the letter sequence starts with an upper-case\n    letter, then the abbreviation should also be in upper-case (if\n    appropriate). Finally, no substituted letter should later be\n    part of another substitution. For example, if the input is\n    oweh, you would first replace the\n    owe with an o to get\n    oh. At this point you do NOT replace the\n    oh with an o since the\n    oh contains a substituted letter."
        },
        "table": {
            "input": [
                "3\nOh say can you see\nI do not understand why you are so cranky just because Karel won\nFormation\n"
            ],
            "output": [
                "O say can u c\nI do not underst& y u r so cranky just bcause Krl 1\n[email protected]\n"
            ]
        },
        "sidebar": {
            "problemID": "iforaneye",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.4"
        },
        "content": {
            "author": "John Bonomo",
            "source": "2018 ICPC East-Central NA Regional Practice Contest",
            "license": "https://licensebuttons.net/p/zero/1.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3\nOh say can you see\nI do not understand why you are so cranky just because Karel won\nFormation\n"
            ],
            "output": [
                "O say can u c\nI do not underst& y u r so cranky just bcause Krl 1\n[email protected]\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Animal Classification",
        "body": {
            "question": "Alice and Bob are biologists. They like to group animals\n    using classification trees. A classification tree is a binary\n    tree where the leaves are labeled by the animals.For example, Figure 1 below shows the classification of\n    $5$ animals (labeled as\n    $1, 2, 3, 4, 5$) by Alice\n    and Bob. Alice’s classification has nine groups: $\\{ 1\\} $, $\\{ 2\\} $, $\\{ 3\\} $, $\\{ 4\\} $, $\\{ 5\\} $, $\\{ 2, 5\\} $, $\\{ 1, 2, 5\\} $, $\\{ 1, 2, 3, 5\\} $ and $\\{ 1, 2, 3, 4, 5\\} $. Bob’s\n    classification also has nine groups: $\\{ 1\\} $, $\\{ 2\\} $, $\\{ 3\\} $, $\\{ 4\\} $, $\\{ 5\\} $, $\\{ 1, 5\\} $, $\\{ 2, 3\\} $, $\\{ 1, 2, 3, 5\\} $ and $\\{ 1, 2, 3, 4, 5\\} $.\n      \n        \n\n        \n          Figure 1: Illustration of Sample Input 1\n        \n      \n    As you can observe, Alice and Bob classify the animals\n    differently. Carol is interested to know the number of common\n    groups between the classifications of Alice and Bob. For the\n    above example, there are $7$ common groups. They are:\n    $\\{ 1\\} $, $\\{ 2\\} $, $\\{ 3\\} $, $\\{ 4\\} $, $\\{ 5\\} $, $\\{ 1, 2, 3, 5\\} $ and $\\{ 1, 2, 3, 4, 5\\} $.Carol usually counts the number of common goups by hand. On\n    one day, an outer space alien came to our earth. He asked Alice\n    and Bob to classify aliens in outer space. The number\n    $N$ of aliens can be as\n    big as $100\\, 000$. It is\n    impossible to count the number of common goups by hand now. Can\n    you make a program to help Carol?",
            "input": "The input consists of three lines:\n      \n        one line with one integer $N$ ($1 \\leq N \\leq 100\\, 000$)\n      \n\n      \n        the classification tree of Alice\n      \n\n      \n        the classification tree of Bob\n      \n    Note that both classification trees are leaf-labeled by\n    $1$ to $N$. The tree is represented by the\n    parathesis encoding. (Note that the encoding only have numbers\n    and $3$ symbols, that is,\n    ‘(’, ‘)’, ‘,’.) For the example in Figure 1, see Sample\n    Input 1.",
            "output": "Output one line with a single integer that represents the\n    number of common groups between Alice and Bob’s classification\n    trees."
        },
        "table": {
            "input": [
                "5\n((3,(1,(5,2))),4)\n(((5,1),(2,3)),4)\n",
                "10\n(1,(2,(3,(4,(5,(6,(7,(8,(9,10)))))))))\n(((((((((1,2),3),4),5),6),7),8),9),10)\n",
                "10\n(10,(9,(8,(7,(6,(5,(4,(3,(2,1)))))))))\n(((((((((1,2),3),4),5),6),7),8),9),10)\n"
            ],
            "output": [
                "7\n",
                "11\n",
                "19\n"
            ]
        },
        "sidebar": {
            "problemID": "animal",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.5"
        },
        "content": {
            "author": "Wing-Kin Sung",
            "source": "ICPC SG Preliminary Contest 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "5\n((3,(1,(5,2))),4)\n(((5,1),(2,3)),4)\n",
                "10\n(1,(2,(3,(4,(5,(6,(7,(8,(9,10)))))))))\n(((((((((1,2),3),4),5),6),7),8),9),10)\n",
                "10\n(10,(9,(8,(7,(6,(5,(4,(3,(2,1)))))))))\n(((((((((1,2),3),4),5),6),7),8),9),10)\n"
            ],
            "output": [
                "7\n",
                "11\n",
                "19\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "An Industrial Spy",
        "body": {
            "question": "Industrial spying is very common for modern research labs. I\n    am such an industrial spy – don’t tell anybody! My recent job\n    was to steal the latest inventions from a famous math research\n    lab. It was hard to obtain some of their results but I got\n    their waste out of a document shredder.I have already reconstructed that their research topic is\n    fast factorization. But the remaining paper snippets only have\n    single digits on it and I cannot imagine what they are for.\n    Could it be that those digits form prime numbers? Please help\n    me to find out how many prime numbers can be formed using the\n    given digits.",
            "input": "The first line of the input holds the number of test cases\n    $c$ ($1 \\le c \\le 200$). Each test case\n    consists of a single line. This line contains the digits (at\n    least one, at most seven) that are on the paper snippets.",
            "output": "For each test case, print one line containing the number of\n    different primes that can be reconstructed by shuffling the\n    digits. You may ignore digits while reconstructing the primes\n    (e.g., if you get the digits 7 and 1, you can reconstruct three\n    primes 7, 17, and 71). Reconstructed numbers that (regarded as\n    strings) differ just by leading zeros, are considered identical\n    (see the fourth case of the sample input)."
        },
        "table": {
            "input": [
                "4\n17\n1276543\n9999999\n011\n"
            ],
            "output": [
                "3\n1336\n0\n2\n"
            ]
        },
        "sidebar": {
            "problemID": "industrialspy",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "3.2"
        },
        "content": {
            "author": "Tobias Werth",
            "source": "Northwestern Europe Contest (NWERC) 2009",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n17\n1276543\n9999999\n011\n"
            ],
            "output": [
                "3\n1336\n0\n2\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Another Brick in the Wall",
        "body": {
            "question": "The construction worker previously known as Lars has many\n    bricks of height $1$ and\n    different lengths, and he is now trying to build a wall of\n    width $w$ and height\n    $h$. Since the\n    construction worker previously known as Lars knows that the\n    subset sum problem is $\\mathsf{NP}$-hard, he does not try to\n    optimize the placement but he just lays the bricks in the order\n    they are in his pile and hopes for the best. First he places\n    the bricks in the first layer, left to right; after the first\n    layer is complete he moves to the second layer and completes\n    it, and so on. He only lays bricks horizontally, without\n    rotating them. If at some point he cannot place a brick and has\n    to leave a layer incomplete, then he gets annoyed and leaves.\n    It does not matter if he has bricks left over after he\n    finishes.Yesterday the construction worker previously known as Lars\n    got really annoyed when he realized that he could not complete\n    the wall only at the last layer, so he tore it down and asked\n    you for help. Can you tell whether the construction worker\n    previously known as Lars will complete the wall with the new\n    pile of bricks he has today?",
            "input": "The first line contains three integers $h$, $w$, $n$ ($1\n    \\leq h \\leq 100$, $1 \\leq\n    w \\leq 100$, $1 \\leq n\n    \\leq 10\\, 000$), the height of the wall, the width of\n    the wall, and the number of bricks respectively. The second\n    line contains $n$ integers\n    $x_ i$ ($1 \\leq x_ i \\leq 10$), the length of\n    each brick.",
            "output": "Output YES if the construction\n    worker previously known as Lars will complete the wall, and\n    NO otherwise."
        },
        "table": {
            "input": [
                "2 10 7\n5 5 5 5 5 5 5\n",
                "2 10 7\n5 5 5 3 5 2 2\n"
            ],
            "output": [
                "YES\n",
                "NO\n"
            ]
        },
        "sidebar": {
            "problemID": "anotherbrick",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.9"
        },
        "content": {
            "author": "Marc Vinyals",
            "source": "KTH Challenge 2016",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "2 10 7\n5 5 5 5 5 5 5\n",
                "2 10 7\n5 5 5 3 5 2 2\n"
            ],
            "output": [
                "YES\n",
                "NO\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Another Candies",
        "body": {
            "question": "A class went to a school trip. And, as usually, all\n    $N$ kids have got their\n    backpacks stuffed with candy. But soon quarrels started all\n    over the place, as some of the kids had more candies than\n    others. Soon, the teacher realized that he has to step in:\n    \"Everybody, listen! Put all the candies you have on this table\n    here!\"Soon, there was quite a large heap of candies on the\n    teacher’s table. \"Now, I will divide the candies into\n    $N$ equal heaps and\n    everyone will get one of them.\" announced the teacher.\"Wait, is this really possible?\" wondered some of the\n    smarter kids.",
            "input": "You are given the number of candies each child brought. Find\n    out whether the teacher can divide the candies into\n    $N$ exactly equal heaps.\n    (For the purpose of this task, all candies are of the same\n    type.)",
            "output": "The first line of the input file contains an integer\n    $T, 1\\le T \\le 100$\n    specifying the number of test cases. Each test case is preceded\n    by a blank line.Each test case looks as follows: The first line contains\n    $N, 1\\le N \\le 20\\, 000$ –\n    the number of children. Each of the next $N$ lines contains the number of\n    candies one child brought. Each child has less than\n    $2^{63}$.OutputFor each of the test cases output a single line with a\n    single word \"YES\" if the candies can be\n    distributed equally, or \"NO\" otherwise."
        },
        "table": {
            "input": [
                "2\n\n5\n5\n2\n7\n3\n8\n\n6\n7\n11\n2\n7\n3\n4\n"
            ],
            "output": [
                "YES\nNO\n"
            ]
        },
        "sidebar": {
            "problemID": "anothercandies",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.0"
        },
        "content": {
            "author": "Michal Forišek",
            "source": "IPSC 2006",
            "license": "https://licensebuttons.net/l/by/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n\n5\n5\n2\n7\n3\n8\n\n6\n7\n11\n2\n7\n3\n4\n"
            ],
            "output": [
                "YES\nNO\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Another Dice Game",
        "body": {
            "question": "In the game Pickomino1 one has to\n    throw 8 dice to reach at least a certain target score. The\n    rules are as follows:The dice contain the values 1, 2,\n        3, 4, 5 and worm. The\n        dice are fair, so all outcomes are equally likely.\n      \n\n      \n        The game is started by throwing all dice.\n      \n\n      \n        After a throw, the player must pick one of the six\n        possible values and put all dice with this value aside.\n        There must be at least one die with this value.\n      \n\n      \n        After putting some dice aside, the player may choose to\n        either throw the remaining dice again or stop. The player\n        may only stop after at least one worm has been put\n        aside.\n      \n\n      \n        Each possible value may only be chosen once during the\n        game.\n      \n\n      \n        When the player stops, his total score is the sum of the\n        values of the dice that were put aside. A worm is\n        worth 5 points.\n      \n\n      \n        The player can get stuck by throwing only values that\n        were already put aside, by having put all dice aside but\n        not having a worm or by not having reached the\n        target score.\n      \n\n      \n        If the player is stuck he scores 0 points and the game\n        is ended.\n      \n    Jan is playing Pickomino and wants to score at least\n    $n$ points. When Jan uses\n    an optimal strategy, what is the probability that he reaches\n    this target?",
            "input": "On the first line one positive number: the number of test\n    cases, at most 100. After that per test case:\n      \n        one line with the integer $n$ $(1\\le n \\le 40)$: the target\n        value.",
            "output": "Per test case:\n      \n        one line with a floating point number: the probability\n        that you score at least $n$ points when using an optimal\n        strategy.\n      \n    This number should be accurate up to $10^{-6}$ relative or absolute\n    precision."
        },
        "table": {
            "input": [
                "3\n5\n21\n40\n"
            ],
            "output": [
                "0.9934260978934218\n0.8930267371507457\n0.0001461079070016448\n"
            ]
        },
        "sidebar": {
            "problemID": "anotherdice",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "3.4"
        },
        "content": {
            "author": "Benelux Algorithm Programming Contest (BAPC) 2012",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "",
            "input": [
                "3\n5\n21\n40\n"
            ],
            "output": [
                "0.9934260978934218\n0.8930267371507457\n0.0001461079070016448\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Another Query on Array Problem",
        "body": {
            "question": "Given an array of integers $A_1, A_2, \\ldots , A_ N$ and the\n    initial value of all elements are $0$. Now you are given $M$ queries, each belongs to one of\n    three following types:$0$ $x$ $y$: Find the sum of all elements\n        from index $x$ to\n        index $y$ modulo\n        $10^9+7$\n      \n\n      \n        $1$ $x$ $y$: Add $1 \\times 2 \\times 3$ to\n        $A_ x$, add\n        $2 \\times 3 \\times 4$\n        to $A_{x+1}$, …, add\n        $(i+1) \\times (i + 2) \\times\n        (i+3)$ to $A_{x+i}$ and so on until\n        $A_ y$\n      \n\n      \n        $2$ $x$ $y$: Subtract $1 \\times 2 \\times 3$ from\n        $A_ x$, subtract\n        $2 \\times 3 \\times 4$\n        from $A_{x+1}$, …,\n        subtract $(i+1) \\times (i+2)\n        \\times (i+3)$ from $A_{x+i}$ and so on until\n        $A_ y$",
            "input": "The first line contains two integers $N$ and $M$ ($1\n    \\leq N, M \\leq 10^5$) - the size of the array and the\n    number of queries, respectively.Each of the next M lines containts three integers\n    $t$ $x$ $y$ denotes type and range of the\n    query.",
            "output": "For each query of type $0$, print the required answer in a\n    single line.Sample ClarificationIn the example below:\n      \n        After the first query, the array is $[6, 24, 60, 120, 210, 336, 504,\n        720]$.\n      \n\n      \n        The answer for the second query is $24+60+120+210+336+504+720=1\\,\n        974$.\n      \n\n      \n        After the third query, the array is $[6, 24, 60, 114, 186, 276, 504,\n        720]$.\n      \n\n      \n        The answer for the last query is $186+276=462$"
        },
        "table": {
            "input": [
                "8 4\n1 1 8\n0 2 8\n2 4 6\n0 5 6\n"
            ],
            "output": [
                "1974\n462\n"
            ]
        },
        "sidebar": {
            "problemID": "queryonarray",
            "CPU": " 3 seconds",
            "memory": " 256 MB",
            "difficulty": "7.8"
        },
        "content": {
            "author": "The 2017 ACM - ICPC Vietnam National Programming Contest",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "8 4\n1 1 8\n0 2 8\n2 4 6\n0 5 6\n"
            ],
            "output": [
                "1974\n462\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Antenna Placement",
        "body": {
            "question": "The Global Aerial Research Centre has been allotted the task\n    of building the fifth generation of mobile phone nets in\n    Sweden. The most striking reason why they got the job, is their\n    discovery of a new, highly noise resistant, antenna. It is\n    called 4DAir, and comes in four types. Each type can only\n    transmit and receive signals in a direction aligned with a\n    (slightly skewed) latitudinal and longitudinal grid, because of\n    the interacting electromagnetic field of the earth. The four\n    types correspond to antennas operating in the directions north,\n    west, south, and east, respectively. Below is an example\n    picture of places of interest, depicted by twelve small rings,\n    and nine 4DAir antennas depicted by ellipses covering them.Obviously, it is desirable to use as few antennas as\n    possible, but still provide coverage for each place of\n    interest. We model the problem as follows: Let $A$ be a rectangular matrix describing\n    the surface of Sweden, where an entry of $A$ either is a point of interest,\n    which must be covered by at least one antenna, or empty space.\n    Antennas can only be positioned at an entry in $A$. When an antenna is placed at row\n    $r$ and column\n    $c$, this entry is\n    considered covered, but also one of the neighbouring entries\n    $(c+1,r)$, $(c,r+1)$, $(c-1,r)$, or $(c,r-1)$, is covered depending on the\n    type chosen for this particular antenna. What is the least\n    number of antennas for which there exists a placement in\n    $A$ such that all points\n    of interest are covered?",
            "input": "On the first row of input is a single positive integer\n    $1 \\le n \\le 20$,\n    specifying the number of scenarios that follow. Each scenario\n    begins with a row containing two positive integers $h$ and $w$, with $2 \\le h \\le 50$ and $1 \\le w \\le 10$. Thereafter is a\n    matrix presented, describing the points of interest in Sweden\n    in the form of $h$ lines,\n    each containing $w$\n    characters from the set $\\{\n    \\texttt{*}, \\texttt{o}\\} $. A ‘*’-character symbolises a point of interest,\n    whereas a ‘o’-character represents\n    open space.",
            "output": "For each scenario, output the minimum number of antennas\n    necessary to cover all ‘*’-entries in\n    the scenario’s matrix, on a row of its own."
        },
        "table": {
            "input": [
                "2\n7 9\nooo**oooo\n**oo*ooo*\no*oo**o**\nooooooooo\n*******oo\no*o*oo*oo\n*******oo\n10 1\n*\n*\n*\no\n*\n*\n*\n*\n*\n*\n"
            ],
            "output": [
                "17\n5\n"
            ]
        },
        "sidebar": {
            "problemID": "antennaplacement",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.9"
        },
        "content": {
            "author": "Swedish Championships 2001",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n7 9\nooo**oooo\n**oo*ooo*\no*oo**o**\nooooooooo\n*******oo\no*o*oo*oo\n*******oo\n10 1\n*\n*\n*\no\n*\n*\n*\n*\n*\n*\n"
            ],
            "output": [
                "17\n5\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Anthony and Cora",
        "body": {
            "question": "Anthony and Cora play a very exciting game. Initially,\n    Anthony has $N$ points and\n    Cora has $M$ points. The\n    game then goes on for several rounds, during each round, either\n    Anthony wins or Cora wins, the loser of the round loses\n    $1$ point while nothing\n    happens to the winner of the round. The game ends when either\n    Anthony or Cora has no points left, and the one still left with\n    points is the winner of the game.Cora promises Anthony a sweet prize if he wins the game, but\n    will cruelly humiliate Anthony if he loses. Anthony can very\n    accurately evaluate himself and perfectly predict that his\n    probability of winning the round $i$ is exactly $p_ i$. Now, in order to decide\n    whether to play this game with Cora or not, he needs to know\n    the probability of him winning the game.Help Anthony find his probability of winning!",
            "input": "The first line contain integers $1\\leq N,M\\leq 1\\, 000$. $N+M-1$ lines follow, with the\n    $i$-th line containing\n    $0\\leq p_ i\\leq 1$,\n    $p_ i$ has at most\n    $6$ decimal digits.",
            "output": "Output a single line containing the probability of Anthony\n    winning this game. Your answer will be considered correct if\n    its absolute or relative error doesn’t exceed $10^{-6}$."
        },
        "table": {
            "input": [
                "1 1\n0.500000\n",
                "3 2\n1.000000\n0.000000\n1.000000\n0.000000\n"
            ],
            "output": [
                "0.500000\n",
                "1.000000\n"
            ]
        },
        "sidebar": {
            "problemID": "anthony",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.5"
        },
        "content": {
            "author": "Modan Han",
            "source": "Calgary Collegiate Programming Contest 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1 1\n0.500000\n",
                "3 2\n1.000000\n0.000000\n1.000000\n0.000000\n"
            ],
            "output": [
                "0.500000\n",
                "1.000000\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Anthony and Diablo",
        "body": {
            "question": "Anthony has a pet hamster named Diablo. Diablo enjoys having\n    lots of space to move around, so Anthony wants to build him a\n    cage that covers as much area as possible.However, Diablo also likes to dig and hide very much, and\n    when he does, it is an absolute pain for Anthony to find Diablo\n    (Diablo is very good at hiding). Therefore, Anthony wants to\n    make sure the cage he builds for Diablo is not too big. In\n    particular, Anthony wants to make sure the area of the cage is\n    exactly $A$ square meters;\n    any area larger than $A$\n    square meters will be too much work to find Diablo when he\n    hides, any area smaller than $A$ square meters will be too\n    uncomfortable for Diablo.Anthony has $N$ meters\n    of fencing that can be cut/bent at any point, and wonders if it\n    is possible to build a cage of any shape that has area\n    exactly $A$ with the\n    materials he has. Write a program to help him out!",
            "input": "The input contains two real numbers $0<A\\leq 100$ and $0\\leq N\\leq 1000$.",
            "output": "Output a single line with “Diablo is happy!” if Anthony can\n    build his cage for Diablo, “Need more materials!”\n    otherwise."
        },
        "table": {
            "input": [
                "1.000000 4.000000\n",
                "1.000000 0.000000\n"
            ],
            "output": [
                "Diablo is happy!\n",
                "Need more materials!\n"
            ]
        },
        "sidebar": {
            "problemID": "anthonyanddiablo",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.4"
        },
        "content": {
            "author": "Modan Han",
            "source": "Alberta Collegiate Programming Contest 2017",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "1.000000 4.000000\n",
                "1.000000 0.000000\n"
            ],
            "output": [
                "Diablo is happy!\n",
                "Need more materials!\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Antiarithmetic?",
        "body": {
            "question": "A sequence $a_{1}, a_{2},\n    a_{3}, \\ldots $ is an arithmetic progression if there\n    exists a constant $c$ such\n    that $a_{i} - a_{i+1} = c$\n    for $i = 1, 2, 3, \\ldots\n    $.A permutation of $n$ is\n    a bijective function of the initial $n$ natural numbers: $0, 1, \\ldots n-1$. A permutation\n    $p$ is called\n    antiarithmetic if there is no subsequence of it forming an\n    arithmetic progression of length greater than $2$, i.e., there are no three indices\n    $0 \\le i < j < k <\n    n$ such that $(p_{i} ,\n    p_{j} , p_{k})$ forms an arithmetic progression.For example, the sequence $(2,\n    0, 1, 4, 3)$ is an antiarithmetic permutation of\n    $5$. The sequence\n    $(0, 5, 4, 3, 1, 2)$ is\n    not an antiarithmetic permutation as its first, fifth and sixth\n    term $(0, 1, 2)$ form an\n    arithmetic progression; and so do its second, forth and fifth\n    term $(5, 3, 1)$.Your task is to check whether a given permutation of\n    $n$ is antiarithmetic.",
            "input": "There are several test cases (at most $5$), followed by a line containing\n    $0$. Each test case is a\n    line of the input file containing a natural number $3 \\le n \\le 10\\, 000$ followed by a\n    colon and then followed by $n$ distinct numbers separated by\n    whitespace. All $n$\n    numbers are nonnegative integers smaller than $n$.",
            "output": "For each test case output one line with yes or no stating\n    whether the permutation is antiarithmetic or not."
        },
        "table": {
            "input": [
                "3: 0 2 1\n5: 2 0 1 3 4\n6: 2 4 3 5 0 1\n0\n"
            ],
            "output": [
                "yes\nno\nyes\n"
            ]
        },
        "sidebar": {
            "problemID": "antiarithmetic",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "7.2"
        },
        "content": {
            "author": "Piotr Rudnicki",
            "source": "Waterloo Programming Contest 2004-09-25",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "3: 0 2 1\n5: 2 0 1 3 4\n6: 2 4 3 5 0 1\n0\n"
            ],
            "output": [
                "yes\nno\nyes\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Ants",
        "body": {
            "question": "An army of ants walk on a horizontal pole of length\n    $l$ cm, each with a\n    constant speed of $1$\n    cm/s. When a walking ant reaches an end of the pole, it\n    immediatelly falls off it. When two ants meet they turn back\n    and start walking in opposite directions. We know the original\n    positions of ants on the pole, unfortunately, we do not know\n    the directions in which the ants are walking. Your task is to\n    compute the earliest and the latest possible times needed for\n    all ants to fall off the pole.",
            "input": "The first line of input contains one integer giving the\n    number of cases that follow, at most 100. The data for each\n    case start with two integer numbers: the length $l$ of the pole (in cm) and\n    $n$, the number of ants\n    residing on the pole. These two numbers are followed by\n    $n$ integers giving the\n    position of each ant on the pole as the distance measured from\n    the left end of the pole, in no particular order. All input\n    integers are between $0$\n    and $1\\, 000\\, 000$ and\n    they are separated by whitespace.",
            "output": "For each case of input, output two numbers separated by a\n    single space. The first number is the earliest possible time\n    when all ants fall off the pole (if the directions of their\n    walks are chosen appropriately) and the second number is the\n    latest possible such time."
        },
        "table": {
            "input": [
                "2\n10 3\n2 6 7\n214 7\n11 12 7 13\n176 23 191\n"
            ],
            "output": [
                "4 8\n38 207\n"
            ]
        },
        "sidebar": {
            "problemID": "ants",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "2.4"
        },
        "content": {
            "author": "Piotr Rudnicki",
            "source": "Waterloo Programming Contest 2004-09-19",
            "license": "https://licensebuttons.net/l/by/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\n10 3\n2 6 7\n214 7\n11 12 7 13\n176 23 191\n"
            ],
            "output": [
                "4 8\n38 207\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Apaxiaaaaaaaaaaaans!",
        "body": {
            "question": "The ancient and mysterious Apaxian civilization, which we\n    most certainly did not make up, continues to confound the\n    researchers at the Oriental Institute. It turns out that the\n    Apaxians had a peculiar naming system: the more letters in your\n    name, the higher your status in society. So, in Apaxian\n    society, robert was probably a lowly\n    servant, and robertapalaxiamethostenes was likely a High\n    Priest or Minister. Even more than that, Apaxians valued the\n    number of adjacent letters that were the same in a name. So,\n    while robert continues to be an\n    unimpressive name, roooooooooobert\n    probably elicited cheers and applause wherever he went.Unfortunately, this makes the task of reading Apaxian\n    scrolls very cumbersome, especially when you consider that a\n    particularly famous Apaxian queen had ten thousand consecutive\n    a’s in her name. Legend has it that\n    she was already two years old by the time the Royal Herald\n    finished announcing her birth.To make the Oriental Institute’s life easier, the Department\n    of Computer Science has offered to convert the Apaxian scrolls\n    into a more readable format. Specifically, we will be taking\n    Apaxian names and replacing all consecutive runs of the same\n    letter by a single instance of such letter.So, for example, the compact version of roooobert would be robert, where the four consecutive o’s have been replaced with a single o. Similarly, the compact version of rrrooobbbert would also be robert. On the other hand, the compact version\n    of robert is still robert.",
            "input": "The input contains a single name. Each name contains only\n    lowercase letters (a–z), no whitespace, a minimum length of 1\n    character, and a maximum length of 250 characters.",
            "output": "The output contains the compact version of the name: any\n    time the same letter appears two or more times in sequence, it\n    must be replaced by a single instance of that letter."
        },
        "table": {
            "input": [
                "robert\n",
                "rooobert\n",
                "roooooobertapalaxxxxios\n"
            ],
            "output": [
                "robert\n",
                "robert\n",
                "robertapalaxios\n"
            ]
        },
        "sidebar": {
            "problemID": "apaxiaaans",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.4"
        },
        "content": {
            "author": "University of Chicago Masters Program in Computer Science - Placement Exam 2014/15",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "robert\n",
                "rooobert\n",
                "roooooobertapalaxxxxios\n"
            ],
            "output": [
                "robert\n",
                "robert\n",
                "robertapalaxios\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Apostrophe Catastrophe",
        "body": {
            "question": "Apostrophes and double quotes tend to get badly encoded by\n    systems, causing them to print back things like\n    &#x27; or \\\". As a QA tester, Nova has\n    seen lots of these issues. Today, she overheard that the\n    Tweeper messaging app may have an issue with these symbols as\n    well, and may encode them in strange ways. This was\n    interesting, so she has written a Tweep to see if this is the\n    case. Based on this Tweep, can you find out if Tweeper has an\n    encoding issue, and if so, what the symbols are encoded\n    into?",
            "input": "The input is two strings separated by a line. The first\n    string $I$ represents the\n    input characters that was sent in, and the second string\n    $O$ is how Tweeper\n    presents the string. To avoid encoding troubles, apostrophes\n    and double quotes have been replaced with + and\n    -, respectively.",
            "output": "The output should have $n$ lines of output, one for each\n    possible encoding + and - may have. Each line\n    must have two strings $a^{+}_\n    i$ and $a^{-}_ i$,\n    representing what a + and a - can be encoded\n    as, respectively.If the string is empty, print instead\n    <empty>, and if the string can be anything,\n    print <any>. If there are multiple answers, you\n    can output them in any order.If there is no valid answer, write corrupted\n    instead.Limits\n      \n        $1 \\leq |I|, |O| \\leq\n        280$\n      \n      \n        $I$ and\n        $O$ contain only the\n        lowercase letters a-z, 0-9, + and -"
        },
        "table": {
            "input": [
                "a+b-c\na-b+d-c\n",
                "knuth-morris-pratt\nknuthmorrispratt\n",
                "d+-trouble\ndoubletrouble\n"
            ],
            "output": [
                "- +d-\n",
                "<any> <empty>\n",
                "<empty> ouble\no uble\nou ble\noub le\noubl e\nouble <empty>\n"
            ]
        },
        "sidebar": {
            "problemID": "apostrophecatastrophe",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "6.5"
        },
        "content": {
            "author": "Jean Niklas L'orange",
            "source": "IDI Open 2019",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "a+b-c\na-b+d-c\n",
                "knuth-morris-pratt\nknuthmorrispratt\n",
                "d+-trouble\ndoubletrouble\n"
            ],
            "output": [
                "- +d-\n",
                "<any> <empty>\n",
                "<empty> ouble\no uble\nou ble\noub le\noubl e\nouble <empty>\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Appalling Architecture",
        "body": {
            "question": "You have recently been hired as an architect for the BAPC\n    (Bureau of Architecture and Promising Constructions),\n    responsible for top-quality buildings such as the Tower of\n    Pisa. However, in the past couple of weeks, some of the\n    structures that the BAPC have made have collapsed! It is up to\n    you to figure out whether any other structures are in\n    danger.After some research it seems like the $x$-coordinate of the centers of\n    gravity of some of the structures are off: if the center of\n    gravity is too much to the left or to the right, the structure\n    will fall over. Hence, you decide to check all the blueprints\n    and see whether the structures are stable or not.Given is a grid of up to size $100$ by $100$, using characters in .#/\\_|-. The $\\texttt{.}$ characters denote empty\n    space, while each other character represents a completely\n    filled $1\\times 1$ box\n    (any difference in symbols used is due to the artistic freedom\n    of the other architects), whose center of mass is at the center\n    of the box.Every structure forms a single connected component that\n    touches the ground, i.e. the bottom layer of the grid.The structure falls to the left if the $x$-coordinate of the center of\n    gravity is less than the $x$-coordinate of the leftmost point\n    of the structure that touches the ground, and it falls to the\n    right if the $x$-coordinate of the center of\n    gravity is larger than the $x$-coordinate of the rightmost point\n    of the structure that touches the ground. It is guaranteed that\n    the center of gravity is never exactly above the leftmost or\n    rightmost point where the building touches the ground.Given a blueprint, is the structure balanced, does it fall\n    to the left, or does it fall to the right?",
            "input": "The first line has $1\\leq\n        h \\leq 100$ and $1\\leq\n        w\\leq 100$, the height and width of the grid.\n      \n      \n        Then follow $h$\n        lines with $w$\n        characters each. Each character is either ., indicating empty space, or one of\n        #/\\_|-, indicating a filled\n        $1\\times 1$ box .",
            "output": "Print a single line containing left, balanced,\n        or right."
        },
        "table": {
            "input": [
                "3 3\n/-\\\n|.|\n#.#\n",
                "3 3\n...\n___\n..|\n",
                "3 3\n./\\\n.\\/\n.|.\n",
                "20 19\n...................\n.........-____---..\n........._/\\\\////-.\n.......--//#\\#\\/_..\n......._/\\///////_.\n......-/#######\\/-.\n......////\\/#\\#/_..\n....../\\#\\#/////_..\n....._/#####\\#\\/...\n....._/\\////////-..\n...../########/-...\n...._///\\/#\\#\\/....\n...._/#/#/\\/\\/_....\n..._/\\#######/-....\n..._/\\////////-....\n.../\\#\\#\\#\\#/-.....\n.._///\\\\\\\\#\\/-.....\n.._//////////-.....\n..////##////-......\n.-____##____.......\n"
            ],
            "output": [
                "balanced\n",
                "left\n",
                "balanced\n",
                "balanced\n"
            ]
        },
        "sidebar": {
            "problemID": "appallingarchitecture",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.0"
        },
        "content": {
            "author": "Abe Wits",
            "source": "Benelux Algorithm Programming Contest (BAPC) preliminaries 2018",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "4",
            "input": [
                "3 3\n/-\\\n|.|\n#.#\n",
                "3 3\n...\n___\n..|\n",
                "3 3\n./\\\n.\\/\n.|.\n",
                "20 19\n...................\n.........-____---..\n........._/\\\\////-.\n.......--//#\\#\\/_..\n......._/\\///////_.\n......-/#######\\/-.\n......////\\/#\\#/_..\n....../\\#\\#/////_..\n....._/#####\\#\\/...\n....._/\\////////-..\n...../########/-...\n...._///\\/#\\#\\/....\n...._/#/#/\\/\\/_....\n..._/\\#######/-....\n..._/\\////////-....\n.../\\#\\#\\#\\#/-.....\n.._///\\\\\\\\#\\/-.....\n.._//////////-.....\n..////##////-......\n.-____##____.......\n"
            ],
            "output": [
                "balanced\n",
                "left\n",
                "balanced\n",
                "balanced\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Apparatus",
        "body": {
            "question": "Your competitors are in possession of a mysterious apparatus\n    which gives them an advantage over you. The apparatus has\n    $n$ on/off switches and\n    $n$ lights. We believe\n    that each of the switches is connected to exactly one of the\n    lights, and vice versa, but we don’t know which switch is\n    connected to which light.Your spy satellites have taken several different photographs\n    of the apparatus showing different configurations of the\n    switches and lights. Are these photos sufficient to narrow down\n    the number of possible wirings of the mysterious apparatus so\n    that you will be able to build a replica of the mysterious\n    apparatus?",
            "input": "The first line of input consists of two integers\n    $n$ and $m$, where $1 \\le n \\le 1000$ is the number of\n    switches/lights on the apparatus, and $0 \\le m \\le 1000$ is the number of\n    photos you have of the apparatus. The next lines describe the\n    photos. Each photo is described by two lines, each containing a\n    binary string of length $n$. The $i$’th position in the first line\n    indicates whether the $i$’th switch is on (1) or off (0),\n    and the $i$’th position in\n    the second line indicates whether the $i$’th light is on (1) or off (0).",
            "output": "Write a single line of output giving the number of different\n    wirings of the apparatus that are consistent with all the\n    photographs. As this number may be huge, we only ask that you\n    compute it modulo 1000003."
        },
        "table": {
            "input": [
                "3 1\n110\n011\n",
                "4 2\n1000\n1000\n0000\n0010\n",
                "1000 0\n"
            ],
            "output": [
                "2\n",
                "0\n",
                "864722\n"
            ]
        },
        "sidebar": {
            "problemID": "apparatus",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.2"
        },
        "content": {
            "author": "Per AustrinPehr Söderman",
            "source": "Spotify Challenge 2010",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "3 1\n110\n011\n",
                "4 2\n1000\n1000\n0000\n0010\n",
                "1000 0\n"
            ],
            "output": [
                "2\n",
                "0\n",
                "864722\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Apple Market",
        "body": {
            "question": "You are managing a market with some stores. The stores are\n    arranged in an $n \\times\n    m$ grid. Each store sells apples. Apples cost exactly\n    $1$ Malaysian Ringgit per\n    apple at every store.There will be several customers who walk through this\n    market. Each customer will only visit stores within a\n    subrectangle of the market, and each customer has a fixed\n    amount of money to spend. Also, each store has a limited\n    inventory of apples, which will not be replenished between\n    customers; the number available differs from store to store.\n    Assuming you can control how many apples each store sells to\n    each customer, what is the most money you can make?",
            "input": "Each input will consist of a single test case. Note that\n    your program may be run multiple times on different inputs. The\n    first line of input will contain three space-separated integers\n    $n$, $m$, and $k$, where the market has $n$ rows and $m$ columns ($1 \\le n,m \\le 50$), and there will be\n    $k$ ($1 \\le k \\le 10^5$) customers.Each of the next $n$\n    lines will have $m$\n    integers $a$ ($0 \\le a \\le 10^9$). This is a matrix\n    in row major order, indicating the number of apples in the\n    inventory of each store. $a[r,c]$ is the number of apples in\n    the store in the $r^\\mathrm\n    {th}$ row, $c^\\mathrm\n    {th}$ column. The rows range from $1$ to $n$ and the columns from $1$ to $m$. The top left corner is\n    $a[1,1]$, and the bottom\n    right corner is $a[n,m]$.Each of the next $k$\n    lines will describe a customer, with five integers:\n    $t$, $b$ ($1\n    \\le t \\le b \\le n$), $l$, $r$ ($1\n    \\le l \\le r \\le m$), and $x$ ($0\n    \\le x \\le 10^9$). The customer will only shop in the\n    subrectangle from $(t,l)$\n    to $(b,r)$ inclusive\n    ($t$=top, $b$=bottom, $l$=left, $r$=right). The customer has exactly\n    $x$ Malaysian Ringgits to\n    spend.",
            "output": "Output a single integer, representing the maximum amount of\n    money to be made by controlling how many items each store sells\n    to each customer."
        },
        "table": {
            "input": [
                "2 3 2\n1 2 3\n4 5 6\n1 2 2 3 20\n2 2 1 3 15\n"
            ],
            "output": [
                "20\n"
            ]
        },
        "sidebar": {
            "problemID": "applemarket",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.1"
        },
        "content": {
            "author": "North American Invitational Programming Contest (NAIPC) 2017",
            "source": "\n                                                                \n                                                                "
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2 3 2\n1 2 3\n4 5 6\n1 2 2 3 20\n2 2 1 3 15\n"
            ],
            "output": [
                "20\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Apples, Cherries, and Mangos",
        "body": {
            "question": "You are the boss of ACM\n    (Apples, Cherries, and Mangos), an upstanding company with a\n    single goal of world domination.ACM have provided lots of fruits for the last programming\n    competition for minions in Helsinki. The leftovers should now\n    be shipped to Singapore. There is, however, one constraint: In\n    the case that one box of apples is infested with apple-eating\n    insects and the next one in the line is also a box of apples,\n    the insects might move on to the neighboring box and infect it\n    as well. This constraint is applicable for boxes of cherries\n    and boxes of mangos too.In order to avoid this, ACM decides that the boxes of fruits\n    are to be sent in such a way that two consecutive boxes contain\n    different types of fruits. The statistics department of ACM\n    wants to know how many ways there are to arrange the shipments\n    of $A$ boxes of apples,\n    $C$ boxes of cherries and\n    $M$ boxes of mangos under\n    this constraint.Please provide a computer program to compute this for\n    various choices of $A$,\n    $C$, and $M$. Two arrangements are different if\n    there exists $i$ such that\n    the $i$-th box delivered\n    in the two arrangements contain different types of fruits.\n    Since the answer may be very big, output the answer modulo a\n    prime number $10^9+7$.",
            "input": "The input consists of a single line consisting of three\n    single space separated integers $A$, $C$, and $M$, denoting the total number of\n    boxes of apples, cherries, and mangos you need to ship to\n    Singapore, respectively. All three integers will be between\n    $1$ and $200\\, 000$, respectively.",
            "output": "Output the number of different possible arrangements of\n    delivery, modulo a prime number $10^9+7$. If there is no such order,\n    output $0$.Sample Data ExplanationIn the first example, the $6$ possible ways are:\n      \n        Apple, Cherry, Mango, Cherry.\n      \n\n      \n        Cherry, Apple, Cherry, Mango.\n      \n\n      \n        Cherry, Apple, Mango, Cherry.\n      \n\n      \n        Cherry, Mango, Apple, Cherry.\n      \n\n      \n        Cherry, Mango, Cherry, Apple.\n      \n\n      \n        Mango, Cherry, Apple, Cherry."
        },
        "table": {
            "input": [
                "1 2 1\n",
                "2 2 2\n",
                "1 1 10\n"
            ],
            "output": [
                "6\n",
                "30\n",
                "0\n"
            ]
        },
        "sidebar": {
            "problemID": "applescherriesmangos",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.7"
        },
        "content": {
            "author": "Irvan Jahja",
            "source": "2015 ACM ICPC Singapore Regional",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "3",
            "input": [
                "1 2 1\n",
                "2 2 2\n",
                "1 1 10\n"
            ],
            "output": [
                "6\n",
                "30\n",
                "0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Prize No One Can Win",
        "body": {
            "question": "After the festive opening of your new store, the Boutique\n    store for Alternative Paramedicine and Cwakhsahlvereigh, to\n    your disappointment you find out that you are not making as\n    many sales as you had hoped. To remedy this, you decide to run\n    a special offer: you will mark some subset of the $n$ items for sale in your store as\n    participating in the offer, and if people buy exactly two of\n    these items, and the cost of these items is strictly\n    more than $X$ euros, you\n    will give them a free complimentary unicorn horn!Since you recently found out all your unicorn horns are\n    really narwhal tusks, you decide to rig the offer by picking\n    the participating items in such a way that no one can earn a\n    horn anyway.To make sure no one becomes suspicious, you want to mark as\n    many items as possible as participating in the offer.",
            "input": "On the first line are two integers, $1 \\leq n \\leq 10^5$, the number\n        of items for sale in your store, and $1\\leq X \\leq 10^9$, the minimum\n        cost specified in the statement.\n      \n      \n        On the second line are $n$ positive integers, each at\n        most $10^9$. These are\n        the prices of the items in the store.",
            "output": "Print the maximum number of items you can mark as part of\n    your special offer, without anyone actually being able to\n    receive a horn."
        },
        "table": {
            "input": [
                "5 6\n1 2 3 4 5\n",
                "5 10\n4 8 1 9 7\n",
                "4 10\n1 3 1 7\n",
                "1 5\n6\n"
            ],
            "output": [
                "3\n",
                "2\n",
                "4\n",
                "1\n"
            ]
        },
        "sidebar": {
            "problemID": "aprizenoonecanwin",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "2.5"
        },
        "content": {
            "author": "Timon Knigge",
            "source": "Benelux Algorithm Programming Contest (BAPC) 2018",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "4",
            "input": [
                "5 6\n1 2 3 4 5\n",
                "5 10\n4 8 1 9 7\n",
                "4 10\n1 3 1 7\n",
                "1 5\n6\n"
            ],
            "output": [
                "3\n",
                "2\n",
                "4\n",
                "1\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Aquarium Tank",
        "body": {
            "question": "You just bought an “artistic” aquarium tank that has an\n    interesting shape, and you poured $L$ litres of water into the tank. How\n    high is the water in the tank?When you look at this tank from one side, it has the shape\n    of a convex polygon. This polygon has exactly two vertices on\n    the table ($y$-coordinates\n    are 0), and all other vertices have positive $y$-coordinates. There are also\n    exactly two vertices with maximum $y$-coordinates, and water is poured\n    into the opening between these two vertices. This aquarium tank\n    has a depth of $D$\n    centimetres. The tank is glued to the table, so no matter what\n    shape it has, it keeps its position and does not tip over.All coordinates and lengths in this problem are given in\n    centimetres. It should be noted that each cubic metre is\n    equivalent to 1 000 litres.An illustration showing the configuration of the tank of the\n    first sample input is given below:",
            "input": "The input consists of a single test case. The first line\n    contains an integer $N$\n    ($4 \\leq N \\leq 100$)\n    giving the number of vertices in the polygon. The next line\n    contains two integers $D$\n    and $L$, where\n    $1 \\le D \\le 1\\, 000$ is\n    the depth of the aquarium tank and $0 \\le L \\le 2\\, 000$ is the number of\n    litres of water to pour into the tank. The next $N$ lines each contains two integers,\n    giving the $(x,y)$\n    coordinates of the vertices of the convex polygon in\n    counterclockwise order. The absolute values of $x$ and $y$ are at most $1\\, 000$. You may assume that the\n    tank has a positive capacity, and you never pour more water\n    than the tank can hold.",
            "output": "Print the height of the water (in centimetres) in the\n    aquarium tank on a line to 2 decimal places."
        },
        "table": {
            "input": [
                "4\n30 50\n20 0\n100 0\n100 40\n20 40\n",
                "9\n30 70\n110 70\n100 80\n80 80\n-10 60\n-40 30\n-40 25\n20 0\n100 0\n120 10\n"
            ],
            "output": [
                "20.83\n",
                "19.74\n"
            ]
        },
        "sidebar": {
            "problemID": "tank",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.5"
        },
        "content": {
            "author": "Babak Behsaz",
            "source": "Rocky Mountain Regional Contest (RMRC) 2014",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n30 50\n20 0\n100 0\n100 40\n20 40\n",
                "9\n30 70\n110 70\n100 80\n80 80\n-10 60\n-40 30\n-40 25\n20 0\n100 0\n120 10\n"
            ],
            "output": [
                "20.83\n",
                "19.74\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Aqueduct Construction",
        "body": {
            "question": "After conquering Britannia, the great Roman general Agricola\n    decided all of his new cities should take advantage of the\n    natural springs found aplenty. He appointed his advisor Wessus\n    Waterus to try to find a way to get each town a fresh supply of\n    water.There are many springs and many towns and between each are\n    the natural hills and valleys of Roman Britain. Wessus doesn’t\n    want to waste the Imperial coin. He has been tasked with\n    linking each town to a spring by a series of aqueducts using as\n    little material as possible. Water, as we know, only flows\n    downhill so any aqueduct must go from a higher point to a\n    lower; intervening hills, springs and towns are no problem\n    since they can be tunnelled through and on. The only\n    requirement is that all aqueduct components start and end on\n    hilltops.Any spring must only serve one town, but the Romans are\n    clever enough to find a way for aqueducts to pass each other.\n    Roman engineering is excellent, but has its limits: aqueducts\n    can only be of a limited length.",
            "input": "One line containing four integers: $n,s,t$ and $q$ where $0 < n \\le 500$ is the number\n        of hills, $1 \\le s \\le\n        40$ is the number of springs, $1 \\le t \\le s$ is the number of\n        towns and $q$\n        ($1 \\le q \\le 3\\cdot\n        10^6$) is the maximum aqueduct length.\n      \n\n      \n        $N$ more lines,\n        each giving the space-separated integers $x_ i, y_ i, h_ i$: the\n        coordinates and height of a hill ($0 \\le |x|, |y|, h \\le 10^6$).\n        These hills are numbered $1$ to $n$ in the order given.\n      \n\n      \n        One line containing $s$ space-separated integers\n        $i_ j$ ($1 \\le i_ j \\le n$), each\n        representing the number of a hill on which a spring can be\n        found.\n      \n\n      \n        One line containing $t$ space-separated integers\n        $i_ j$ ($1 \\le i_ j \\le n$), each giving\n        the number of a hill on which the town can be found.\n      \n    Each hill may only have at most one spring or one town.",
            "output": "Output one line with one real number, denoting the minimum\n    total length of all aqueducts needed to supply each town with\n    fresh water from its own unique spring or IMPOSSIBLE if there is no way to achieve this.\n    Your answer should be correct up to an absolute or relative\n    precision of $10^{-6}$."
        },
        "table": {
            "input": [
                "6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n",
                "4 2 2 3\n1 3 2\n3 3 2\n2 1 1\n2 6 1\n1 2\n3 4\n"
            ],
            "output": [
                "20.396078\n",
                "IMPOSSIBLE\n"
            ]
        },
        "sidebar": {
            "problemID": "aqueducts",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "5.7"
        },
        "content": {
            "author": "Jim Grimmett",
            "source": "United Kingdom and Ireland Programming Contest (UKIEPC) 2015",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n",
                "4 2 2 3\n1 3 2\n3 3 2\n2 1 1\n2 6 1\n1 2\n3 4\n"
            ],
            "output": [
                "20.396078\n",
                "IMPOSSIBLE\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Question of Ingestion",
        "body": {
            "question": "Stan Ford is a typical college graduate student, meaning\n    that one of the most important things on his mind is where his\n    next meal will be. Fortune has smiled on him as he’s been\n    invited to a multi-course barbecue put on by some of the\n    corporate sponsors of his research team, where each course\n    lasts exactly one hour. Stan is a bit of an analytical type and\n    has determined that his eating pattern over a set of\n    consecutive hours is always very consistent. In the first hour,\n    he can eat up to $m$\n    calories (where $m$\n    depends on factors such as stress, bio-rhythms, position of the\n    planets, etc.), but that amount goes down by a factor of\n    two-thirds each consecutive hour afterwards (always truncating\n    in cases of fractions of a calorie). However, if he stops\n    eating for one hour, the next hour he can eat at the same rate\n    as he did before he stopped. So, for example, if $m=900$ and he ate for five\n    consecutive hours, the most he could eat each of those hours\n    would be $900$,\n    $600$, $400$, $266$ and $177$ calories, respectively. If,\n    however, he didn’t eat in the third hour, he could then eat\n    $900$, $600$, $0$, $600$ and $400$ calories in each of those hours.\n    Furthermore, if Stan can refrain from eating for two hours,\n    then the hour after that he’s capable of eating $m$ calories again. In the example\n    above, if Stan didn’t eat during the third and fourth hours,\n    then he could consume $900$, $600$, $0$, $0$ and $900$ calories.Stan is waiting to hear what will be served each hour of the\n    barbecue as he realizes that the menu will determine when and\n    how often he should refrain from eating. For example, if the\n    barbecue lasts $5$ hours\n    and the courses served each hour have calories $800$, $700$, $400$, $300$, $200$ then the best strategy when\n    $m=900$ is to eat every\n    hour for a total consumption of $800+600+400+266+177 = 2\\, 243$\n    calories. If however, the third course is reduced from\n    $400$ calories to\n    $40$ calories (some\n    low-calorie celery dish), then the best strategy is to not eat\n    during the third hour — this results in a total consumption of\n    $1\\, 900$ calories.The prospect of all this upcoming food has got Stan so\n    frazzled he can’t think straight. Given the number of courses\n    and the number of calories for each course, can you determine\n    the maximum amount of calories Stan can eat?",
            "input": "Input starts with a line containing two positive integers\n    $n$ $m$ ($n\n    \\leq 100, m \\leq 20\\, 000$) indicating the number of\n    courses and the number of calories Stan can eat in the first\n    hour, respectively. The next line contains $n$ positive integers indicating the\n    number of calories for each course.",
            "output": "Display the maximum number of calories Stan can consume."
        },
        "table": {
            "input": [
                "5 900\n800 700 400 300 200\n",
                "5 900\n800 700 40 300 200\n"
            ],
            "output": [
                "2243\n",
                "1900\n"
            ]
        },
        "sidebar": {
            "problemID": "ingestion",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "5.8"
        },
        "content": {
            "author": "John Bonomo",
            "source": "2017 ICPC East-Central NA Regional Contest",
            "license": "https://licensebuttons.net/p/zero/1.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "5 900\n800 700 400 300 200\n",
                "5 900\n800 700 40 300 200\n"
            ],
            "output": [
                "2243\n",
                "1900\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Arable Area",
        "body": {
            "question": "The prime minister has recently bought a piece of valuable\n    agricultural land, which is situated in a valley forming a\n    regular grid of unit square fields. ACM would like to verify\n    the transaction, especially whether the price corresponds to\n    the market value of the land, which is always determined as the\n    number of unit square fields fully contained in it.Your task is to write a program that computes the market\n    value. The piece of land forms a closed polygon, whose vertices\n    lie in the corners of unit fields.For example, the polygon in the picture (it corresponds to\n    the first scenario in Sample Input) contains three square\n    fields.",
            "input": "The input consists of several test scenarios, at most\n    $1300$. Each scenario\n    starts with a line containing one integer number $N$ ($3\\leq N\\leq 100$), the number of\n    polygon vertices. Each of the following $N$ lines contains a pair of integers\n    $X_ i$ and $Y_ i$, giving the coordinates of one\n    vertex. The vertices are listed in the order they appear along\n    the boundary of the polygon. You may assume that no coordinate\n    will be less then $-100$\n    or more than $100$ and\n    that the boundary does not touch or cross itself.The last scenario is followed by a line containing single\n    zero.",
            "output": "For each scenario, output one line with an integer number –\n    the number of unit squares that are completely inside the\n    polygon."
        },
        "table": {
            "input": [
                "4\n1 1\n5 3\n5 4\n3 5\n5\n3 3\n2 5\n3 4\n5 2\n1 1\n5\n0 0\n0 -50\n-50 -51\n-51 -50\n-50 0\n0\n"
            ],
            "output": [
                "3\n1\n2500\n"
            ]
        },
        "sidebar": {
            "problemID": "arable",
            "CPU": " 4 seconds",
            "memory": " 1024 MB",
            "difficulty": "7.5"
        },
        "content": {
            "author": "CTU Open 2009",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n1 1\n5 3\n5 4\n3 5\n5\n3 3\n2 5\n3 4\n5 2\n1 1\n5\n0 0\n0 -50\n-50 -51\n-51 -50\n-50 0\n0\n"
            ],
            "output": [
                "3\n1\n2500\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Arachnophobia",
        "body": {
            "question": "Jimmy is performing in ByteLand today! Anthony the Ant is a\n    huge fan of Jimmy’s music, so he can’t wait to get to the\n    concert.ByteLand consists of of $N$ intersections and $M$ roads. Every road is bidirectional\n    and connects two distinct intersections. Anthony is currently\n    on intersection $s$ and\n    the concert is being held at intersection $t$. Anthony must get to the concert\n    in $T$ seconds and he can\n    travel at $1$\n    meter/second.Unfortunately for Anthony, he has a huge fear of spiders and\n    ByteLand is full of spiders. Spiders reside at certain\n    intersections in ByteLand. Anthony will choose a path from\n    $s$ to $t$ that maximizes $D$, the minimum distance between any\n    intersection on the path and any spider, such that the path can\n    be travelled in no more than $T$ seconds.",
            "input": "The first line contains three integers $N$ ($2\\leq N\\leq 100\\, 000$), $M$ ($1\\leq M\\leq \\min (200\\, 000,\n    n(n-1)/2)$), and $T$ ($1\\leq T\\leq 10^9$).Each of the next $M$\n    lines specify the roads. A road is described by three integers\n    $u, v$ ($0\\leq u, v\\leq N-1$ and $u\\neq v$) and $d$ ($1\\leq d\\leq 10\\, 000$), which means\n    that a $d$ meters long\n    road connects intersections $u$ and $v$. It is guaranteed that at most one\n    road connect any two intersections, and that there exists a\n    path between any two intersections.The next line contains $s,\n    t$ ($0\\leq s, t\\leq\n    N-1$ and $s\\neq t$,\n    representing Anthony’s current location and the location of the\n    concert. You may assume Anthony can always travel from\n    $s$ to $t$ in no more than $T$ seconds.The last line contains a integer $1\\leq K\\leq N$, denoting the number\n    of intersections occupied by spiders, followed by $K$ integers $0\\leq a_ i\\leq N-1$ denoting the\n    intersections with spiders.",
            "output": "Print the maximum $D$\n    (as defined earlier) for the path Anthony takes."
        },
        "table": {
            "input": [
                "4 4 3000\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\n",
                "4 4 10\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\n"
            ],
            "output": [
                "1\n",
                "0\n"
            ]
        },
        "sidebar": {
            "problemID": "arachnophobia",
            "CPU": " 8 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.7"
        },
        "content": {
            "author": "Tony Cai",
            "source": "Alberta Collegiate Programming Contest 2018",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4 4 3000\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\n",
                "4 4 10\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\n"
            ],
            "output": [
                "1\n",
                "0\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Random Problem",
        "body": {
            "question": "Generating a random number sequence is not easy. Many\n    sequences may look random but upon closer inspection we can\n    find hidden regularities in the occurrence of the numbers. For\n    example, consider the following $100$-digit “random” sequence starting\n    with $4, 7, 9, \\ldots\n    $:4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n                  4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n                  0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n                  2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n                  8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\nIf you look closely, whenever a $4$ is followed immediately by another\n    $4$, the third value after\n    this will be a $3$ (we’re\n    sure you saw that). We’ll call features like this triple\n    correlations and we’ll represent it as $4(1)4(3)3$, where the numbers in\n    parentheses indicate how far away each number on either side of\n    the parentheses must be. More precisely, a sequence of\n    $p$ digits has an\n    $a(n)b(m)c$ triple\n    correlation if\n      \n        any time there is an $a$ followed $n$ locations later by a\n        $b$ there is always a\n        $c$ located\n        $m$ locations after\n        the $b$ unless\n        $b$’s location is\n        within distance $m-1$\n        of the end of the sequence.\n      \n      \n        any time there is a $b$ followed $m$ locations later by a\n        $c$ there is always an\n        $a$ located\n        $n$ locations before\n        the $b$ unless\n        $b$’s location is\n        within distance $n-1$\n        of the beginning of the sequence.\n      \n      \n        any time there is an $a$ followed $n+m$ locations later by a\n        $c$ there is always a\n        $b$ located\n        $n$ locations after\n        the $a$.\n      \n      \n        the correlation occurs at least $\\lceil p/40 \\rceil + 1$ times,\n        where $\\lceil x \\rceil\n        $ denotes the smallest integer greater than or equal\n        to $x$.\n      \n    Such correlations are tough to spot in general, so that’s\n    where we need your help. You will be given a sequence of digits\n    and must search it for triple correlations.",
            "input": "Input starts with a positive integer $p$ ($p\n    \\leq 1\\, 000$) indicating the number of random digits in\n    the sequence. Starting on the next line will be the\n    $p$ digits, separated by\n    spaces and potentially spread across multiple lines. No line\n    will contain more than $100$ digits and there will be no\n    blank lines.",
            "output": "Display triple correlation a(n)b(m)c\n    found if it occurs in the list (with the appropriate\n    values for a, b,\n    c, n, and m filled in) or the phrase random\n    sequence otherwise. If there are multiple triple\n    correlations in the sequence, display the one which begins\n    earliest in the sequence. If there is still a tie, choose the\n    one with the smaller value of n, and if\n    there is still a tie, choose the one with the smaller value of\n    m."
        },
        "table": {
            "input": [
                "100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n",
                "10\n1 2 3 1 2 2 1 1 3 0\n"
            ],
            "output": [
                "triple correlation 4(1)4(3)3 found\n",
                "random sequence\n"
            ]
        },
        "sidebar": {
            "problemID": "randomproblem",
            "CPU": " 9 seconds",
            "memory": " 1024 MB",
            "difficulty": "8.1"
        },
        "content": {
            "author": "Bob Roos",
            "source": "2018 ICPC East-Central NA Regional Contest",
            "license": "https://licensebuttons.net/p/zero/1.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n",
                "10\n1 2 3 1 2 2 1 1 3 0\n"
            ],
            "output": [
                "triple correlation 4(1)4(3)3 found\n",
                "random sequence\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Rational Sequence",
        "body": {
            "question": "An infinite full binary tree labeled by positive rational\n    numbers is defined by:The label of the root is $1/1$.\n      \n\n      \n        The left child of label $p/q$ is $p/(p+q)$.\n      \n\n      \n        The right child of label $p/q$ is $(p+q)/q$.\n      \n    The top of the tree is shown in the following figure:\n      \n        \n      \n    A rational sequence is defined by doing a level order\n    (breadth first) traversal of the tree (indicated by the light\n    dashed line). So that:\\[ F(1)\n    = 1/1, F(2) = 1/2, F(3) = 2/1, F(4) = 1/3, F(5) = 3/2, F(6) =\n    2/3, \\ldots \\]Write a program which takes as input a rational number,\n    $p/q$, in lowest terms and\n    finds the next rational number in the sequence. That is, if\n    $F(n) = p/q$, then the\n    result is $F(n+1)$.",
            "input": "The first line of input contains a single integer\n    $P$, ($1 \\le P \\le 1000$), which is the\n    number of data sets that follow. Each data set should be\n    processed identically and independently.Each data set consists of a single line of input. It\n    contains the data set number, $K$, which is then followed by a\n    space, then the numerator of the fraction, $p$, followed immediately by a forward\n    slash (/), followed immediately by the denominator of the\n    fraction, $q$. Both\n    $p$ and $q$ will be relatively prime and\n    $0 \\le p, q \\le 2\\, 147\\, 483\\,\n    647$.",
            "output": "For each data set there is a single line of output. It\n    contains the data set number, $K$, followed by a single space which\n    is then followed by the numerator of the fraction, followed\n    immediately by a forward slash (/)\n    followed immediately by the denominator of the fraction. Inputs\n    will be chosen such that neither the numerator nor the\n    denominator will overflow a 32-bit integer."
        },
        "table": {
            "input": [
                "5\n1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n5 1/10000000\n"
            ],
            "output": [
                "1 1/2\n2 3/2\n3 2/5\n4 1346269/1860498\n5 10000000/9999999\n"
            ]
        },
        "sidebar": {
            "problemID": "rationalsequence",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "4.8"
        },
        "content": {
            "author": "2014 Greater New York Region ACM Regional Contest",
            "source": ""
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "5\n1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n5 1/10000000\n",
				"1000\n1\n1/1\n2\n1/3\n3\n5/2\n4\n2178309/1346269\n5\n1/10000000\n6\n128/1\n7\n1/128\n8\n1073741823/127\n9\n153391689/1\n10\n256/1\n11\n1/256\n12\n357913941/85\n13\n1073741823/8\n14\n512/1\n15\n1/512\n16\n153391689/73\n17\n119304647/1\n18\n1024/1\n19\n1/1024\n20\n1049601/1\n21\n1073741823/10\n22\n2048/1\n23\n1/2048\n24\n1073741823/2047\n25\n97612893/1\n26\n4096/1\n27\n1/4096\n28\n17043521/65\n29\n357913941/4\n30\n8192/1\n31\n1/8192\n32\n1073741823/8191\n33\n1073741823/13\n34\n16384/1\n35\n1/16384\n36\n357913941/5461\n37\n153391689/2\n38\n32768/1\n39\n1/32768\n40\n32769/1\n41\n357913941/5\n42\n65536/1\n43\n1/65536\n44\n357913941/21845\n45\n1073741823/16\n46\n131072/1\n47\n1/131072\n48\n1073741823/131071\n49\n1073741823/17\n50\n262144/1\n51\n1/262144\n52\n17043521/4161\n53\n119304647/2\n54\n524288/1\n55\n1/524288\n56\n1073741823/524287\n57\n1073741823/19\n58\n1048576/1\n59\n1/1048576\n60\n1049601/1025\n61\n1073741823/20\n62\n2097152/1\n63\n1/2097152\n64\n153391689/299593\n65\n51130563/1\n66\n4194304/1\n67\n1/4194304\n68\n357913941/1398101\n69\n97612893/2\n70\n8388608/1\n71\n1/8388608\n72\n1073741823/8388607\n73\n1073741823/23\n74\n16777216/1\n75\n1/16777216\n76\n17043521/266305\n77\n357913941/8\n78\n33554432/1\n79\n1/33554432\n80\n34636833/1082401\n81\n1073741823/25\n82\n67108864/1\n83\n1/67108864\n84\n357913941/22369621\n85\n1073741823/26\n86\n134217728/1\n87\n1/134217728\n88\n153391689/19173961\n89\n119304647/3\n90\n268435456/1\n91\n1/268435456\n92\n357913941/89478485\n93\n153391689/4\n94\n536870912/1\n95\n1/536870912\n96\n1073741823/536870911\n97\n1073741823/29\n98\n1073741824/1\n99\n1/1073741824\n100\n1/1\n101\n357913941/10\n102\n181714663/1288\n103\n67425286/2193\n104\n168659672/3983\n105\n1002173004/1441\n106\n572217231/2012\n107\n314245882/1637\n108\n368493692/1753\n109\n814610761/1306\n110\n1781144/5\n111\n303629609/458\n112\n574539455/529\n113\n485892023/983\n114\n401606659/3750\n115\n924515315/2001\n116\n34147756/1183\n117\n121204948/3547\n118\n952498813/2302\n119\n368586043/928\n120\n24500527/1414\n121\n685084457/3941\n122\n814761094/2469\n123\n967196699/100\n124\n130916507/95\n125\n90129549/964\n126\n21614249/194\n127\n469175833/1726\n128\n507020753/1339\n129\n255634713/2000\n130\n25849585/544\n131\n155906401/621\n132\n623254409/222\n133\n214757357/314\n134\n719707717/727\n135\n21144257/547\n136\n311483782/461\n137\n60448215/4087\n138\n1015310755/1631\n139\n101023143/1834\n140\n860355317/3267\n141\n40920201/3163\n142\n421462765/3403\n143\n1060248607/589\n144\n670096249/3811\n145\n748383997/2784\n146\n286975153/3883\n147\n139001411/1008\n148\n917579637/1783\n149\n961031629/1545\n150\n640590863/3792\n151\n416345725/1383\n152\n297142481/881\n153\n14721829/3989\n154\n36307390/527\n155\n832728667/1753\n156\n1007021571/1538\n157\n1018954433/135\n158\n583931110/2797\n159\n585202483/1665\n160\n81280266/461\n161\n19909543/389\n162\n42801517/1351\n163\n138420501/2983\n164\n53468073/113\n165\n458925949/220\n166\n798661035/2347\n167\n629455140/1901\n168\n220240495/249\n169\n122303479/555\n170\n546529167/424\n171\n1066063892/2611\n172\n248996402/185\n173\n869719325/16\n174\n1025865625/1296\n175\n471032359/922\n176\n113387331/3289\n177\n331148977/2760\n178\n500179159/1269\n179\n34891569/644\n180\n46158179/1723\n181\n442744541/1430\n182\n101841013/1811\n183\n961101462/1297\n184\n85588771/2817\n185\n928679142/3323\n186\n46313471/2230\n187\n88687524/1105\n188\n279877457/298\n189\n160940069/274\n190\n759126230/2037\n191\n1069945802/2521\n192\n69740246/3811\n193\n299349/5\n194\n168267824/669\n195\n299335960/587\n196\n213487051/1628\n197\n196358417/677\n198\n7502285/1282\n199\n17749519/509\n200\n679408854/3335\n201\n444244728/2881\n202\n911881172/2997\n203\n669493958/615\n204\n161444428/741\n205\n124642881/95\n206\n937821806/4059\n207\n585618156/2429\n208\n650424478/3573\n209\n77630312/481\n210\n106798889/86\n211\n32390371/541\n212\n444307832/859\n213\n563697436/3907\n214\n158068166/1153\n215\n349194382/1129\n216\n30527827/1819\n217\n79532193/223\n218\n2757744/883\n219\n745048416/1985\n220\n894910366/1079\n221\n405900593/1371\n222\n574863919/2306\n223\n88799353/142\n224\n330959977/3665\n225\n470510621/876\n226\n491047243/2021\n227\n418392332/1453\n228\n331940253/2227\n229\n520804320/2443\n230\n115796625/1889\n231\n110055092/1693\n232\n999963745/718\n233\n963672463/54\n234\n633003249/1672\n235\n757294565/2288\n236\n575483501/3924\n237\n173800481/621\n238\n827503083/4010\n239\n999386349/1525\n240\n401947908/539\n241\n521064581/2231\n242\n306295181/2135\n243\n5176216/5\n244\n82707031/454\n245\n668973169/1104\n246\n191111037/118\n247\n370966705/1387\n248\n894765529/3855\n249\n131640557/473\n250\n730368473/1755\n251\n1058437925/1588\n252\n152629430/149\n253\n386721672/2293\n254\n705509233/19\n255\n113603419/210\n256\n135925075/249\n257\n315506/31\n258\n170044814/3995\n259\n454431564/499\n260\n485422735/3438\n261\n410984656/1001\n262\n174104388/209\n263\n225824691/170\n264\n990174/5\n265\n451025450/1887\n266\n190559411/528\n267\n3894728/17\n268\n708284523/3577\n269\n340171731/2542\n270\n48556568/277\n271\n79041422/939\n272\n171278851/411\n273\n324220837/2750\n274\n55268959/848\n275\n1044789482/4047\n276\n459669374/681\n277\n265566569/1051\n278\n571703339/2376\n279\n331527113/1324\n280\n17832350/1991\n281\n276987105/1076\n282\n743555434/2709\n283\n239039410/511\n284\n255886138/2561\n285\n21712371/4\n286\n372172685/1941\n287\n232891688/1141\n288\n306486271/412\n289\n178005019/2917\n290\n380234761/919\n291\n29920787/664\n292\n272459553/1679\n293\n203464330/1287\n294\n70413158/1003\n295\n93665891/224\n296\n523569863/3147\n297\n324584869/351\n298\n207123693/415\n299\n778019687/2305\n300\n642707882/2435\n301\n320947896/887\n302\n183370/541\n303\n43789988/2723\n304\n3332115/14\n305\n468838633/378\n306\n446322962/1127\n307\n180901952/487\n308\n237333198/1381\n309\n544353529/2376\n310\n492282259/345\n311\n783775135/1262\n312\n303501647/434\n313\n554569619/3745\n314\n59866327/87\n315\n77622871/466\n316\n342171529/190\n317\n527917433/1604\n318\n48491506/353\n319\n772160255/779\n320\n288439043/2425\n321\n1014678241/1340\n322\n11046909/23\n323\n504812440/1699\n324\n363221459/1556\n325\n204757644/115\n326\n616463015/3737\n327\n161357968/897\n328\n1069058723/1026\n329\n5845713/79\n330\n248908589/1999\n331\n976496330/1673\n332\n524461652/505\n333\n192859517/177\n334\n626354516/309\n335\n15815514/1753\n336\n304300970/2517\n337\n184831558/1273\n338\n1010548004/1777\n339\n371975459/2260\n340\n195187713/3293\n341\n585252140/3379\n342\n166776053/2001\n343\n350264068/1613\n344\n220967571/1915\n345\n124777385/3087\n346\n125658923/684\n347\n746839932/397\n348\n54214045/629\n349\n469016707/64\n350\n16537509/3430\n351\n274445955/1613\n352\n5243254/203\n353\n1052681612/1735\n354\n780961193/2140\n355\n133552048/2235\n356\n356235558/3583\n357\n120445721/613\n358\n221439679/523\n359\n121935655/1528\n360\n175522213/31\n361\n247523467/1805\n362\n15077110/97\n363\n2381831/121\n364\n90343419/782\n365\n790807679/3049\n366\n692488306/2329\n367\n825467724/421\n368\n132972331/1109\n369\n175519711/1297\n370\n113845916/1625\n371\n141746705/1686\n372\n195714698/1757\n373\n515823443/2580\n374\n182340475/267\n375\n11838285/859\n376\n459279751/745\n377\n1010606211/691\n378\n6245976/49\n379\n157467257/170\n380\n388518310/4069\n381\n340577965/3566\n382\n147820898/35\n383\n948395140/2339\n384\n189897725/2001\n385\n48109499/26\n386\n167501261/3367\n387\n749815573/679\n388\n922723225/79\n389\n513505961/3200\n390\n845737055/3074\n391\n362269861/642\n392\n641056811/861\n393\n205214561/268\n394\n94116695/1816\n395\n818147157/1688\n396\n296975603/1727\n397\n474847329/3793\n398\n870172856/1\n399\n497717373/1667\n400\n1052637586/1699\n401\n5231249/1516\n402\n170731394/385\n403\n81240774/1687\n404\n46826511/284\n405\n1005190637/489\n406\n674375883/3088\n407\n154222586/955\n408\n616965291/1531\n409\n661003426/1163\n410\n336569809/920\n411\n279469276/891\n412\n205409319/1051\n413\n1008429673/1745\n414\n539973586/951\n415\n122526144/1735\n416\n377898871/247\n417\n113909125/767\n418\n310790933/795\n419\n292796098/547\n420\n83474420/549\n421\n364925687/328\n422\n504973572/1855\n423\n327132421/786\n424\n16015209/61\n425\n500255475/587\n426\n476975452/1953\n427\n726874493/3359\n428\n137655/52\n429\n136898027/726\n430\n54063189/145\n431\n123195109/2811\n432\n55613423/737\n433\n356899507/446\n434\n116331253/247\n435\n28515859/3738\n436\n478216813/466\n437\n578139005/1716\n438\n862215655/3982\n439\n143925403/391\n440\n290454143/691\n441\n41098989/46\n442\n758044077/3011\n443\n139816571/635\n444\n443250629/3745\n445\n390533818/3369\n446\n531725573/2278\n447\n983118329/1422\n448\n815669299/1631\n449\n936256999/3496\n450\n332944031/709\n451\n114650563/1536\n452\n14346208/3101\n453\n365912936/1685\n454\n104547859/981\n455\n116256353/581\n456\n155053939/1357\n457\n363051047/178\n458\n525061731/4054\n459\n450850194/4091\n460\n417111077/2719\n461\n1017211553/3073\n462\n1022795453/736\n463\n514249670/1731\n464\n264610747/2053\n465\n824961760/4033\n466\n104188267/23\n467\n413163047/3291\n468\n260600391/1624\n469\n81723104/223\n470\n522529996/3729\n471\n511605411/782\n472\n37479265/708\n473\n15170731/474\n474\n936328528/27\n475\n989724764/169\n476\n541853205/2263\n477\n115925775/379\n478\n166119328/539\n479\n610493038/803\n480\n155841095/3829\n481\n194724131/519\n482\n973739403/3364\n483\n68553903/292\n484\n955663027/2460\n485\n30619783/901\n486\n499692402/1285\n487\n104115549/1700\n488\n223987488/527\n489\n667940064/3919\n490\n1002659906/2257\n491\n109691651/50\n492\n365685092/3463\n493\n134073536/329\n494\n192689532/727\n495\n4071539/81\n496\n17213908/1975\n497\n1008888190/3259\n498\n899051311/2218\n499\n914951238/2545\n500\n861749793/1825\n501\n91805743/485\n502\n328637433/2842\n503\n326833916/3377\n504\n867621945/274\n505\n1061380503/337\n506\n807567627/1592\n507\n885218691/452\n508\n508465636/3313\n509\n26181995/523\n510\n112273955/341\n511\n875282271/2125\n512\n130318571/876\n513\n935831747/2075\n514\n33910984/1921\n515\n746803107/172\n516\n859315879/2431\n517\n82701713/18\n518\n8443257/304\n519\n968778994/2563\n520\n683740285/2512\n521\n337467018/11\n522\n434558329/1168\n523\n948347263/690\n524\n129338841/725\n525\n88990423/564\n526\n11528035/2516\n527\n56978823/1069\n528\n91898405/3579\n529\n864107457/3178\n530\n711043712/3179\n531\n55518962/2013\n532\n498669589/1271\n533\n511712995/1746\n534\n950707695/1831\n535\n17971398/263\n536\n483652751/860\n537\n167381987/511\n538\n520966575/13\n539\n41650930/359\n540\n1013258677/3312\n541\n378939922/631\n542\n173917997/366\n543\n74781139/451\n544\n437800673/1168\n545\n609574728/485\n546\n765791182/3365\n547\n263904517/4034\n548\n33043589/294\n549\n351854093/2658\n550\n13951825/24\n551\n622119202/1911\n552\n94821109/1541\n553\n994958047/1319\n554\n564667529/1301\n555\n7107160/13\n556\n470644901/1542\n557\n49022773/3\n558\n74692339/2517\n559\n118382375/198\n560\n16725209/727\n561\n1061834791/205\n562\n316621642/3441\n563\n217507214/735\n564\n51591285/1049\n565\n246186321/220\n566\n455713942/605\n567\n338975997/2201\n568\n45396659/3588\n569\n656118202/3039\n570\n162112202/4033\n571\n454939861/2554\n572\n582065157/2773\n573\n635450309/1306\n574\n408766690/2519\n575\n313490523/176\n576\n573494887/1429\n577\n961961776/355\n578\n518688451/2446\n579\n500882611/685\n580\n39750824/361\n581\n26603293/873\n582\n184482382/181\n583\n811194479/257\n584\n10478569/29\n585\n70330807/33\n586\n991515633/3166\n587\n14832247/343\n588\n895729573/3997\n589\n906602261/3036\n590\n1055498923/1243\n591\n200172481/1729\n592\n177117936/727\n593\n62905497/1523\n594\n383857675/3516\n595\n159098863/3634\n596\n174825871/361\n597\n168795846/449\n598\n884116530/1489\n599\n80467480/79\n600\n922696569/2293\n601\n182711462/935\n602\n987856334/1837\n603\n395769857/1301\n604\n478876075/1103\n605\n436934778/3259\n606\n512328463/912\n607\n382590492/2377\n608\n526884029/703\n609\n515681021/2199\n610\n1070428401/1595\n611\n351038906/975\n612\n1055432261/2952\n613\n437144406/521\n614\n950553768/79\n615\n58693976/2207\n616\n345140487/889\n617\n407563503/980\n618\n237788721/3181\n619\n430203471/3394\n620\n63478318/517\n621\n115003589/4087\n622\n401845515/3302\n623\n92487663/127\n624\n12032853/242\n625\n290879947/1340\n626\n57042013/435\n627\n45145353/388\n628\n832410931/1751\n629\n254246625/908\n630\n5409344/37\n631\n613176431/2134\n632\n1045003758/2443\n633\n339966839/416\n634\n484580213/1071\n635\n154927414/481\n636\n110849969/354\n637\n831458500/3537\n638\n171634337/311\n639\n118060287/100\n640\n485118001/1799\n641\n1014646062/2431\n642\n945795288/1325\n643\n63926892/439\n644\n49724575/384\n645\n1017139849/972\n646\n292658245/823\n647\n109576797/82\n648\n497559507/2707\n649\n107359421/378\n650\n15800131/619\n651\n243803757/1052\n652\n478493927/1914\n653\n253627720/3719\n654\n933483667/1014\n655\n812868838/3327\n656\n102267071/391\n657\n251471463/1213\n658\n37701359/132\n659\n180974919/1015\n660\n12707228/267\n661\n65700485/471\n662\n324857750/2703\n663\n1047583219/212\n664\n12942485/453\n665\n108689885/288\n666\n388621391/682\n667\n726335964/841\n668\n47047647/380\n669\n343806754/2651\n670\n10956411/352\n671\n286614431/841\n672\n425190361/2434\n673\n196518516/313\n674\n813911286/2149\n675\n425814663/1643\n676\n784905935/732\n677\n86669916/97\n678\n836880501/1298\n679\n561322495/2587\n680\n213107714/865\n681\n263835332/725\n682\n19925305/3801\n683\n54405835/271\n684\n977565736/2495\n685\n916806433/2445\n686\n8454651/257\n687\n731346611/1948\n688\n130529861/1013\n689\n19232692/105\n690\n69787611/607\n691\n979178501/4080\n692\n898804478/785\n693\n690432591/3964\n694\n60557557/566\n695\n72549714/3175\n696\n214723065/311\n697\n59083059/1909\n698\n2495609/5\n699\n308930957/2658\n700\n13309073/24\n701\n717890068/1115\n702\n198743207/568\n703\n777491256/1667\n704\n637754783/1819\n705\n19097278/111\n706\n274353101/481\n707\n587667559/3242\n708\n519421698/1423\n709\n168626827/3377\n710\n225833703/3643\n711\n337136191/680\n712\n854336032/1747\n713\n700453479/868\n714\n274828886/445\n715\n114456429/719\n716\n169695637/373\n717\n631418061/775\n718\n361184398/915\n719\n3372116/21\n720\n29741800/2901\n721\n151393906/215\n722\n463251653/3993\n723\n29536061/143\n724\n751137715/3909\n725\n185627837/185\n726\n344571932/1377\n727\n504684814/3343\n728\n389723249/298\n729\n162218719/472\n730\n406949840/2703\n731\n41860713/3793\n732\n338692251/1718\n733\n477445147/3536\n734\n444666656/3189\n735\n132056963/448\n736\n131666998/2265\n737\n470381454/1339\n738\n106998166/93\n739\n53052853/19\n740\n131318162/193\n741\n40754221/1130\n742\n71169550/143\n743\n1056264983/3050\n744\n314643173/590\n745\n263251734/995\n746\n985867683/3161\n747\n55287850/469\n748\n43833213/182\n749\n22895343/1106\n750\n246216477/1861\n751\n42186155/1074\n752\n489646423/998\n753\n421307332/1791\n754\n31616736/2621\n755\n164491860/733\n756\n101137603/1098\n757\n73434567/928\n758\n257427417/518\n759\n434386387/614\n760\n82706062/263\n761\n62736871/145\n762\n166105967/583\n763\n19808247/22\n764\n71797385/42\n765\n293693365/2234\n766\n209477349/982\n767\n52327473/329\n768\n650841629/188\n769\n123844574/1587\n770\n652891043/4009\n771\n461235589/595\n772\n6488783/79\n773\n755497310/1643\n774\n29612433/346\n775\n294415757/2034\n776\n40208663/723\n777\n917580321/1570\n778\n102597532/1601\n779\n850950687/2774\n780\n159123322/165\n781\n970424738/2395\n782\n59858369/527\n783\n946781826/2803\n784\n163463766/923\n785\n249964623/967\n786\n869830643/38\n787\n7063214/441\n788\n227898687/3548\n789\n324232526/1865\n790\n943262146/1607\n791\n761241499/1437\n792\n976152335/1826\n793\n536243930/3283\n794\n952812386/1759\n795\n490876327/1965\n796\n848882751/2335\n797\n838901604/1817\n798\n958318866/829\n799\n855562801/1529\n800\n180015221/49\n801\n96761057/361\n802\n382972113/1018\n803\n145186919/1330\n804\n672580966/3649\n805\n714326038/2039\n806\n1008212593/3284\n807\n234888272/1799\n808\n6661405/1288\n809\n684551045/1233\n810\n989182830/1261\n811\n939973722/2393\n812\n449529776/3017\n813\n788725195/2612\n814\n418063756/1865\n815\n186353216/997\n816\n794054757/3190\n817\n999685237/3425\n818\n425791103/851\n819\n1007437860/1171\n820\n121026325/1087\n821\n769989278/2777\n822\n227494561/1025\n823\n851215211/388\n824\n1013027879/918\n825\n26154300/407\n826\n147084488/1623\n827\n201483396/13\n828\n972905617/3628\n829\n211918989/932\n830\n20019352/463\n831\n363002237/1269\n832\n1008447963/2801\n833\n85048709/921\n834\n503834669/1858\n835\n378153182/1015\n836\n264733213/1047\n837\n20973935/132\n838\n439793669/1041\n839\n53565799/32\n840\n107063295/602\n841\n758740973/2485\n842\n8690312/885\n843\n305802881/3121\n844\n89348165/116\n845\n194808777/386\n846\n23404050/2497\n847\n666073785/2411\n848\n908304901/117\n849\n57861713/785\n850\n446556419/1478\n851\n6391223/16\n852\n654013004/519\n853\n27754117/901\n854\n1049280650/3393\n855\n92414515/336\n856\n699532398/943\n857\n158172325/909\n858\n133674923/1313\n859\n333563527/1183\n860\n831112676/797\n861\n50633033/227\n862\n286816595/269\n863\n124327319/130\n864\n41836723/323\n865\n199162047/979\n866\n97344673/137\n867\n782237115/862\n868\n832880499/593\n869\n32898785/1274\n870\n218427553/4051\n871\n951442073/134\n872\n207508932/1171\n873\n739724761/1741\n874\n14410061/1099\n875\n692350741/1374\n876\n332962293/3628\n877\n465768205/163\n878\n39977161/25\n879\n908630640/3463\n880\n102641077/410\n881\n915663859/1944\n882\n35097361/162\n883\n372536189/994\n884\n349546851/2357\n885\n412312447/2629\n886\n179276314/2053\n887\n21974177/657\n888\n707932774/2413\n889\n769952360/269\n890\n467734324/411\n891\n807782351/756\n892\n19934903/2548\n893\n667194347/2803\n894\n783594252/1423\n895\n96177077/700\n896\n637881563/1466\n897\n413005009/3639\n898\n26389861/370\n899\n1757421/181\n900\n898660330/2801\n901\n866676600/2137\n902\n1014287045/538\n903\n450603649/225\n904\n84168002/471\n905\n222885833/3611\n906\n595956468/401\n907\n156100133/440\n908\n512934904/2741\n909\n225501600/1471\n910\n305696575/1174\n911\n513599458/567\n912\n120977909/483\n913\n94388705/107\n914\n2172137/1\n915\n94873532/1993\n916\n954687194/3015\n917\n100904111/181\n918\n661581938/2639\n919\n443102983/2999\n920\n317328455/872\n921\n70861189/106\n922\n495946666/1209\n923\n495462453/353\n924\n285381002/1199\n925\n97777899/2854\n926\n183748589/1157\n927\n1946493/20\n928\n245527763/2646\n929\n970409225/124\n930\n206947142/1009\n931\n930279384/2989\n932\n62694913/4086\n933\n127367339/1171\n934\n277363953/3301\n935\n7012562/17\n936\n214331839/85\n937\n954230845/414\n938\n125607827/937\n939\n773174656/695\n940\n1031923515/3107\n941\n165357374/185\n942\n133318897/361\n943\n148005264/2429\n944\n560790853/850\n945\n589498882/3235\n946\n111906592/1087\n947\n147459739/334\n948\n991072561/3006\n949\n149675569/1413\n950\n1019934227/1565\n951\n526437193/2034\n952\n77184359/3543\n953\n791670001/2195\n954\n1021110073/1436\n955\n245333613/950\n956\n151188701/1359\n957\n389051007/2254\n958\n1069255569/3722\n959\n227580355/1628\n960\n611834651/279\n961\n596369573/118\n962\n51828001/360\n963\n471466765/1098\n964\n66803769/863\n965\n65338997/45\n966\n412657875/283\n967\n248992932/2519\n968\n631871709/409\n969\n385853878/853\n970\n739558833/3031\n971\n735098969/2787\n972\n411566655/1141\n973\n666316808/1869\n974\n35492236/3243\n975\n486214139/1368\n976\n1019560486/2021\n977\n805834176/1079\n978\n331676869/68\n979\n825646559/535\n980\n57229033/2842\n981\n230997022/549\n982\n27511556/111\n983\n472123379/1185\n984\n259809573/44\n985\n626382684/2597\n986\n141739800/401\n987\n51033990/569\n988\n287527729/3541\n989\n68941607/1514\n990\n168906840/1031\n991\n592326591/925\n992\n258439732/3069\n993\n1033751077/38\n994\n260274196/971\n995\n736595751/847\n996\n509510929/1838\n997\n61219206/139\n998\n110231395/1036\n999\n815870944/1649\n1000\n34557047/1900\n"
            ],
            "output": [
                "1 1/2\n2 3/2\n3 2/5\n4 1346269/1860498\n5 10000000/9999999\n",
				"1\n1/2\n2\n3/2\n3\n2/5\n4\n1346269/1860498\n5\n10000000/9999999\n6\n1/129\n7\n128/127\n8\n127/1073741944\n9\n1/153391690\n10\n1/257\n11\n256/255\n12\n85/357913984\n13\n8/1073741817\n14\n1/513\n15\n512/511\n16\n73/153391760\n17\n1/119304648\n18\n1/1025\n19\n1024/1023\n20\n1/1049602\n21\n10/1073741827\n22\n1/2049\n23\n2048/2047\n24\n2047/1073743360\n25\n1/97612894\n26\n1/4097\n27\n4096/4095\n28\n65/17043584\n29\n4/357913943\n30\n1/8193\n31\n8192/8191\n32\n8191/1073749984\n33\n13/1073741814\n34\n1/16385\n35\n16384/16383\n36\n5461/357919400\n37\n2/153391689\n38\n1/32769\n39\n32768/32767\n40\n1/32770\n41\n5/357913944\n42\n1/65537\n43\n65536/65535\n44\n21845/357924864\n45\n16/1073741809\n46\n1/131073\n47\n131072/131071\n48\n131071/1073856512\n49\n17/1073741816\n50\n1/262145\n51\n262144/262143\n52\n4161/17047552\n53\n2/119304647\n54\n1/524289\n55\n524288/524287\n56\n524287/1074262016\n57\n19/1073741822\n58\n1/1048577\n59\n1048576/1048575\n60\n1025/1050624\n61\n20/1073741837\n62\n1/2097153\n63\n2097152/2097151\n64\n299593/153691136\n65\n1/51130564\n66\n1/4194305\n67\n4194304/4194303\n68\n1398101/359311872\n69\n2/97612893\n70\n1/8388609\n71\n8388608/8388607\n72\n8388607/1082130176\n73\n23/1073741842\n74\n1/16777217\n75\n16777216/16777215\n76\n266305/17309824\n77\n8/357913939\n78\n1/33554433\n79\n33554432/33554431\n80\n1082401/35719232\n81\n25/1073741802\n82\n1/67108865\n83\n67108864/67108863\n84\n22369621/380283552\n85\n26/1073741827\n86\n1/134217729\n87\n134217728/134217727\n88\n19173961/172565648\n89\n3/119304646\n90\n1/268435457\n91\n268435456/268435455\n92\n89478485/447392424\n93\n4/153391691\n94\n1/536870913\n95\n536870912/536870911\n96\n536870911/1610612732\n97\n29/1073741846\n98\n1/1073741825\n99\n1073741824/1073741823\n100\n1/2\n101\n10/357913949\n102\n1288/181713857\n103\n2193/67424477\n104\n3983/168656615\n105\n1441/1002172977\n106\n2012/572218429\n107\n1637/314245891\n108\n1753/368493803\n109\n1306/814609873\n110\n5/1781141\n111\n458/303629385\n112\n529/574539004\n113\n983/485892930\n114\n3750/401609591\n115\n2001/924514738\n116\n1183/34148017\n117\n3547/121207673\n118\n2302/952500569\n119\n928/368586533\n120\n1414/24501643\n121\n3941/685086954\n122\n2469/814761623\n123\n100/967196601\n124\n95/130916508\n125\n964/90129775\n126\n194/21614189\n127\n1726/469176149\n128\n1339/507021354\n129\n2000/255635287\n130\n544/25849455\n131\n621/155907014\n132\n222/623254501\n133\n314/214757277\n134\n727/719707936\n135\n547/21143766\n136\n461/311483497\n137\n4087/60449332\n138\n1631/1015311972\n139\n1834/101023135\n140\n3267/860357248\n141\n3163/40922424\n142\n3403/421463738\n143\n589/1060248578\n144\n3811/670099066\n145\n2784/748386275\n146\n3883/286974960\n147\n1008/139001965\n148\n1783/917578462\n149\n1545/961030256\n150\n3792/640593217\n151\n1383/416346128\n152\n881/297142236\n153\n3989/14720980\n154\n527/36307413\n155\n1753/832728266\n156\n1538/1007021727\n157\n135/1018954402\n158\n2797/583931067\n159\n1665/585200942\n160\n461/81279859\n161\n389/19909664\n162\n1351/42801896\n163\n2983/138422780\n164\n113/53468008\n165\n220/458926151\n166\n2347/798662572\n167\n1901/629453595\n168\n249/220240256\n169\n555/122303336\n170\n424/546528841\n171\n2611/1066065653\n172\n185/248996403\n173\n16/869719315\n174\n1296/1025864375\n175\n922/471033127\n176\n3289/113385930\n177\n2760/331148903\n178\n1269/500179886\n179\n644/34891627\n180\n1723/46158438\n181\n1430/442744349\n182\n1811/101840346\n183\n1297/961100527\n184\n2817/85586234\n185\n3323/928681801\n186\n2230/46314039\n187\n1105/88688181\n188\n298/279877697\n189\n274/160940061\n190\n2037/759125239\n191\n2521/1069947065\n192\n3811/69738543\n193\n5/299346\n194\n669/168267943\n195\n587/299336535\n196\n1628/213486881\n197\n677/196357774\n198\n1282/7503525\n199\n509/17749668\n200\n3335/679406881\n201\n2881/444247029\n202\n2997/911880241\n203\n615/669494497\n204\n741/161444099\n205\n95/124642914\n206\n4059/937821799\n207\n2429/585618925\n208\n3573/650422643\n209\n481/77630235\n210\n86/106798881\n211\n541/32390592\n212\n859/444307911\n213\n3907/563694763\n214\n1153/158067139\n215\n1129/349194857\n216\n1819/30526908\n217\n223/79532146\n218\n883/2758357\n219\n1985/745049399\n220\n1079/894910017\n221\n1371/405900040\n222\n2306/574863867\n223\n142/88799337\n224\n3665/330957348\n225\n876/470510479\n226\n2021/491047602\n227\n1453/418391821\n228\n2227/331939582\n229\n2443/520805375\n230\n1889/115796664\n231\n1693/110053531\n232\n718/999964225\n233\n54/963672479\n234\n1672/633003383\n235\n2288/757295083\n236\n3924/575484559\n237\n621/173799922\n238\n4010/827500107\n239\n1525/999386926\n240\n539/401947415\n241\n2231/521064522\n242\n2135/306293964\n243\n5/5176219\n244\n454/82707415\n245\n1104/668972159\n246\n118/191111141\n247\n1387/370965948\n248\n3855/894767876\n249\n473/131640230\n250\n1755/730368922\n251\n1588/1058437535\n252\n149/152629403\n253\n2293/386723279\n254\n19/705509218\n255\n210/113603351\n256\n249/135924908\n257\n31/315499\n258\n3995/170045541\n259\n499/454431567\n260\n3438/485423771\n261\n1001/410985493\n262\n209/174104451\n263\n170/225824679\n264\n5/990171\n265\n1887/451026595\n266\n528/190558909\n267\n17/3894723\n268\n3577/708282594\n269\n2542/340171691\n270\n277/48556585\n271\n939/79042045\n272\n411/171278552\n273\n2750/324220913\n274\n848/55268689\n275\n4047/1044785887\n276\n681/459669049\n277\n1051/265565740\n278\n2376/571701517\n279\n1324/331528115\n280\n1991/17832433\n281\n1076/276986115\n282\n2709/743552825\n283\n511/239039415\n284\n2561/255886175\n285\n4/21712369\n286\n1941/372171700\n287\n1141/232890755\n288\n412/306486093\n289\n2917/178006080\n290\n919/380234982\n291\n664/29920885\n292\n1679/272458218\n293\n1287/203463191\n294\n1003/70413057\n295\n224/93665981\n296\n3147/523572358\n297\n351/324585068\n298\n415/207123912\n299\n2305/778018968\n300\n2435/642706703\n301\n887/320948281\n302\n541/182887\n303\n2723/43789861\n304\n14/3332123\n305\n378/468838373\n306\n1127/446323023\n307\n487/180901549\n308\n1381/237334455\n309\n2376/544355807\n310\n345/492282536\n311\n1262/783773995\n312\n434/303501603\n313\n3745/554568306\n314\n87/59866292\n315\n466/77622699\n316\n190/342171421\n317\n1604/527917171\n318\n353/48491361\n319\n779/772159726\n320\n2425/288436932\n321\n1340/1014678059\n322\n23/11046914\n323\n1699/504813213\n324\n1556/363220481\n325\n115/204757701\n326\n3737/616466710\n327\n897/161358413\n328\n1026/1069058587\n329\n79/5845734\n330\n1999/248908378\n331\n1673/976495277\n332\n505/524461223\n333\n177/192859414\n334\n309/626354659\n335\n1753/15813865\n336\n2517/304302079\n337\n1273/184831093\n338\n1777/1010549601\n339\n2260/371973601\n340\n3293/195187558\n341\n3379/585250355\n342\n2001/166776640\n343\n1613/350263445\n344\n1915/220966554\n345\n3087/124778782\n346\n684/125658409\n347\n397/746839617\n348\n629/54213604\n349\n64/469016765\n350\n3430/16537981\n351\n1613/274446654\n352\n203/5243117\n353\n1735/1052680163\n354\n2140/780962747\n355\n2235/133550567\n356\n3583/356233243\n357\n613/120445502\n358\n523/221439336\n359\n1528/121934673\n360\n31/175522190\n361\n1805/247524858\n362\n97/15077183\n363\n121/2381818\n364\n782/90343155\n365\n3049/790809238\n366\n2329/692486479\n367\n421/825467357\n368\n1109/132971414\n369\n1297/175519824\n370\n1625/113847459\n371\n1686/141745765\n372\n1757/195715033\n373\n2580/515823097\n374\n267/182340674\n375\n859/11838332\n376\n745/459279174\n377\n691/1010606794\n378\n49/6245937\n379\n170/157467093\n380\n4069/388518275\n381\n3566/340581525\n382\n35/147820917\n383\n2339/948395859\n384\n2001/189898078\n385\n26/48109507\n386\n3367/167498404\n387\n679/749815000\n388\n79/922723174\n389\n3200/513505239\n390\n3074/845734519\n391\n642/362270153\n392\n861/641057428\n393\n268/205214307\n394\n1816/94117153\n395\n1688/818147715\n396\n1727/296975964\n397\n3793/474847804\n398\n1/870172857\n399\n1667/497716674\n400\n1699/1052639187\n401\n1516/5230667\n402\n385/170731651\n403\n1687/81239257\n404\n284/46826749\n405\n489/1005190564\n406\n3088/674372965\n407\n955/154222359\n408\n1531/616964062\n409\n1163/661003097\n410\n920/336569351\n411\n891/279468389\n412\n1051/205408714\n413\n1745/1008429112\n414\n951/539973455\n415\n1735/122526991\n416\n247/377898652\n417\n767/113909050\n418\n795/310790152\n419\n547/292796393\n420\n549/83474833\n421\n328/364925809\n422\n1855/504971903\n423\n786/327133193\n424\n61/16015220\n425\n587/500254914\n426\n1953/476977163\n427\n3359/726877194\n428\n52/137685\n429\n726/136897627\n430\n145/54063166\n431\n2811/123197474\n432\n737/55613880\n433\n446/356899855\n434\n247/116331138\n435\n3738/28514807\n436\n466/478216965\n437\n1716/578137831\n438\n3982/862217319\n439\n391/143925278\n440\n691/290453664\n441\n46/41099009\n442\n3011/758045610\n443\n635/139816474\n444\n3745/443247046\n445\n3369/390531773\n446\n2278/531724557\n447\n1422/983119465\n448\n1631/815668318\n449\n3496/936260033\n450\n709/332943806\n451\n1536/114651197\n452\n3101/14347345\n453\n1685/365914579\n454\n981/104547386\n455\n581/116255780\n456\n1357/155054486\n457\n178/363051003\n458\n4054/525058051\n459\n4091/450851207\n460\n2719/417113470\n461\n3073/1017209710\n462\n736/1022795107\n463\n1731/514249945\n464\n2053/264609540\n465\n4033/824958705\n466\n23/104188260\n467\n3291/413164270\n468\n1624/260601297\n469\n223/81723185\n470\n3729/522533441\n471\n782/511604835\n472\n708/37478819\n473\n474/15170483\n474\n27/936328535\n475\n169/989724747\n476\n2263/541854498\n477\n379/115925580\n478\n539/166119733\n479\n803/610493355\n480\n3829/155843334\n481\n519/194724646\n482\n3364/973737385\n483\n292/68553821\n484\n2460/955661033\n485\n901/30620286\n486\n1285/499691933\n487\n1700/104115751\n488\n527/223987281\n489\n3919/667941223\n490\n2257/1002659767\n491\n50/109691699\n492\n3463/365683193\n493\n329/134073637\n494\n727/192689533\n495\n81/4071472\n496\n1975/17212317\n497\n3259/1008885811\n498\n2218/899052455\n499\n2545/914952117\n500\n1825/861749182\n501\n485/91806042\n502\n2842/328634749\n503\n3377/326835089\n504\n274/867621973\n505\n337/1061380812\n506\n1592/807568909\n507\n452/885218753\n508\n3313/508463027\n509\n523/26182334\n510\n341/112274204\n511\n2125/875282104\n512\n876/130318585\n513\n2075/935832778\n514\n1921/33909921\n515\n172/746803097\n516\n2431/859316036\n517\n18/82701709\n518\n304/8443031\n519\n2563/968779805\n520\n2512/683739763\n521\n11/337467011\n522\n1168/434558647\n523\n690/948347507\n524\n725/129338984\n525\n564/88990493\n526\n2516/11526073\n527\n1069/56979784\n528\n3579/91901140\n529\n3178/864104833\n530\n3179/711040611\n531\n2013/55520131\n532\n1271/498670130\n533\n1746/511713635\n534\n1831/950707072\n535\n263/17971497\n536\n860/483652029\n537\n511/167381778\n538\n13/520966564\n539\n359/41651071\n540\n3312/1013258075\n541\n631/378939665\n542\n366/173917789\n543\n451/74780834\n544\n1168/437801039\n545\n485/609575107\n546\n3365/765791933\n547\n4034/263908077\n548\n294/33043789\n549\n2658/351854065\n550\n24/13951847\n551\n1911/622119521\n552\n1541/94822056\n553\n1319/994957898\n554\n1301/564666822\n555\n13/7107157\n556\n1542/470645869\n557\n3/49022774\n558\n2517/74694128\n559\n198/118382263\n560\n727/16724788\n561\n205/1061834624\n562\n3441/316622147\n563\n735/217507681\n564\n1049/51591502\n565\n220/246186219\n566\n605/455714323\n567\n2201/338973822\n568\n3588/45397681\n569\n3039/656118959\n570\n4033/162112767\n571\n2554/454940517\n572\n2773/582065200\n573\n1306/635450941\n574\n2519/408767203\n575\n176/313490645\n576\n1429/573496250\n577\n355/961961789\n578\n2446/518687055\n579\n685/500882624\n580\n361/39751123\n581\n873/26603438\n582\n181/184482317\n583\n257/811194350\n584\n29/10478542\n585\n33/70330802\n586\n3166/991517965\n587\n343/14832108\n588\n3997/895729824\n589\n3036/906603199\n590\n1243/1055499164\n591\n1729/200172282\n592\n727/177117903\n593\n1523/62904964\n594\n3516/383857409\n595\n3634/159097811\n596\n361/174826094\n597\n449/168796029\n598\n1489/884117129\n599\n79/80467449\n600\n2293/922698366\n601\n935/182711783\n602\n1837/987857373\n603\n1301/395770252\n604\n1103/478875370\n605\n3259/436936741\n606\n912/512328161\n607\n2377/382591955\n608\n703/526884148\n609\n2199/515682964\n610\n1595/1070426854\n611\n975/351038119\n612\n2952/1055433715\n613\n521/437144131\n614\n79/950553819\n615\n2207/58694147\n616\n889/345140454\n617\n980/407564237\n618\n3181/237786684\n619\n3394/430206075\n620\n517/63478787\n621\n4087/115000510\n622\n3302/401844775\n623\n127/92487710\n624\n242/12032837\n625\n1340/290879713\n626\n435/57042392\n627\n388/45145739\n628\n1751/832410102\n629\n908/254246995\n630\n37/5409345\n631\n2134/613175751\n632\n2443/1045004729\n633\n416/339966441\n634\n1071/484579468\n635\n481/154927495\n636\n354/110849965\n637\n3537/831458513\n638\n311/171634090\n639\n100/118060213\n640\n1799/485116880\n641\n2431/1014648205\n642\n1325/945794587\n643\n439/63927029\n644\n384/49724897\n645\n972/1017140483\n646\n823/292658532\n647\n82/109576813\n648\n2707/497558056\n649\n378/107359321\n650\n619/15800438\n651\n1052/243803503\n652\n1914/478492675\n653\n3719/253625285\n654\n1014/933484007\n655\n3327/812866385\n656\n391/102266984\n657\n1213/251471088\n658\n132/37701397\n659\n1015/180975096\n660\n267/12707167\n661\n471/65700508\n662\n2703/324859657\n663\n212/1047583313\n664\n453/12942388\n665\n288/108689923\n666\n682/388621955\n667\n841/726335951\n668\n380/47047573\n669\n2651/343806975\n670\n352/10956645\n671\n841/286613692\n672\n2434/425188389\n673\n313/196518401\n674\n2149/813911085\n675\n1643/425813028\n676\n732/784905397\n677\n97/86669957\n678\n1298/836881413\n679\n2587/561324264\n680\n865/213108061\n681\n725/263834893\n682\n3801/19928180\n683\n271/54405814\n684\n2495/977563669\n685\n2445/916804202\n686\n257/8454664\n687\n1948/731346201\n688\n1013/130529356\n689\n105/19232693\n690\n607/69787790\n691\n4080/979176619\n692\n785/898803917\n693\n3964/690430773\n694\n566/60557953\n695\n3175/72550961\n696\n311/214722840\n697\n1909/59082132\n698\n5/2495606\n699\n2658/308929117\n700\n24/13309063\n701\n1115/717889857\n702\n568/198743761\n703\n1667/777491345\n704\n1819/637755302\n705\n111/19097267\n706\n481/274352940\n707\n3242/587664427\n708\n1423/519420953\n709\n3377/168624032\n710\n3643/225836366\n711\n680/337136169\n712\n1747/854336535\n713\n868/700454253\n714\n445/274829329\n715\n719/114456634\n716\n373/169695944\n717\n775/631417314\n718\n915/361185227\n719\n21/3372097\n720\n2901/29743205\n721\n215/151393819\n722\n3993/463248130\n723\n143/29535952\n724\n3909/751133984\n725\n185/185627758\n726\n1377/344571127\n727\n3343/504683891\n728\n298/389723465\n729\n472/162218505\n730\n2703/406947787\n731\n3793/41862176\n732\n1718/338692815\n733\n3536/477448117\n734\n3189/444665719\n735\n448/132057405\n736\n2265/131668697\n737\n1339/470382539\n738\n93/106998089\n739\n19/53052856\n740\n193/131317975\n741\n1130/40753809\n742\n143/71169647\n743\n3050/1056265667\n744\n590/314643157\n745\n995/263251521\n746\n3161/985866126\n747\n469/55287811\n748\n182/43833093\n749\n1106/22896375\n750\n1861/246217150\n751\n1074/42186211\n752\n998/489646067\n753\n1791/421306229\n754\n2621/31614889\n755\n733/164492467\n756\n1098/101137055\n757\n928/73435353\n758\n518/257427805\n759\n614/434386159\n760\n263/82705947\n761\n145/62736994\n762\n583/166105506\n763\n22/19808231\n764\n42/71797381\n765\n2234/293694489\n766\n982/209478221\n767\n329/52327756\n768\n188/650841607\n769\n1587/123843277\n770\n4009/652892374\n771\n595/461235156\n772\n79/6488784\n773\n1643/755495855\n774\n346/29612733\n775\n2034/294417073\n776\n723/40208458\n777\n1570/917581689\n778\n1601/102597835\n779\n2774/850951019\n780\n165/159123233\n781\n2395/970423387\n782\n527/59858640\n783\n2803/946782021\n784\n923/163463757\n785\n967/249963740\n786\n38/869830675\n787\n441/7063339\n788\n3548/227902229\n789\n1865/324233569\n790\n1607/943261041\n791\n1437/761241320\n792\n1826/976153911\n793\n3283/536243227\n794\n1759/952812577\n795\n1965/490875008\n796\n2335/848884074\n797\n1817/838899843\n798\n829/958318357\n799\n1529/855564034\n800\n49/180015268\n801\n361/96761296\n802\n1018/382972105\n803\n1330/145187991\n804\n3649/672582745\n805\n2039/714325819\n806\n3284/1008212667\n807\n1799/234889995\n808\n1288/6660379\n809\n1233/684551194\n810\n1261/989183677\n811\n2393/939974257\n812\n3017/449527173\n813\n2612/788726905\n814\n1865/418062369\n815\n997/186352303\n816\n3190/794051653\n817\n3425/999682488\n818\n851/425791832\n819\n1171/1007437435\n820\n1087/121025748\n821\n2777/769987741\n822\n1025/227493714\n823\n388/851215105\n824\n918/1013028415\n825\n407/26154561\n826\n1623/147085885\n827\n13/201483389\n828\n3628/972903251\n829\n932/211918263\n830\n463/20019499\n831\n1269/363001546\n832\n2801/1008448500\n833\n921/85048018\n834\n1858/503834909\n835\n1015/378152753\n836\n1047/264733640\n837\n132/20973949\n838\n1041/439794076\n839\n32/53565817\n840\n602/107063891\n841\n2485/758741672\n842\n885/8690203\n843\n3121/305803884\n844\n116/89348095\n845\n386/194808429\n846\n2497/23402215\n847\n2411/666073634\n848\n117/908304842\n849\n785/57862202\n850\n1478/446556119\n851\n16/6391225\n852\n519/654012835\n853\n901/27753790\n854\n3393/1049279671\n855\n336/92414717\n856\n943/699531635\n857\n909/158171492\n858\n1313/133674198\n859\n1183/333564480\n860\n797/831112915\n861\n227/50633256\n862\n269/286816490\n863\n130/124327191\n864\n323/41836750\n865\n979/199162704\n866\n137/97344794\n867\n862/782236855\n868\n593/832880814\n869\n1274/32899493\n870\n4051/218428236\n871\n134/951441945\n872\n1171/207508691\n873\n1741/739723068\n874\n1099/14409016\n875\n1374/692351345\n876\n3628/332960735\n877\n163/465768156\n878\n25/39977164\n879\n3463/908630555\n880\n410/102641413\n881\n1944/915663845\n882\n162/35097401\n883\n994/372535397\n884\n2357/349546420\n885\n2629/412312838\n886\n2053/179278083\n887\n657/21974524\n888\n2413/707931171\n889\n269/769952397\n890\n411/467734145\n891\n756/807782845\n892\n2548/19933653\n893\n2803/667193424\n894\n1423/783594069\n895\n700/96176623\n896\n1466/637882947\n897\n3639/413007962\n898\n370/26389529\n899\n181/1757418\n900\n2801/898660141\n901\n2137/866676155\n902\n538/1014286609\n903\n225/450603476\n904\n471/84167869\n905\n3611/222888506\n906\n401/595956283\n907\n440/156100547\n908\n2741/512936425\n909\n1471/225502587\n910\n1174/305695623\n911\n567/513599855\n912\n483/120977560\n913\n107/94388720\n914\n1/2172138\n915\n1993/94874019\n916\n3015/954685171\n917\n181/100904192\n918\n2639/661583633\n919\n2999/443104516\n920\n872/317327969\n921\n106/70861129\n922\n1209/495947159\n923\n353/495462556\n924\n1199/285380167\n925\n2854/97775327\n926\n1157/183748164\n927\n20/1946487\n928\n2646/245530147\n929\n124/970409139\n930\n1009/206947685\n931\n2989/930280457\n932\n4086/62692169\n933\n1171/127368488\n934\n3301/277365796\n935\n17/7012557\n936\n85/214331916\n937\n414/954230909\n938\n937/125608432\n939\n695/773174629\n940\n3107/1031922984\n941\n185/165357321\n942\n361/133318952\n943\n2429/148004821\n944\n850/560790097\n945\n3235/589500103\n946\n1087/111905621\n947\n334/147459923\n948\n3006/991074821\n949\n1413/149675546\n950\n1565/1019935288\n951\n2034/526436465\n952\n3543/77187694\n953\n2195/791669104\n954\n1436/1021110251\n955\n950/245332837\n956\n1359/151187440\n957\n2254/389050079\n958\n3722/1069253029\n959\n1628/227580769\n960\n279/611834518\n961\n118/596369589\n962\n360/51827879\n963\n1098/471465989\n964\n863/66803302\n965\n45/65338978\n966\n283/412658138\n967\n2519/248990697\n968\n409/631871624\n969\n853/385854369\n970\n3031/739560074\n971\n2787/735096484\n972\n1141/411565578\n973\n1869/666315703\n974\n3243/35493791\n975\n1368/486213613\n976\n2021/1019561821\n977\n1079/805834675\n978\n68/331676935\n979\n535/825646456\n980\n2842/57226833\n981\n549/230996909\n982\n111/27511477\n983\n1185/472123726\n984\n44/259809615\n985\n2597/626381549\n986\n401/141739531\n987\n569/51033799\n988\n3541/287527130\n989\n1514/68942915\n990\n1031/168907527\n991\n925/592327384\n992\n3069/258438179\n993\n38/1033751061\n994\n971/260274049\n995\n847/736595584\n996\n1838/509511193\n997\n139/61219083\n998\n1036/110230441\n999\n1649/815872271\n1000\n1900/34555453\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Rational Sequence 2",
        "body": {
            "question": "A sequence of positive rational numbers is defined as\n    follows:An infinite full binary tree labeled by positive rational\n    numbers is defined by:\n      \n        The label of the root is $1/1$.\n      \n\n      \n        The left child of label $p/q$ is $p/(p+q)$.\n      \n\n      \n        The right child of label $p/q$ is $(p+q)/q$.\n      \n    The top of the tree is shown in the following figure:\n      \n        \n      \n    The sequence is defined by doing a level order (breadth\n    first) traversal of the tree (indicated by the light dashed\n    line). So that:\\[ F(1) = 1/1,\n    F(2) = 1/2, F(3) = 2/1, F(4) = 1/3, F(5) = 3/2, F(6) = 2/3,\n    \\ldots \\]Write a program which finds the value of $n$ for which $F(n)$ is $p/q$ for inputs $p$ and $q$.",
            "input": "The first line of input contains a single integer\n    $P$, $(1 \\le P \\le 1000)$, which is the\n    number of data sets that follow. Each data set should be\n    processed identically and independently. Each data set consists\n    of a single line of input. It contains the data set number,\n    $K$, a single space, the\n    numerator, $p$, a forward\n    slash (/) and the denominator,\n    $q$, of the desired\n    fraction.",
            "output": "For each data set there is a single line of output. It\n    contains the data set number, $K$, followed by a single space which\n    is then followed by the value of $n$ for which $F(n)$ is $p/q$. Inputs will be chosen so\n    $n$ will fit in a\n    $32$-bit integer."
        },
        "table": {
            "input": [
                "4\n1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n"
            ],
            "output": [
                "1 1\n2 4\n3 11\n4 1431655765\n"
            ]
        },
        "sidebar": {
            "problemID": "rationalsequence2",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.5"
        },
        "content": {
            "author": "2015 Greater New York Region ACM Regional Contest",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n"
            ],
            "output": [
                "1 1\n2 4\n3 11\n4 1431655765\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Rational Sequence (Take 3)",
        "body": {
            "question": "A sequence of positive rational numbers is defined as\n    follows:An infinite full binary tree labeled by positive rational\n    numbers is defined by:\n      \n        The label of the root is $1/1$.\n      \n\n      \n        The left child of label $p/q$ is $p/(p+q)$.\n      \n\n      \n        The right child of label $p/q$ is $(p+q)/q$.\n      \n    The top of the tree is shown in the following figure:\n      \n        \n      \n    The sequence is defined by doing a level order (breadth\n    first) traversal of the tree (indicated by the light dashed\n    line). So that:\\[ F(1) = 1/1,\n    F(2) = 1/2, F(3) = 2/1, F(4) = 1/3, F(5) = 3/2, F(6) = 2/3,\n    \\ldots \\]Write a program to compute the $n^{\\text {th}}$ element of the\n    sequence, $F(n)$. Does\n    this problem sound familiar? Well it should! We had variations\n    of this problem at the $2014$ and $2015$ Greater NY ACM ICPC\n    Regionals.",
            "input": "The first line of input contains a single integer\n    $P$, ($1 \\le P \\le 1\\, 000$), which is the\n    number of data sets that follow. Each data set should be\n    processed identically and independently. Each data set consists\n    of a single line of input. It contains the data set number,\n    $K$, and the index,\n    $N$, of the sequence\n    element to compute ($1 \\le N \\le\n    2\\, 147\\, 483\\, 647$).",
            "output": "For each data set there is a single line of output. It\n    contains the data set number, $K$, followed by a single space which\n    is then followed by the numerator of the fraction, followed\n    immediately by a forward slash (‘/’)\n    followed immediately by the denominator of the fraction. Inputs\n    will be chosen so neither the numerator nor the denominator\n    will overflow an $32$-bit\n    unsigned integer."
        },
        "table": {
            "input": [
                "4\n1 1\n2 4\n3 11\n4 1431655765\n"
            ],
            "output": [
                "1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n"
            ]
        },
        "sidebar": {
            "problemID": "rationalsequence3",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.7"
        },
        "content": {
            "author": "2016 Greater New York Region ACM Regional Contest",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "4\n1 1\n2 4\n3 11\n4 1431655765\n"
            ],
            "output": [
                "1 1/1\n2 1/3\n3 5/2\n4 2178309/1346269\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Arbitrage?",
        "body": {
            "question": "If you are going to travel to the World Finals, you cannot\n    rely on Czech Crowns. You would have to exchange your money for\n    various foreign currencies. This problem deals with multiple\n    currencies and their exchange rates. Your task is to verify\n    that some set of exchange rates is safe, namely detect a\n    possibility of so-called arbitrage.An arbitrage is a risk-free combination of buy and\n    sell operations that gains profit from imbalance in market\n    prices. The prices may apply to various things, typically stock\n    exchange but also currencies.",
            "input": "The input consists of several test cases. Each case begins\n    with a line containing one positive integer number $C$, $1\n    \\leq C\\leq 200$, the number of currencies.The second line of each test case contains $C$ currency codes separated by a\n    space. Each code is composed of 3 uppercase letters and all\n    codes in one test case are different.The third line contains one integer number $R, 0\\leq R \\leq C\\cdot (C-1)$, the\n    number of exchange rates available. Each of the following\n    $R$ lines contains one\n    exchange rate in the following format: first currency code,\n    space, second currency code, space, integer number $A_ i$, colon (’:’), and integer number $B_ i$. The meaning is as follows: If\n    you pay $A_ i$ units of\n    the first currency, you will get $B_ i$ units of the second currency.\n    You may assume that $1\\leq A_ i,\n    B_ i\\leq 100$ and that the two currencies are\n    different.The last test case is followed by a line with $C=0$.",
            "output": "For each test case, print one line of output. If there\n    exists any possible sequence of currency exchange operations\n    that would result in a profit, the line should contain the word\n    \"Arbitrage\". Otherwise, simply print\n    \"Ok\".The word profit in this case means that you start\n    with any amount of any currency and after performing any number\n    of exchanges you will have strictly higher amount of the same\n    currency."
        },
        "table": {
            "input": [
                "2\nCZK EUR\n2\nCZK EUR 25:1\nEUR CZK 1:25\n2\nGBP USD\n2\nUSD GBP 8:5\nGBP USD 5:9\n3\nBON DEM CZK\n3\nDEM BON 1:6\nBON CZK 1:5\nDEM CZK 1:20\n3\nCZK EUR GBP\n3\nCZK EUR 24:1\nEUR GBP 5:4\nGBP CZK 1:30\n3\nCZK USD GBP\n4\nCZK USD 28:1\nCZK GBP 31:1\nGBP CZK 1:31\nUSD GBP 1:1\n0\n"
            ],
            "output": [
                "Ok\nArbitrage\nOk\nOk\nArbitrage\n"
            ]
        },
        "sidebar": {
            "problemID": "arbitrage",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "3.7"
        },
        "content": {
            "author": "CTU Open 2010",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "2\nCZK EUR\n2\nCZK EUR 25:1\nEUR CZK 1:25\n2\nGBP USD\n2\nUSD GBP 8:5\nGBP USD 5:9\n3\nBON DEM CZK\n3\nDEM BON 1:6\nBON CZK 1:5\nDEM CZK 1:20\n3\nCZK EUR GBP\n3\nCZK EUR 24:1\nEUR GBP 5:4\nGBP CZK 1:30\n3\nCZK USD GBP\n4\nCZK USD 28:1\nCZK GBP 31:1\nGBP CZK 1:31\nUSD GBP 1:1\n0\n"
            ],
            "output": [
                "Ok\nArbitrage\nOk\nOk\nArbitrage\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Arcade!",
        "body": {
            "question": "Write a program that computes the expected payout when\n    dropping a ball into the machine!",
            "input": "The input consists of a single test case. The first line\n    contains an integer $N$\n    ($1 \\le N \\le 32$)\n    describing the number of rows of the arcade machine. The second\n    line contains $H = N (N+1) /\n    2$ integers $v_ i$\n    ($-100 \\le v_ i \\le 100$)\n    describing the payout (positive or negative) if the ball drops\n    into hole $i$. Holes are\n    numbered such that hole $1$ is in the first row, holes\n    $2$ and $3$ are in the second row, etc. The\n    $k^{\\textrm{th}}$ row\n    starts with hole number $k (k-1)\n    / 2 + 1$ and contains exactly $k$ holes.These two lines are followed by $H$ lines, each of which contains\n    $5$ real numbers\n    $p_0 \\ p_1 \\ p_2 \\ p_3 \\\n    p_4$, denoting the probability that the ball bounces to\n    its top-left ($p_0$),\n    top-right ($p_1$),\n    bottom-left ($p_2$), or\n    bottom-right ($p_3$)\n    neighbors or that the ball enters the hole ($p_4$). Each probability is given with\n    at most $3$ decimal digits\n    after the period. It is guaranteed that $0.0 \\le p_ i \\le 1.0$ and\n    $\\sum p_ i = 1.0$. If a\n    hole does not have certain neighbors because it is located near\n    the boundary of the arcade machine, the probability of bouncing\n    to these non-existent neighbors is always zero. For instance,\n    for hole number $1$, the\n    probabilities to jump to the top-left and top-right neighbors\n    are both given as $0.0$.You can assume that after the ball has bounced $b$ times, the probability that it has\n    not fallen into a hole is at most $(1 - 10^{-3})^{\\lfloor b/H \\rfloor\n    }$.",
            "output": "Output a single number, the expected value from playing one\n    game. Your answer is considered correct if its absolute or\n    relative error is less than $10^{-4}$.Hint: Using Monte Carlo-style simulation (throwing\n    many balls in the machine and simulating which hole they fall\n    into using randomly generated choices) does not yield the\n    required accuracy!"
        },
        "table": {
            "input": [
                "4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n",
                "2\n100 50 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.90 0.0 0.0 0.10\n0.90 0.0 0.0 0.0 0.10\n"
            ],
            "output": [
                "32.6405451448\n",
                "76.31578947368\n"
            ]
        },
        "sidebar": {
            "problemID": "arcade",
            "CPU": " 3 seconds",
            "memory": " 1024 MB",
            "difficulty": "6.2"
        },
        "content": {
            "author": "Godmar Back",
            "source": "2016 ICPC North American Qualifier Contest",
            "license": "https://licensebuttons.net/l/by-sa/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n",
                "2\n100 50 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.90 0.0 0.0 0.10\n0.90 0.0 0.0 0.0 0.10\n"
            ],
            "output": [
                "32.6405451448\n",
                "76.31578947368\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "Arctic Network",
        "body": {
            "question": "The Department of National Defence (DND) wishes to connect\n    several northern outposts by a wireless network. Two different\n    communication technologies are to be used in establishing the\n    network: every outpost will have a radio transceiver and some\n    outposts will in addition have a satellite channel.Any two outposts with a satellite channel can communicate\n    via the satellite, regardless of their location. Otherwise, two\n    outposts can communicate by radio only if the distance between\n    them does not exceed $D$,\n    which depends of the power of the transceivers. Higher power\n    yields higher $D$ but\n    costs more. Due to purchasing and maintenance considerations,\n    the transceivers at the outposts must be identical; that is,\n    the value of $D$ is the\n    same for every pair of outposts.Your job is to determine the minimum $D$ required for the transceivers.\n    There must be at least one communication path (direct or\n    indirect) between every pair of outposts.",
            "input": "The first line of input contains $N$, the number of test cases. The\n    first line of each test case contains $1 \\le S \\le 100$, the number of\n    satellite channels, and $S < P\n    \\le 500$, the number of outposts. $P$ lines follow, giving the\n    ($x,y$) coordinates of\n    each outpost in km (coordinates are integers between\n    $0$ and $10\\, 000$).",
            "output": "For each case, output should consist of a single line giving\n    the minimum $D$ required\n    to connect the network. Output should be specified to\n    $2$ decimal points."
        },
        "table": {
            "input": [
                "1\n2 4\n0 100\n0 300\n0 600\n150 750\n"
            ],
            "output": [
                "212.13\n"
            ]
        },
        "sidebar": {
            "problemID": "arcticnetwork",
            "CPU": " 2 seconds",
            "memory": " 1024 MB",
            "difficulty": "4.5"
        },
        "content": {
            "author": "Waterloo Programming Contest 2002-09-28",
            "source": ""
        },
        "testCases": {
            "numTestCases": "1",
            "input": [
                "1\n2 4\n0 100\n0 300\n0 600\n150 750\n"
            ],
            "output": [
                "212.13\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    },
    {
        "problem": "A Real Challenge",
        "body": {
            "question": "The input consists of a single integer $a$ ($1\n    \\le a \\le 10^{18}$), the area in square meters of Old\n    MacDonald’s pasture.",
            "input": "The input consists of a single integer $a$ ($1\n    \\le a \\le 10^{18}$), the area in square meters of Old\n    MacDonald’s pasture.",
            "output": "Output the total length of fence needed for the pasture, in\n    meters. The length should be accurate to an absolute or\n    relative error of at most $10^{-6}$."
        },
        "table": {
            "input": [
                "16\n",
                "5\n"
            ],
            "output": [
                "16\n",
                "8.94427190999915878564\n"
            ]
        },
        "sidebar": {
            "problemID": "areal",
            "CPU": " 1 second",
            "memory": " 1024 MB",
            "difficulty": "1.6"
        },
        "content": {
            "author": "Per Austrin",
            "source": "Northwestern Europe Regional Contest (NWERC) 2015 Practice",
            "license": "https://licensebuttons.net/l/by/3.0/80x15.png"
        },
        "testCases": {
            "numTestCases": "2",
            "input": [
                "16\n",
                "5\n"
            ],
            "output": [
                "16\n",
                "8.94427190999915878564\n"
			],
			"desc": [
			]
        },
        "data": {
            "category": ""
        }
    }
]
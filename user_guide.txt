# Kattis-Helper
===================================================================================================
Kattis Helper Web Project, for the aspiring Thomas.
===================================================================================================

---------------------------------------------------------------------------------------------------
Readme Contents:
---------------------------------------------------------------------------------------------------

1. Kattis Helper / Project Scope
2. User Guide & Features
3. Project Folder Contents
4. Project Log
5. Testing
6. Contributing

===================================================================================================
1. Kattis Helper:
===================================================================================================

---------------------------------------------------------------------------------------------------
Overview:
---------------------------------------------------------------------------------------------------

Kattis Helper is a website that aims to facilitate users with solving Kattis problems.

Kattis (open.kattis.com) is a website that provides programming problems, of which many are from
programming competitions. Users are able to submit code on the Kattis website itself, but Kattis
itself does not have any options for user discussion, or allowing users to test their code (users
are only able to submit code and are told only whether their answers are correct or wrong).

With this, Kattis Helper was designed with user discussion and testing, which the Kattis website
does not. Built on nodejs express, Kattis Helper is hosted on herokuapp, using mongoDB atlas as
cloud database for storage, with Sphere Engine for the online compiler.

Users are able to create accounts to engage in forum discussion for problems, while also being able
to test out their code in the online compiler in Kattis Helper. 

To access the website, users can use this link: https://kattis-helper.herokuapp.com/

---------------------------------------------------------------------------------------------------
Motivations:
---------------------------------------------------------------------------------------------------

	Many students who take CS2040C are inevitably frustrated at solving Kattis problems for 
	practice.
	We wish to help out these people by facilitating discussions and providing hints for them.

---------------------------------------------------------------------------------------------------
User Stories:
---------------------------------------------------------------------------------------------------
	
	- A frustrated student who has to do Kattis problems and is stuck at a specific problem.
	- Students who wish to help other people who are struggling with kattis problems.

---------------------------------------------------------------------------------------------------
Aim:
---------------------------------------------------------------------------------------------------
	
	To provide a platform for discussion, hints and testing for Kattis problems.

---------------------------------------------------------------------------------------------------
Project Scope (descriptive):
---------------------------------------------------------------------------------------------------

	Kattis Helper is written in NodeJS, using Express as its framework.
	It is hosted on heroku at: https://kattis-helper.herokuapp.com/
	
	Backend Databases:
		Details of problems are stored locally as JSON (using FS to read)
			Since problem details are static, they are stored locally (especially since the files
			are very big)
		User database is stored in MongoDB Atlas servers (cloud database)
	
	Email system is done via nodemailer

===================================================================================================
2. User Guide & Features:
===================================================================================================

Kattis Helper can be accessed from the link: https://kattis-helper.herokuapp.com/

The frontpage shows the following sets of problems:
	Suggested Problems (from the Kattis Helper server)
	Popular Problems (problems that are searched for the most)
	
Clicking on the names of the problems will redirect the user to the problem itself.

Users can also search for specific problems using this link as an example:
(the ID of the problem will be at the end at the ?q= query)
https://kattis-helper.herokuapp.com/problem/?q=2048

At the problems list (https://kattis-helper.herokuapp.com/problemsList)
	Users are able to find all kattis problems, which are categorised and have their difficulties
	shown
	Users are able to filter based on name, category and difficulty.

For each problem, there are 4 menus to interact with:
	Details - Information regarding the problem
	
	Test Cases - Individual test cases for the questions
	
	IDE - Online compiler, allows the user to choose which test case they wanted to use
		Users can test specific test cases, or the entire question
	
	Forum - Discussion platform, requires login to post and reply
	
Login system:
	Users can create an account in Kattis Helper
		A verification email will be sent to the specified email with a verification code
		Verification code is used at https://kattis-helper.herokuapp.com/verify
	
	Password recovery uses the same process
	
	Users are able to see the problems that they have completed, as well as recent forum posts
	
	Other users are able to search for specific users, showing problems completed as well as recent
	forum posts.
	
===================================================================================================
3. Project Folder Contents:
===================================================================================================
Folders:
---------------------------------------------------------------------------------------------------
bin:
	default file

data:
	JSON data storage
		server-side storage for problem data

node_modules:
	npm

public:
	images:
		imgage assets
	javascripts:
		client-side js scripts to send
	stylesheets:
		css for html files`

routes:
	index.js:
		default js file for server-side requests
		
src:
	all html files
	
utilities:
	C++ scripts to manipulate JSON data

views:
	default file
	
---------------------------------------------------------------------------------------------------
Files:
---------------------------------------------------------------------------------------------------
app.js:
	for server-side setup
	
package.json & package-lock.json:
	npm modules list & miscellaneous info
	

===================================================================================================
4. Project Log:
===================================================================================================
---------------------------------------------------------------------------------------------------
Daniel:
---------------------------------------------------------------------------------------------------
Milestone 1 (~ - 3/6/19):
---------------------------------------------------------------------------------------------------

13/5/19 - 24/5/19:
orbital liftoff + full stack workshop by Eldric (https://blackening.github.io/)
html workshop 8hrs
css workshop 8hrs
vue workshop 8hrs
server workshop 8hrs
self-learning 8hrs

31/5/19:
designing basicframe work 2hrs
meeting up to do milestone video 2hrs

---------------------------------------------------------------------------------------------------
Milestone 2 (4/6/19 - 1/7/19):
---------------------------------------------------------------------------------------------------

4/6/19 - 9/6/19:
Working on organising the frontend of the website 4 hrs
Working on integrating and processing scraped data in the backend 6 hrs

10/6/19 - 16/6/19:
Working / figuring out how to make an user account system 8 hrs

17/6/19 - 23/6/19:
Working on backend implementation of forum system 3 hrs
Reading up and brainstorming on how to setup an online compiler 2 hrs

24/6/19 - 1/7/19:
Meeting up and working on milestone 2 submission + discussion on what to do for milestone 3. 3 hrs

---------------------------------------------------------------------------------------------------
Milestone 3 (2/7/19 - 29/7/19):
---------------------------------------------------------------------------------------------------

1/7/19 - 7/7/19:
re-writing of entire project to express (originally the project was in webpack) 16 hrs
setup of mysql for local database (which was scrapped later on) 3 hrs
discussing on how to handle forum and user system 2 hr

8/7/19 - 13/7/19:
setup of mongoDB atlas server for cloud database (including integrating with the serverside code) 5 hrs
setup of authentication system, including email verification and password recovery 10 hrs

14/7/19 - 20/7/19:
setup of forum system 8 hrs
setup of filtering and handling of data in problems list page 4 hrs
setup of user account page 2 hrs

21/7/19 - 27/7/19:
setup and figuring out how to host server (using heroku after trying out other alternatives) 5 hrs
fixing server-side issues in deployment 3 hrs
(settling express session memory leak and http security error)
added extra test cases to problems (that I have found before) 4 hrs
tidying up code and testing 2 hrs

28/7/19 - 29/7/19:
meeting up and creating milestone 3 submission 4 hrs
writing user guide / readme 2 hrs
added extra test cases to problems (that I have found before) 6 hrs
tidying up css 2 hrs

---------------------------------------------------------------------------------------------------
Hong Chuan:
---------------------------------------------------------------------------------------------------
Milestone 1 (~ - 3/6/19):
---------------------------------------------------------------------------------------------------

13/5/19 - 24/5/19:
orbital liftoff + full stack workshop by Eldric (https://blackening.github.io/)
html workshop 8hrs
css workshop 8hrs
vue workshop 8hrs
server workshop 8hrs
self-learning 8hrs

31/5/19:
designing basicframe work 2hrs
meeting up to do milestone video 2hrs

---------------------------------------------------------------------------------------------------
Milestone 2 (4/6/19 - 1/7/19):
---------------------------------------------------------------------------------------------------
4/6/19 - 9/6/19:
Learning how to do web scraping 2hr
Implementing web scraping 8hrs

10/6/19 - 16/6/19:
Learning to implement server 4hr

17/6/19 - 23/6/19:
Learning and testing how to use api 6hr

24/6/19 - 1/7/19:
Meeting up and working on milestone 2 submission + discussion on what to do for milestone 3. 3 hrs
---------------------------------------------------------------------------------------------------
Milestone 3 (2/7/19 - 29/7/19):
---------------------------------------------------------------------------------------------------
1/7/19 - 7/7/19:
Scraping more questions into the database 5hr
Configuring question database to better format to retrieve data more efficiently 4hr
Finding and applying for suitable compiler api token 2hrs

8/7/19 - 13/7/19:
Reading up and testing compiler api document 4hr
Setting up compiler api call for submitting code in backend 8hr
Setting up compiler api call for retrieving comilpied files in backend 8hr

14/7/19 - 20/7/19:
Setting up compiler api call for compilation error messages 6hr
Adding language selection for compiler 6hr
Setting up and debugging all compiler api call from frontend 14hr

21/7/19 - 27/7/19:
Adding option to directly test individual test case 4hr
Adding option to test all test cases 4hr
Tried to edit CSS of webpage 4hrs

28/7/19 - 29/7/19:
meeting up and creating milestone 3 submission 4 hrs

===================================================================================================
6. Testing:
===================================================================================================

Project is built on Express, using mongoDB Atlas to store user data in a cloud server.

Clone the repo as needed.

To run the server, type in the command:
	npm run test

and connect to http://localhost:3000/

Do note that the server will restart with any changes in code due to nodemon.

CLI will show tags for console outputs for verbose output as shown below:

---------------------------------------------------------------------------------------------------
[SRV] - SeRVer

HTTP requests:
[REQ] - (HTTP) Request
[IN] - INcoming request
[OUT] - OUTgoing request
[GET] [POST] - Request types


Modules:
[FS] - File System (used to read JSON)
[nodemailer] - npm nodemailer
[mongo] - npm mongodb
---------------------------------------------------------------------------------------------------

===================================================================================================
6. Contributing:
===================================================================================================

Pull requests are welcome. For major changes, please open an issue first to discuss what you would 
like to change.  Bug reporting is welcome.


---------------------------------------------------------------------------------------------------
